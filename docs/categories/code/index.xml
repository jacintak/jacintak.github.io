<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code | Jacinta&#39;s Website</title>
    <link>https://jacintak.github.io/categories/code/</link>
      <atom:link href="https://jacintak.github.io/categories/code/index.xml" rel="self" type="application/rss+xml" />
    <description>code</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 17 Jun 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jacintak.github.io/img/icon-512.png</url>
      <title>code</title>
      <link>https://jacintak.github.io/categories/code/</link>
    </image>
    
    <item>
      <title>Knitting an interactive document</title>
      <link>https://jacintak.github.io/post/knitting-an-interactive-document/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/knitting-an-interactive-document/</guid>
      <description>


&lt;div id=&#34;interactive-functions-dont-work-with-knitr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Interactive functions don’t work with &lt;code&gt;knitr&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;R has a neat interactive feature. You can write a script or a function that asks the user for input, like a number or a string, that can be used as a variable. I &lt;a href=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/&#34;&gt;wrote&lt;/a&gt; about how this feature works in an interactive function last year. Interactive functions are neat for demonstrating how variables work in functions but aren’t practical for most uses.&lt;/p&gt;
&lt;p&gt;One practical use for an interactive function I had recently was in a function to import multiple data files downloaded from a data logger. In this case, I wrote a generic function for importing the data because the structure of the data from the data logger (temperature, time, etc.) was consistent. Pretty standard stuff but the function asks the user where the files were located on the local drive. All files in the directory would be cleaned up and imported as a named list.&lt;/p&gt;
&lt;p&gt;Now you could say that the interactive aspect is unnecessary and you would be right. But where would the fun in that be?&lt;/p&gt;
&lt;p&gt;The importing function was saved as an R script (&lt;code&gt;.R&lt;/code&gt;) and called in a Rmarkdown file using &lt;code&gt;source()&lt;/code&gt; but there is a problem with this workflow. You can run an interactive session within an Rmarkdown file in a regular R session but you cannot knit it. By default, Rmarkdown does not permit an interactive R session while knitting. And that defeats the point of using Rmarkdown.&lt;/p&gt;
&lt;p&gt;Fortunately, there is a workaround to get &lt;code&gt;knitr&lt;/code&gt; to ask for the directory when knitting. We need to make some modifications to the YAML, setup chunk, and the importing function.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;yaml&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;YAML&lt;/h1&gt;
&lt;p&gt;You might have seen the option to “Knit with Parameters” in the Knit menu in RStudio. Parameters are additional variables that are called when knitting. We can use parameters to tell &lt;code&gt;knitr&lt;/code&gt; where to look for the files we are importing.&lt;/p&gt;
&lt;p&gt;Here’s a generic YAML with a parameter (&lt;code&gt;params&lt;/code&gt;) called &lt;code&gt;folder&lt;/code&gt; and the directory of the files we want (&lt;code&gt;data/subfolder&lt;/code&gt;). Note, no quotation marks in the address. The parameter &lt;code&gt;folder&lt;/code&gt; is used like a regular variable in R when knitting.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Title&amp;quot;
output:
  html_document:
    df_print: paged
params:
  folder: data/subfolder
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the files we want are located in a folder called &lt;code&gt;data&lt;/code&gt; and a sub-folder called &lt;code&gt;subfolder&lt;/code&gt; within our RStudio directory. The address can be where ever you want and it could be a full address or a relative address. I’m using addresses relative to the working directory, specifically the project directory because I’m working within a project. You’ll see why this is important below.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;setting-up-directories&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Setting up directories&lt;/h1&gt;
&lt;p&gt;I like to use subdirectories within an RStudio project. For example, I will have a separate folder for scripts, files, figures and any other outputs within my RStudio project folder. However, this is not the default behaviour of &lt;code&gt;knitr&lt;/code&gt; and causes some directory issues because &lt;code&gt;knitr&lt;/code&gt; uses the source file directory (i.e. “/project/scripts/” folder because that’s where my Rmd file is saved) rather than the project directory (i.e. “/project/”).&lt;/p&gt;
&lt;p&gt;So if I had the importing function (&lt;code&gt;import_data.R&lt;/code&gt;) in the scripts sub-folder, then:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Does not work when knitting, works in session
source(&amp;quot;scripts/import_data.R&amp;quot;)

# Works when knitting, does not work in session
source(&amp;quot;import_data.R&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would rather have the first option only because it makes more sense given my directory structure but this is a personal choice.&lt;/p&gt;
&lt;p&gt;You can tell &lt;code&gt;knitr&lt;/code&gt; to use the project directory when knitting in the &lt;code&gt;setup&lt;/code&gt; chunk via:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;opts_knit&lt;/code&gt; sets the options for knitting and &lt;code&gt;find_rstudio_root_file()&lt;/code&gt; is a helper function to get the root directory of the RStudio project (provided you are in one). This is instead of &lt;code&gt;setwd()&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;the-interactive-function&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The interactive function&lt;/h1&gt;
&lt;p&gt;Here’s a generic interactive function that will import all CSV files within a user-defined folder as a list called &lt;code&gt;imported_files&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import_files &amp;lt;- function(){
  # Ask the user for the folder address
  folder_address &amp;lt;- ifelse(interactive() == TRUE,
                           readline(&amp;quot;Enter relative folder address to working directory without quotation marks: &amp;quot;),
                           params$folder)
                           
  # Complete relative address
  folder_address &amp;lt;- paste(getwd(), folder_address, sep = &amp;quot;/&amp;quot;)

  # Get file names
  add.files &amp;lt;- list.files(folder_address, pattern=&amp;quot;.csv&amp;quot;, recursive = FALSE, full.names = TRUE)
  
  # Check the user has entered address properly
  if(identical(add.files, character(0))){ 
    message(paste(&amp;quot;Address&amp;quot;, folder_address, &amp;quot;has no files. Please try again.&amp;quot;)) 
    return(import_files()) # Return to the beginning of the function and start again
  }
  
  # Import file
  get.files &amp;lt;- lapply(add.files, read.csv)
  
  return(get.files)
  }

# Return as list
imported_files &amp;lt;- import_files()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The important feature of the interactive function that makes it play nicely with &lt;code&gt;knitr&lt;/code&gt; is the &lt;code&gt;ifelse&lt;/code&gt; statement when asking for the folder our CSVs are saved in (&lt;code&gt;folder_address&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In a regular R session that is interactive, the function will ask for the address (via &lt;code&gt;readline&lt;/code&gt;) but when knitting (thus when &lt;code&gt;interactive()&lt;/code&gt; is &lt;code&gt;FALSE&lt;/code&gt;) the folder address is the address defined in the &lt;code&gt;folder&lt;/code&gt; parameter (called via &lt;code&gt;params$folder&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This is where the knitting parameters we defined earlier comes in. So when knitting the input is &lt;code&gt;data/subfolder&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main reason I use relative addresses is so that I don’t have to type out the full address. I recreate the full address from the working directory so that there is no ambiguity in the address.&lt;/p&gt;
&lt;p&gt;Then, I have an &lt;code&gt;if&lt;/code&gt; statement for checking the address and user input. An error message will appear if the address does not have any CSV files (checked using &lt;code&gt;identical&lt;/code&gt;). It will print the address so you can check for typos.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;lapply&lt;/code&gt; function will load the CSVs as a list.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;knitting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Knitting&lt;/h1&gt;
&lt;p&gt;You need to use the “Knit with Parameters” option rather than the default Knit button (or a manual &lt;code&gt;render&lt;/code&gt;). I’m focussing on HTML here. When you knit, a window will pop up asking you what to input for each parameter you’ve set in the YAML. Here, it’s asking what’s the input for &lt;code&gt;folder&lt;/code&gt;. The window will say what you’ve set for &lt;code&gt;folder&lt;/code&gt; by default (&lt;code&gt;data/subfolder&lt;/code&gt;) or you can change it in the popup.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is this really useful? Probably not and it wouldn’t be as reproducible, but we can do it because we can!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;setting-knitr-options-globally&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Setting knitr options globally&lt;/h1&gt;
&lt;p&gt;You can set &lt;code&gt;opts_knit&lt;/code&gt; within your &lt;code&gt;.Rprofile&lt;/code&gt; as a global option using &lt;code&gt;options(knitr.package.root.dir = &amp;lt;address&amp;gt;)&lt;/code&gt; so that the root directory of your project is where your &lt;code&gt;.Rproj&lt;/code&gt; file is by default:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Always use project directory as root directory
if(class(try(rprojroot::find_rstudio_root_file(), silent = TRUE)) != &amp;quot;try-error&amp;quot;){
options(knitr.package.root.dir = rprojroot::find_rstudio_root_file())}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;if&lt;/code&gt; statement in your &lt;code&gt;.Rprofile&lt;/code&gt; file will check if there is an Rproject file (&lt;code&gt;.Rproj&lt;/code&gt;) using &lt;code&gt;rprojroot::find_rstudio_root_file()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;try&lt;/code&gt; is used in debugging to catch any error messages. &lt;code&gt;silent = TRUE&lt;/code&gt; will suppress showing these error messages.&lt;/p&gt;
&lt;p&gt;If you are not working in a project, then &lt;code&gt;find_rstudio_root_file()&lt;/code&gt; will generate an error message. So, we can check if we have generated an error message (&lt;code&gt;class&lt;/code&gt; should be a &lt;code&gt;&#34;try-error&#34;&lt;/code&gt;). If there is an error message, we are not working in a project and we do not change any options (&lt;code&gt;options(knitr.package.root.dir&lt;/code&gt; should be &lt;code&gt;NULL&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If there is no error message, then &lt;code&gt;find_rstudio_root_file()&lt;/code&gt; has found an &lt;code&gt;.Rproj&lt;/code&gt; file and will change the root directory to that location.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Again, setting &lt;code&gt;.Rprofile&lt;/code&gt; defaults creates dependencies in your code which may be convenient for you but not reproducible to others.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;other-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other points&lt;/h1&gt;
&lt;p&gt;You could also have a project specific &lt;code&gt;.Rprofile&lt;/code&gt; to your project root directory.&lt;/p&gt;
&lt;p&gt;Parameters can be called anything and you can have any number of parameters. They only work when knitting. They don’t work in a regular session.&lt;/p&gt;
&lt;p&gt;You can remove the last line of the importing function (&lt;code&gt;imported_files &amp;lt;- import_files()&lt;/code&gt;) if you’d rather load the function into your Global Environment.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Gifs keep on giving</title>
      <link>https://jacintak.github.io/post/2021-11-01-gifs-in-r/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-11-01-gifs-in-r/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-11-01-gifs-in-r/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


I love gifs.&lt;br /&gt;

&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/FMhaQAQyv0xwc/giphy.gif&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Gifs are great for showing how data changes over time or just for putting something engaging in a presentation. When I was working on modelling insect phenology I wanted to create a gif of how insects hatch throughout the year across Australia for my presentations. Making gifs in R has improved a little since then so here’s a quick guide to making gifs. I won’t cover interactive plots (e.g. &lt;code&gt;plotly&lt;/code&gt;).&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;looping-through-images&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Looping through images&lt;/h1&gt;
&lt;p&gt;Basically this involves making lots of png images then looping through them. The package is &lt;code&gt;animation&lt;/code&gt; which depends on ImageMagick so you will need to install ImageMagick first. I’ve found it handy for sequentially showings layers of a raster (e.g. where each layer is data over time).&lt;/p&gt;
&lt;p&gt;Make sure to install legacy functions when installing ImageMagick (e.g. convert). You may need to tell R where to find ImageMagick using &lt;code&gt;ani.options(convert = &#39;C:/ImageMagick-7.0.9-Q16/convert.exe&#39;)&lt;/code&gt; for where ever ImageMagick was installed.&lt;/p&gt;
&lt;p&gt;Let’s pretend we have a raster of soil temperature for one day where each layer (n = 24) is an hour of a day (&lt;code&gt;soil_temp&lt;/code&gt;), like a raster from &lt;a href=&#34;https://onlinelibrary.wiley.com/doi/10.1111/aec.12689&#34;&gt;microclimOz&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We need to create our loop, then we can use &lt;code&gt;animation::saveGIF&lt;/code&gt; to save our image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(animation)
library(raster)
pal &amp;lt;- terrain.colors(10, rev = TRUE)
bre &amp;lt;- round(seq(min(minValue(soil_temp))-1,max(maxValue(soil_temp))+1,length.out=10))
saveGIF({
for(i in 1:24){plot(soil_temp[[i]], main = i, col = pal, breaks = bre)}
}, movie.name = &amp;quot;soil_temp.gif&amp;quot;, clean=T, convert = &amp;quot;convert&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;soil_temp.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To make sure the colour scale is consistent throughout the loop:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I’ve defined a fixed colour scale (&lt;code&gt;pal&lt;/code&gt;) using the base palette &lt;code&gt;terrain.colours&lt;/code&gt; and reversed the scale so that higher temperatures are green. Note that the terrain colour palette isn’t great for colour blindness.&lt;/li&gt;
&lt;li&gt;I’ve created my own colour scale (&lt;code&gt;bre&lt;/code&gt;) by manually defining the breaks in the colour scale based on the minimum and maximum temperatures in the entire raster dataset. Plus some wiggle room on either side.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I didn’t manually define the colour scale, then each image in the gif will use its own automatically generated scale and the colours will be inconsistent.&lt;/p&gt;
&lt;p&gt;Note the use of curly brackets to call an independent line of &lt;code&gt;R&lt;/code&gt; code within code (the loop within &lt;code&gt;saveGIF&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The benefit of &lt;code&gt;animation&lt;/code&gt; is that it works with any type of image in R and is basically a wrapper for ImageMagick, unlike &lt;code&gt;gganimate&lt;/code&gt;. You could also use ImageMagick in the command line.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;gradually-showing-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Gradually showing data&lt;/h1&gt;
&lt;p&gt;This is easily done using &lt;code&gt;ggplot2&lt;/code&gt; and &lt;code&gt;gganimate&lt;/code&gt;. ImageMagick isn’t needed (a different engine is used) but this method is limited to &lt;code&gt;ggplot&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;I have some &lt;a href=&#34;https://jacintakongresearch.wordpress.com/2020/10/17/measuring-the-mammalian-diving-reflex-with-apple-watch/&#34;&gt;heart rate data demonstrating the mammalian diving reflex&lt;/a&gt; that I will use as an example. I imported the data from my Apple Watch into R that you can read about at the link. Then, I made a gif for my lectures using &lt;code&gt;gganimate&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(gganimate) # loading just gganimate will also load ggplot2 for you
library(tidyverse)

hr_plot &amp;lt;- heart_rate %&amp;gt;%
          filter(time &amp;gt; &amp;quot;2020-10-17 11:00:34&amp;quot; &amp;amp; time &amp;lt; &amp;quot;2020-10-17 11:13:00&amp;quot;) %&amp;gt;% 
  ggplot(aes(time, value)) +
  # Dive 1
  annotate(&amp;quot;rect&amp;quot;, fill = &amp;quot;lightgrey&amp;quot;, alpha = 0.7, 
           xmin = as.POSIXct(&amp;quot;2020-10-17 11:05:00&amp;quot;), xmax = as.POSIXct(&amp;quot;2020-10-17 11:05:30&amp;quot;),
           ymin = -Inf, ymax = Inf) +
  # Dive 2
  annotate(&amp;quot;rect&amp;quot;, fill = &amp;quot;lightgrey&amp;quot;, alpha = 0.7, 
           xmin = as.POSIXct(&amp;quot;2020-10-17 11:07:12&amp;quot;), xmax = as.POSIXct(&amp;quot;2020-10-17 11:07:50&amp;quot;),
           ymin = -Inf, ymax = Inf) +
  geom_point(aes(group = seq_along(time))) +
  geom_line() +
  annotate(&amp;quot;text&amp;quot;, label = &amp;quot;Dives&amp;quot;, x = as.POSIXct(&amp;quot;2020-10-17 11:10&amp;quot;), y = 75) +
  annotate(&amp;quot;rect&amp;quot;, fill = &amp;quot;lightgrey&amp;quot;, alpha = 0.7, 
           xmin = as.POSIXct(&amp;quot;2020-10-17 11:10:40&amp;quot;), xmax = as.POSIXct(&amp;quot;2020-10-17 11:11:10&amp;quot;),
           ymin = 73, ymax = 77) +
  theme_classic() +
  labs(x = &amp;quot;Time&amp;quot;, y = expression(&amp;quot;Heart rate &amp;quot;(&amp;quot;Beats min&amp;quot;^-1))) +
  scale_x_datetime() + # time is already a POSIXct format
  ylim(c(50, 125)) +
  transition_reveal(time) +
  enter_fade()

animate(plot = hr_plot,
  nframes = 100,
  fps = 10,
  end_pause = 10,
  height = 600, width =600, res = 100)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ve split this into two parts. Lets break this down:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Make the heart rate graph (&lt;code&gt;hr_plot&lt;/code&gt;). My heart rate data is saved in a variable called &lt;code&gt;heart_rate&lt;/code&gt;.
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;I have trimmed the data (&lt;code&gt;dplyr::filter&lt;/code&gt;) then plotted heart rate over time (lines and points).&lt;/li&gt;
&lt;li&gt;I have annotated the graph with grey rectangles (&lt;code&gt;annotate(&#34;rect&#34;)&lt;/code&gt;) to indicate diving periods.&lt;/li&gt;
&lt;li&gt;I created a legend using &lt;code&gt;annotate&lt;/code&gt; for text and another little grey rectangle.&lt;/li&gt;
&lt;li&gt;Used &lt;code&gt;expression&lt;/code&gt; for scientific notation in my axis labels.&lt;/li&gt;
&lt;li&gt;Formatted the x axis as a date time axis (&lt;code&gt;scale_x_datetime&lt;/code&gt;). Not critical here.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transition_reveal&lt;/code&gt; and &lt;code&gt;enter_fade&lt;/code&gt; are &lt;code&gt;gganimate&lt;/code&gt; functions that describe how the data is revealed. Here I’m saying reveal along the x axis. This may take some time to render when you call the plot.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animate&lt;/code&gt; is the main function to create the animation.
&lt;ul&gt;
&lt;li&gt;I defined the number of frames, the speed (frames per second), how long to pause the gif at the last frame, and the dimensions.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;anim_save&lt;/code&gt; to save your gif.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
Here’s proof I am a mammal:
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;featured.gif&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;There are other types of transitions included in &lt;code&gt;gganimate&lt;/code&gt;. There is a handy &lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;cheatsheet&lt;/a&gt; too.&lt;/p&gt;
&lt;hr /&gt;
Happy animating!&lt;br /&gt;

&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/1CrejqXxVZs9q/giphy.gif&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An introduction to spatial data in R</title>
      <link>https://jacintak.github.io/post/spatial-data/</link>
      <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/spatial-data/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/spatial-data/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;NB: This was originally a tutorial given to Space Lunch members on 6th October 2021. This is an adapted version. The original version can be found on the &lt;a href=&#34;project/NERD-club/&#34;&gt;Project&lt;/a&gt; page.&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is going to be an introduction to a simple workflow for spatial data in R using rasters. I will assume you have some basic knowledge about spatial analyses and co-ordinate systems. This is not meant to be a documentation of the full suite of spatial analysis available in R. Some simple ways of plotting data is covered.&lt;/p&gt;
&lt;p&gt;Rasters are stored spatial data in a gridded format.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each grid cell contains a single value. E.g. temperature, elevation, species richness&lt;/li&gt;
&lt;li&gt;Often stored in three dimensions (e.g. latitude, longitude and time).&lt;/li&gt;
&lt;li&gt;The main &lt;code&gt;R&lt;/code&gt; package for handling rasters is &lt;code&gt;raster&lt;/code&gt;. It’s a base package.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will consider a common workflow of associating rasters with spatial point data (e.g. lat and long).
I will be sticking to base R throughout.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;introducing-rasters&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introducing rasters&lt;/h1&gt;
&lt;div id=&#34;loading-from-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading from file&lt;/h2&gt;
&lt;p&gt;Rasters can be acquired from a range of sources, such as government agencies. There are also R packages to interface directly with online databases but for another time. Often they are saved as an nc file (network Common Data Form) that is imported as a raster with layers and assigned a spatial projection. You’ll see below that other dependent packages are loaded with &lt;code&gt;raster&lt;/code&gt; but you won’t need to load each one manually.&lt;/p&gt;
&lt;p&gt;You can load a raster from a local nc file using the function &lt;code&gt;raster::brick&lt;/code&gt;. The &lt;code&gt;::&lt;/code&gt; denotes calling a function from a specific package without loading it with &lt;code&gt;library&lt;/code&gt;. Good for quick and dirty functions you won’t use frequently, bad if you are using the package multiple times.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_raster &amp;lt;- brick(&amp;quot;raster_data.nc&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will cheat and use the built in function in &lt;code&gt;raster&lt;/code&gt; to query WorldClim for mean annual temperature.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(raster)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: sp&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp &amp;lt;- getData(&amp;quot;worldclim&amp;quot;,var=&amp;quot;bio&amp;quot;,res=10)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting-rasters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Subsetting rasters&lt;/h2&gt;
&lt;p&gt;Subset rasters by layers using basic square bracket subsetting for lists.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp &amp;lt;- temp[[1]] # Subset only the first layer - mean annual temperature&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I have selected mean annual temperature since we do not need the other variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-rasters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot rasters&lt;/h2&gt;
&lt;p&gt;We can use the basic plot function to view the raster data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(temp)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-3&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-3-1.png&#34; alt=&#34;Average annual temperature&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Average annual temperature
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The default colour scale is horrendous so we will change it to the viridis scale. Here’s an example of using &lt;code&gt;::&lt;/code&gt;. I don’t need the entire &lt;code&gt;viridis&lt;/code&gt; package. This is to make a continuous colour palette of 20 colours. And add a title to the graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(temp, main = &amp;quot;Mean annual temperature&amp;quot;, col = viridis::viridis(n = 20))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-4&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-4-1.png&#34; alt=&#34;That&#39;s better&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: That’s better
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There’s one last issue to deal with before this data is ready. WorldClim stores temperature data multiplied by 10 for space saving so we need to divide by 10.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;manipulating-rasters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Manipulating rasters&lt;/h2&gt;
&lt;p&gt;Rasters can be manipulated by base functions. E.g. addition or subtraction between rasters or layers. There are many other functions for analysing rasters and doing spatial analysis (e.g. interpolation) but we won’t cover that here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp &amp;lt;- temp/10
plot(temp, main = &amp;quot;Mean annual temperature&amp;quot;, col = viridis::viridis(n = 20))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-5&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-5-1.png&#34; alt=&#34;That&#39;s much much better&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 3: That’s much much better
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;spatial-point-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Spatial point data&lt;/h1&gt;
&lt;p&gt;I usually encounter spatial data in the form of decimal latitude and longitudes representing species occurrences or sampling sites. You may already have these data from your own work but for demonstration purposes I will show how to query an online database to get species distribution points from GBIF. This requires an Internet connection and the R package &lt;code&gt;rgbif&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s query GBIF occurrence points for an widespread bird: The house sparrow (&lt;em&gt;Passer domesticus&lt;/em&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need the unique identification key for the species you want. &lt;code&gt;name_suggest&lt;/code&gt; can help with that so you don’t have to manually search GBIF.&lt;/li&gt;
&lt;li&gt;The data comes as a list with some metadata. &lt;code&gt;.$data&lt;/code&gt; is the actual occurrence records. The dot &lt;code&gt;.&lt;/code&gt; is a placeholder meaning it represents an R variable (e.g. a dataframe). This is commonly used in &lt;code&gt;tidyverse&lt;/code&gt; and piping via &lt;code&gt;magrittr&lt;/code&gt;. It is also a cheat’s way of using base functions within a pipe.&lt;/li&gt;
&lt;li&gt;Co-ordinates are stored as &lt;code&gt;decimalLatitude&lt;/code&gt; and &lt;code&gt;decimalLongitude&lt;/code&gt;. I’ve removed any missing values.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rgbif)
# get ID key for bird
bird_key &amp;lt;- name_suggest(q =&amp;quot;Passer domesticus&amp;quot;, rank=&amp;#39;species&amp;#39;)$data$key[1]
# get occurence points
bird_points &amp;lt;- occ_search(taxonKey = bird_key) # Get all records, max 500 (see variable limit)
# exclude metadata
bird_points &amp;lt;- bird_points$data
# remove NA latitude or longitude
bird_points &amp;lt;- bird_points[!is.na(bird_points$decimalLatitude),]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since I’ve only searched for one species, the workflow is simple. If I wanted multiple species I would have to use lists and a function like &lt;code&gt;sapply&lt;/code&gt;. See help file for &lt;code&gt;occ_search&lt;/code&gt; for an example. Avoid for loops.&lt;/p&gt;
&lt;div id=&#34;plot-spatial-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot spatial data&lt;/h2&gt;
&lt;p&gt;Let’s look at the global distribution of points. I will use the base &lt;code&gt;maps&lt;/code&gt; package for a simple, low resolution and unprojected world map in R (not recommended for more professional output). The &lt;code&gt;maps&lt;/code&gt; package can also be used in &lt;code&gt;ggplot2&lt;/code&gt; via &lt;code&gt;borders(database = &#34;world&#34;, fill = NA)&lt;/code&gt; or &lt;code&gt;geom_polygon(data = map_data(&#34;world&#34;), aes(x=long, y = lat, group = group), fill = NA, col= 1)&lt;/code&gt;; &lt;code&gt;coord_map()&lt;/code&gt; may help in these cases.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(maps)
map(&amp;quot;world&amp;quot;) # get basic world map
title(main = &amp;quot;The distribution of house sparrow&amp;quot;) # plot title
points(decimalLatitude ~ decimalLongitude, bird_points, pch = 16, col = 2) # plot points
legend(x = -150, y= -50, legend = &amp;quot;occurence&amp;quot;, pch = 16, col = 2, bty = &amp;quot;n&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see that points come mainly from around northern Europe.&lt;/p&gt;
&lt;p&gt;For more advanced mapping in R check out &lt;code&gt;ggmaps&lt;/code&gt;, which can interface with Open Street Maps (free) and Google Maps (for a fee), and &lt;code&gt;osmdata&lt;/code&gt;, which interfaces directly with OSM and allows you to customise which features to include - check out the related tutorial about mapping cities in R in the Space Club folder or &lt;a href=&#34;https://jacintak.github.io/post/2021-07-01-OSM-in-R/&#34;&gt;online&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;putting-it-all-together&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Putting it all together&lt;/h1&gt;
&lt;p&gt;Now we have all the data we need, let’s combine the datasets and plot the occurrence data with the temp raster.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(temp, main = &amp;quot;Mean annual temperature&amp;quot;, col = viridis::viridis(n = 20)) # temp
points(decimalLatitude ~ decimalLongitude, bird_points, pch = 16, col = 1) # bird&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-8&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-8-1.png&#34; alt=&#34;The distribution of sparrows with mean annual temperature&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 4: The distribution of sparrows with mean annual temperature
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Let’s do some simple extraction of data.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;what-range-of-temperatures-do-house-sparrows-live-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What range of temperatures do house sparrows live in?&lt;/h2&gt;
&lt;p&gt;We can use our new species distribution points to query the raster and extract values corresponding with the occurrence points. The function to query a raster is &lt;code&gt;raster::extract&lt;/code&gt;. The same can be used within &lt;code&gt;tidyverse&lt;/code&gt; via &lt;code&gt;mutate&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get temp
temps &amp;lt;- extract(temp, SpatialPoints(cbind(bird_points$decimalLongitude, bird_points$decimalLatitude)), method = &amp;quot;bilinear&amp;quot;)
# Add new column
bird_temps &amp;lt;- cbind(bird_points, temps) 
# Remove missing temps
bird_temps &amp;lt;- bird_temps[!is.na(bird_temps$temps),]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;method = &#34;bilinear&#34;&lt;/code&gt; tells the function to interpolate the average of the nearest 4 cells around the spatial point. This is like a mini version of &lt;code&gt;buffer&lt;/code&gt; which will interpolate values within a buffer around a point. If spatial accuracy is not paramount (like here where we have a global scale raster), then this method might reduce the chance of extracting a &lt;code&gt;NA&lt;/code&gt; value. The default is to query the exact coordinate.&lt;/p&gt;
&lt;p&gt;Our final dataset contains 500 observations.&lt;/p&gt;
&lt;p&gt;Missing data at this stage could be from a mismatch between the accuracy of the spatial points and the resolution of the raster. Or plain errors in the spatial coordinates.&lt;/p&gt;
&lt;p&gt;Now we can plot the distribution of temperatures:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(bird_temps$temps, main = &amp;quot;Temperature distribution of house sparrows&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see they live between -2.7 and 11.6 °C.&lt;/p&gt;
&lt;p&gt;Finally, we can plot the relationship between temperature and latitude:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(temps ~ decimalLatitude, bird_temps, pch = 16)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;End&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Beyond the valley of intermediate competence</title>
      <link>https://jacintak.github.io/post/purrr/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/purrr/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/purrr/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Earlier this year I &lt;a href=&#34;https://jacintak.github.io/post/using-mapply/&#34;&gt;wrote&lt;/a&gt; about learning to forego for loops for &lt;code&gt;apply&lt;/code&gt; functions in &lt;code&gt;R&lt;/code&gt;. I’m continuing this journey to replace for loops with &lt;code&gt;purrr&lt;/code&gt;. I’ll be honest and say that my main motivation for learning &lt;code&gt;purrr&lt;/code&gt; is the package name 🐱. &lt;code&gt;purrr&lt;/code&gt; is a package that does the same things as &lt;code&gt;mapply&lt;/code&gt; and &lt;code&gt;lapply&lt;/code&gt;; to apply a function over listed data and also has useful functions for manipulating lists and functional programming.&lt;/p&gt;
&lt;p&gt;Objectively, the functionality of &lt;code&gt;purrr&lt;/code&gt; is not that different to base functions. There’s an understandable learning curve and resulting benefit when going from for loops to &lt;code&gt;apply&lt;/code&gt; functions, but there’s diminishing return on going from &lt;code&gt;apply&lt;/code&gt; to &lt;code&gt;purrr&lt;/code&gt; unless you fully leverage the shortcuts of &lt;code&gt;tidyverse&lt;/code&gt; syntax (which I have not). The main advantage of &lt;code&gt;purrr&lt;/code&gt; is that it uses the &lt;code&gt;tidyverse&lt;/code&gt; syntax and pipes. Overall, I don’t think there’s a &lt;em&gt;huge&lt;/em&gt; benefit for using &lt;code&gt;purrr&lt;/code&gt; over base, unlike for example the advantages of using &lt;code&gt;ggplot2&lt;/code&gt; over base for graphing, but if your code is already written in &lt;code&gt;tidyverse&lt;/code&gt; then it makes sense to stick to it and have clear and consistent code (if you are used to reading &lt;code&gt;tidyverse&lt;/code&gt; syntax).&lt;/p&gt;
&lt;p&gt;If you really want to stay on the &lt;code&gt;tidyverse&lt;/code&gt; train you can skip learning &lt;code&gt;apply&lt;/code&gt; and jump straight to &lt;code&gt;purrr&lt;/code&gt; but I’m a fan of using as fewer dependencies as possible and knowing the base &lt;code&gt;R&lt;/code&gt; way. There are lots of detailed tutorials about &lt;code&gt;purrr&lt;/code&gt; and it’s functions, like &lt;a href=&#34;https://jennybc.github.io/purrr-tutorial/bk01_base-functions.html&#34;&gt;this one that discusses the differences with base functions&lt;/a&gt; so I recommend checking those out. If you’re already familiar with the &lt;code&gt;tidyverse&lt;/code&gt; syntax then &lt;code&gt;purrr&lt;/code&gt; is no different.&lt;/p&gt;
&lt;p&gt;Here are some things I’ve learnt about &lt;code&gt;purrr&lt;/code&gt; for applying functions to listed data.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;lapply&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;lapply&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;lapply&lt;/code&gt; takes one argument (data) and applies a function to it. As I found earlier, it’s quite a simple case and doesn’t suit more complex datasets I usually work with. The &lt;code&gt;purrr&lt;/code&gt; equivalent is &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One of the advantages of &lt;code&gt;purrr&lt;/code&gt; is that it you can specify the format of the output. That is, &lt;code&gt;lapply&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; takes a list and produces a list, but &lt;code&gt;map_*&lt;/code&gt; where &lt;code&gt;*&lt;/code&gt; are a range of output types will give that output type. For example, &lt;code&gt;map_chr&lt;/code&gt; will take a list and produce a character vector. This is handy because it skips an intermediate step to transform your resulting list into your desired output format, such as using &lt;code&gt;do.call&lt;/code&gt; to turn a list into a data frame.&lt;/p&gt;
&lt;div id=&#34;an-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An example&lt;/h2&gt;
&lt;p&gt;Let’s use the same code as the previous post:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# some data to use as a list
loop_data &amp;lt;- data.frame(col1 = c(11:15), col2 = c(20:24))

# define variable to change
a &amp;lt;- seq(0.2, 1, 0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, &lt;code&gt;loop_data&lt;/code&gt; is a data frame with two numeric columns (&lt;code&gt;col1&lt;/code&gt; &amp;amp; &lt;code&gt;col2&lt;/code&gt;). We technically won’t use &lt;code&gt;loop_data$col2&lt;/code&gt; but it’s there to create a 5x2 data frame. &lt;code&gt;a&lt;/code&gt; is a variable that we need for our function with 5 values.&lt;/p&gt;
&lt;p&gt;We want to add each element of &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;loop_data$col1&lt;/code&gt; and save that in a new column &lt;code&gt;loop_data$col1a&lt;/code&gt;. We will also add &lt;code&gt;a&lt;/code&gt; as a column in &lt;code&gt;loop_data&lt;/code&gt; just so we can keep track of which value was used to calculate &lt;code&gt;col1a&lt;/code&gt;. So the final output should have 25 rows (5 observations in &lt;code&gt;loop_data&lt;/code&gt; x 5 values of &lt;code&gt;a&lt;/code&gt;) and 4 columns (&lt;code&gt;col1&lt;/code&gt;, &lt;code&gt;col2&lt;/code&gt;, &lt;code&gt;col1a&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Now let’s use &lt;code&gt;map&lt;/code&gt; to do the same thing we did with &lt;code&gt;lapply&lt;/code&gt; but using &lt;code&gt;tidyverse&lt;/code&gt; and pipes 🛁&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;loop_data %&amp;gt;% 
  expand_grid(., a) %&amp;gt;% # expand to include all crossed combinations
  group_split(a) %&amp;gt;% # split into lists by the value of a for nested lists
  map_dfr(., function(x){
    x$col1a &amp;lt;- x$col1 + x$a
    return(x)
    }) %&amp;gt;% # apply the function to the list and return a data frame
  summary(.) # show the summary&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       col1         col2          a           col1a     
##  Min.   :11   Min.   :20   Min.   :0.2   Min.   :11.2  
##  1st Qu.:12   1st Qu.:21   1st Qu.:0.4   1st Qu.:12.4  
##  Median :13   Median :22   Median :0.6   Median :13.6  
##  Mean   :13   Mean   :22   Mean   :0.6   Mean   :13.6  
##  3rd Qu.:14   3rd Qu.:23   3rd Qu.:0.8   3rd Qu.:14.8  
##  Max.   :15   Max.   :24   Max.   :1.0   Max.   :16.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’re not familiar with piping this is what’s happening:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The first line is specifying our list &lt;code&gt;loop_data&lt;/code&gt; to be sent down the pipe (&lt;code&gt;%&amp;gt;%&lt;/code&gt;). Pipes are read sequentially and the output of one line is used as the input of the next line. This intermediate object is indicated by the dot (&lt;code&gt;.&lt;/code&gt;). Sometimes the dot can be left out if the arguments are presented to the function in the expected order but I find it useful to type everything out when learning anyway so that it’s clear what the arguments are. The dot is particularly needed when using base functions within a pipe, as seen in the last line with &lt;code&gt;summary(.)&lt;/code&gt; because these functions are expecting an argument that &lt;code&gt;tidyverse&lt;/code&gt; functions know how to deal with.&lt;/li&gt;
&lt;li&gt;I use &lt;code&gt;tidyr::expand_grid&lt;/code&gt; to create a data frame of all combinations of &lt;code&gt;col1&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;. This has a benefit of adding &lt;code&gt;a&lt;/code&gt; as a column.&lt;/li&gt;
&lt;li&gt;Then I use &lt;code&gt;group_split&lt;/code&gt; to group the crossed data frame based on values of &lt;code&gt;a&lt;/code&gt;. This produces a tibble which are essentially &lt;code&gt;tidyverse&lt;/code&gt; lists. &lt;code&gt;split&lt;/code&gt; is a base equivalent.&lt;/li&gt;
&lt;li&gt;Then I apply the actual function over the list and specify that I want the output to be a single data frame (the &lt;code&gt;_dfr&lt;/code&gt; suffix). This is the equivalent of doing &lt;code&gt;lapply&lt;/code&gt; and &lt;code&gt;do.call&lt;/code&gt; in the same function.&lt;/li&gt;
&lt;li&gt;Finally I use the base &lt;code&gt;R&lt;/code&gt; function &lt;code&gt;summary&lt;/code&gt; to show the summary statistics of the result to check it works. There isn’t a &lt;code&gt;tidyverse&lt;/code&gt; equivalent of &lt;code&gt;summary&lt;/code&gt; so we must use the dot within the function.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The end result is exactly the same as the original &lt;code&gt;lapply&lt;/code&gt; code. Here is the &lt;code&gt;lapply&lt;/code&gt; function from the previous post to compare:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Prepare the answer list
lapply_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)

# add a column using mapply
lapply_ans &amp;lt;- mapply(FUN = cbind, lapply_ans, &amp;quot;a&amp;quot; = a, SIMPLIFY = FALSE)

# apply function
lapply_ans &amp;lt;- lapply(lapply_ans, FUN = lapply_function)

# merge to single data frame
lapply_ans &amp;lt;- do.call(rbind, lapply_ans)

# view the data
summary(lapply_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Side note:
&lt;code&gt;rerun(length(a), loop_data)&lt;/code&gt; behaves exactly the same as &lt;code&gt;replicate(length(a), loop_data, simplify = FALSE)&lt;/code&gt; and is the &lt;code&gt;tidyverse&lt;/code&gt; equivalent (unclear for how long according to the dev notes). Then you’ll need to add &lt;code&gt;a&lt;/code&gt; as a column, matching the order of the tibble and set the column names, e.g. &lt;code&gt;rerun(length(a), loop_data) %&amp;gt;% map2(a, bind_cols) %&amp;gt;% map(a=...3, rename)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I’ve taken a slightly different approach. I define all possible combinations I want to use in the calculations then creating grouped lists.&lt;/li&gt;
&lt;li&gt;I specified the function within the pipe rather than named in the global environment like in the original post. It’s better to name the function if you’re using it multiple times but in this post I’m only using it once, so I’ll get away with it.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt; also allows formulas which for simple functions (like adding a constant to all values) will simplify the code and let
you use anonymous functions. I’m not used to the formula method of writing functions.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Instead of 5 separate lines of code with the base version, in &lt;code&gt;tidyverse&lt;/code&gt; we can do it in a pipe with 4 steps. But you notice that it’s not a huge difference between what the two approaches are doing. Still better than a for loop.
&lt;ul&gt;
&lt;li&gt;We skipped &lt;code&gt;do.call&lt;/code&gt; by using &lt;code&gt;map_dfr&lt;/code&gt; directly to return a data frame. I could also use &lt;code&gt;map&lt;/code&gt; and transform the list into a
data frame separately.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;and-another-thing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;And another thing…&lt;/h2&gt;
&lt;p&gt;We need to prepare the input data so that it is crossed; which mean replicating our list across all combinations of &lt;code&gt;col1&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;. &lt;code&gt;expand_grid&lt;/code&gt; or similar as used above could be helpful for this, and the data frame could be split into nested lists for applying the function.&lt;/p&gt;
&lt;p&gt;To contrast, this will only add matching rows of &lt;code&gt;col1&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; together rather than all combinations:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(loop_data$col1, a) %&amp;gt;%
  pmap_dfr(function(x, a) {
  df &amp;lt;- data.frame(col1 = x,
                   a = a,
                   col1a = x + a) # add answer to a new column
  return(df)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   col1   a col1a
## 1   11 0.2  11.2
## 2   12 0.4  12.4
## 3   13 0.6  13.6
## 4   14 0.8  14.8
## 5   15 1.0  16.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;map&lt;/code&gt; is the equivalent of &lt;code&gt;lapply&lt;/code&gt;, then it also doesn’t take multiple inputs, which is why we added &lt;code&gt;a&lt;/code&gt; as a column to &lt;code&gt;loop_data&lt;/code&gt;. So we turn to &lt;code&gt;mapply&lt;/code&gt; and its &lt;code&gt;purrr&lt;/code&gt; equivalent.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;mapply&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;mapply&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;purrr&lt;/code&gt; equivalent of &lt;code&gt;mapply&lt;/code&gt; is &lt;code&gt;pmap&lt;/code&gt;. Specifically, &lt;code&gt;pmap&lt;/code&gt; allows for any number of arguments for the function. There is another function, &lt;code&gt;map2&lt;/code&gt; that accepts exactly two arguments but &lt;code&gt;pmap&lt;/code&gt; is generalised to allow for more than two. As with &lt;code&gt;map&lt;/code&gt;, there are variants with suffixes that specify what output format you want, such as a data frame (&lt;code&gt;pmap_dfr&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;tidyverse&lt;/code&gt; website goes into the syntax differences between &lt;code&gt;mapply&lt;/code&gt; and &lt;code&gt;pmap&lt;/code&gt; in more &lt;a href=&#34;https://design.tidyverse.org/cs-mapply-pmap.html&#34;&gt;detail&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s jump to the example using the same &lt;code&gt;loop_function&lt;/code&gt; as the original post.&lt;/p&gt;
&lt;div id=&#34;pmap&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;pmap&lt;/code&gt;&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A function to add a value a to a data frame x
loop_function &amp;lt;- function(x, a) {
  x$col1a &amp;lt;- x$col1 + a # add answer to a new column
  x$a &amp;lt;-  a
  return(x)
}

loop_data %&amp;gt;% 
  rerun(length(a), .) %&amp;gt;% # replicate the list to populate
  list(a) %&amp;gt;% # define all variables for loop_function within a list
  pmap_dfr(loop_function) %&amp;gt;% # apply the function to the list and return a data frame
  map_dfc(summary) # show the summary&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   col1    col2    col1a   a      
##   &amp;lt;table&amp;gt; &amp;lt;table&amp;gt; &amp;lt;table&amp;gt; &amp;lt;table&amp;gt;
## 1 11      20      11.2    0.2    
## 2 12      21      12.4    0.4    
## 3 13      22      13.6    0.6    
## 4 13      22      13.6    0.6    
## 5 14      23      14.8    0.8    
## 6 15      24      16.0    1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we don’t have to add &lt;code&gt;a&lt;/code&gt; as a column to &lt;code&gt;loop_data&lt;/code&gt;, we can specify &lt;code&gt;a&lt;/code&gt; for the function. &lt;code&gt;pmap&lt;/code&gt; takes a list of arguments for the function, hence we need a list containing both &lt;code&gt;loop_data&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;. Don’t make &lt;code&gt;a&lt;/code&gt; list before adding it to the list of function arguments (i.e. double list) because it won’t match the nth &lt;code&gt;a&lt;/code&gt; variable with the nth element in the loop_data list, and match by rows within lists. For variety, I’ve used &lt;code&gt;map_dfc&lt;/code&gt; to call the function &lt;code&gt;summary&lt;/code&gt; on the data, rather than &lt;code&gt;summary(.)&lt;/code&gt;. &lt;code&gt;map_dfc&lt;/code&gt; will apply the function by columns instead of rows and produce a data frame.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;map2&lt;/code&gt; equivalent is more concise than &lt;code&gt;pmap&lt;/code&gt; for this simple example!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;loop_data %&amp;gt;% 
  rerun(length(a), .) %&amp;gt;% 
  map2_dfr(a, loop_function)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the original &lt;code&gt;mapply&lt;/code&gt; example to compare:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Prepare the answer list
mapply_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)
# mapply function
mapply_ans &amp;lt;- mapply(mapply_ans, FUN = loop_function, a = a, SIMPLIFY = FALSE)
# merge to single data frame
mapply_ans &amp;lt;- do.call(rbind, mapply_ans)
# view the data
summary(mapply_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could also define &lt;code&gt;loop_function&lt;/code&gt; as an anonymous function within &lt;code&gt;pmap&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure the variables are used in the correct order. e.g. &lt;code&gt;loop_data %&amp;gt;% rerun(length(a), .) %&amp;gt;% map_dfr(loop_function, a)&lt;/code&gt; will run because you are passing &lt;code&gt;a&lt;/code&gt; as a variable into &lt;code&gt;loop_function&lt;/code&gt;, but it’s adding &lt;code&gt;a&lt;/code&gt; by row within individual data frame rather than matching the nth element of the list. So it’s effectively replicating the data frame 5 times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;That’s it. There are many ways of doing the same thing with simple examples. Hope it helps you create &lt;code&gt;purrr&lt;/code&gt;fectly sensible code to replace for loops and apply functions to lists.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to add a Phylopic icon to your graph in R</title>
      <link>https://jacintak.github.io/post/2021-08-01-rphylopic/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-08-01-rphylopic/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-08-01-rphylopic/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;phylopic.org&#34;&gt;Phylopic&lt;/a&gt; is an online database of silhouettes of species. Most are freely available, with various copyright licences. It’s a great resource for scientific illustration or making cool presentations.&lt;/p&gt;
&lt;p&gt;One way I wanted to use Phylopic was to add a silhouette of an animal directly to an &lt;code&gt;R&lt;/code&gt; figure. You could search Phylopic yourself and copy the image id to add the icon to the graph but where’s the fun in that?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/rphylopic/readme/README.html&#34;&gt;rphylopic&lt;/a&gt; is an &lt;code&gt;R&lt;/code&gt; package that can search and retrieve icons directly from Phylopic. You can use &lt;code&gt;rphylopic&lt;/code&gt; with &lt;code&gt;ggplot2&lt;/code&gt; or base graphics.&lt;/p&gt;
&lt;p&gt;The process of searching Phylopic and pulling out the image id is not straightforward, and I didn’t find a step-by-step guide I liked for doing so, so here is a reproducible example using the built in dataset &lt;code&gt;beaver1&lt;/code&gt; - a time series of a beaver’s body temperature.&lt;/p&gt;
&lt;p&gt;The data looks like this and we want to add a beaver icon to the top left corner:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beaver_plot &amp;lt;- qplot(beaver1$temp,x = seq_along(beaver1$temp), geom = &amp;quot;line&amp;quot;, xlab = &amp;quot;Time&amp;quot;, ylab = &amp;quot;Temperature&amp;quot;)
beaver_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/2021-08-01-rphylopic/index_files/figure-html/beaver-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;step-by-step-guide-to-adding-a-phylopic-icon&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Step-by-step guide to adding a Phylopic icon&lt;/h1&gt;
&lt;div id=&#34;getting-the-right-species&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Getting the right species&lt;/h2&gt;
&lt;p&gt;You can search Phylopic by species using &lt;code&gt;name_search&lt;/code&gt;. You might get multiple hits because there may be multiple matches in the databases. It’s worth cross-referencing the NameBank ID with the website. The NameBank ID is located at the top right of the webpage. In this case we want the first option - 109179.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(rphylopic)
beaver &amp;lt;- name_search(text = &amp;quot;Castor canadensis&amp;quot;, options = &amp;quot;namebankID&amp;quot;)[[1]] # find names
beaver&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extracting-the-id-of-the-icon-you-want&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. Extracting the id of the icon you want&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;name_images&lt;/code&gt; to list all the beaver icons available. In this case, there are two versions of the beaver icon we can use - listed as &lt;code&gt;$same[[1]]&lt;/code&gt; and &lt;code&gt;$same[[2]]&lt;/code&gt; with unique &lt;code&gt;uid&lt;/code&gt;. The &lt;code&gt;uid&lt;/code&gt; is the unique id of the icon. Again, it’s handy to check the &lt;code&gt;uid&lt;/code&gt; with the website. You can find the &lt;code&gt;uid&lt;/code&gt; on the website by clicking the actual icon you want to use and copying from the address bar.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_id_all &amp;lt;- name_images(uuid = beaver$uid[1])  # list images
beaver_id_all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s use the second icon and extract only that &lt;code&gt;uid&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_id &amp;lt;- name_images(uuid = beaver$uid[1])$same[[2]]$uid  # get individual image id
beaver_id&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-the-icon-itself&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Getting the icon itself&lt;/h2&gt;
&lt;p&gt;Now we can get the actual image using &lt;code&gt;image_data&lt;/code&gt;. Each icon is available in different sizes, from a thumbnail (64 px) to large icons (1042 px). We will get a 256 px icon so that the resolution is high enough to avoid pixelation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_pic &amp;lt;- image_data(beaver_id, size = 256)[[1]] # get actual icon, define size. Don&amp;#39;t run this alone&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-the-beaver-icon-to-the-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;4. Adding the beaver icon to the plot&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;add_phylopic&lt;/code&gt; to add the icon to a &lt;code&gt;ggplot2&lt;/code&gt; graph. You need to specify the x and y axis co-ordinates for the graph. Use &lt;code&gt;ysize&lt;/code&gt; to change the size of the icon. Use &lt;code&gt;alpha&lt;/code&gt; to control the transparency. &lt;code&gt;colour&lt;/code&gt; will change the colour.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_plot + add_phylopic(beaver_pic, alpha = 1, x = 10, y = 37.4, ysize = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;featured.png&#34; style=&#34;width:70.0%&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;The final plot&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And that’s it! 🦫&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-uses-of-rphylopic&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other uses of &lt;code&gt;rphylopic&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;You can add the icon as a background image but I would question why that would be a good idea from a graphic design perspective. To do so, you don’t need to specify any other variables in &lt;code&gt;add_phylopic&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can also use icons as data points by plotting each icon in place of the regular point within a for loop. You can see an example in the &lt;code&gt;rphylopic&lt;/code&gt; documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>OSM in R</title>
      <link>https://jacintak.github.io/post/2021-07-01-OSM-in-R/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-07-01-OSM-in-R/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-07-01-OSM-in-R/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This tutorial was originally presented to NERD club on 4/2/2020.&lt;/p&gt;
&lt;div id=&#34;city-maps&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;City maps&lt;/h1&gt;
&lt;p&gt;Consider yourself a hipster?&lt;br /&gt;
Do the clean lines and natural materials of modern scandi make you feel at home?&lt;br /&gt;
Is your basic coffee order a flat white? ☕&lt;/p&gt;
&lt;p&gt;If the answer to all the above is YES, then here’s a present for you!&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/61-dKVczbXL._SL1000_.jpg&#34; title=&#34;fig:&#34; width=&#34;250&#34; alt=&#34;A map of Dublin&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;em&gt;But wait!&lt;/em&gt; This poster costs €30 (thereabouts) online!
&lt;a href=&#34;https://www.etsy.com/ie/listing/561937898/dublin-print-dublin-city-map-dublin&#34;&gt;See example&lt;/a&gt;.&lt;br /&gt;
That’s approximately 9 flat whites you could have had.&lt;br /&gt;
☕☕☕☕☕☕☕☕☕&lt;br /&gt;
Can you make this in R?, you ask, asking for a friend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fear not&lt;/strong&gt;. You can make this yourself in R!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;maps-in-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Maps in R&lt;/h1&gt;
&lt;p&gt;In this tutorial we will replicate a poster like this. We will need R and powerpoint to put in the final touches. You could do it fully in R but powerpoint will make our lives a bit easier. In summary, it requires a bit of GIS wrangling to code in what you want to display.&lt;/p&gt;
&lt;p&gt;The data is freely available from &lt;a href=&#34;https://www.openstreetmap.org&#34;&gt;Openstreetmap&lt;/a&gt;, for proprietary haters out there. I will refer to it as OSM.&lt;/p&gt;
&lt;p&gt;We will be following &lt;a href=&#34;https://ggplot2tutor.com/streetmaps/streetmaps/&#34;&gt;this&lt;/a&gt; tutorial.&lt;/p&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;You will need to install the relevant packages: &lt;code&gt;osmdata&lt;/code&gt;, &lt;code&gt;tidyverse&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#install.packages(&amp;quot;osmdata&amp;quot;, &amp;quot;tidyverse&amp;quot;, &amp;quot;sf&amp;quot;)
library(osmdata)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see this will use tidyverse and I will be using piping. Don’t worry if you are not a master at piping. The code is written.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a nutshell, instead of function2(function1(X)) to apply function 1 &lt;em&gt;then&lt;/em&gt; function 2 to X, you type x %&amp;gt;% function1() %&amp;gt;% function2(). I.E. take X, apply function 1, then apply function 2 to the resulting output. Overall it’s easier to read, hence it’s ‘tidy’.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;osm-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;OSM data&lt;/h2&gt;
&lt;p&gt;OSM stores various features you can explore under &lt;code&gt;available_features()&lt;/code&gt;. You can see what is under each feature with &lt;code&gt;available_tags(&#34;&amp;lt;insert feature name here&amp;gt;&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;get-city-co-ordinates&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. Get city co-ordinates&lt;/h1&gt;
&lt;p&gt;For this example we will make a map of Dublin. First we need the latitude and longitude of Dublin. If you want to modify the extent of your map, this is where you change the co-ordinates.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;city_coords &amp;lt;- getbb(&amp;quot;Dublin Ireland&amp;quot;)
#city_coords &amp;lt;- c(-6.391,53.2644,-6.114883, 53.416) # to get all the M50&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-map-features&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. Get map features&lt;/h1&gt;
&lt;div id=&#34;roads&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Roads&lt;/h2&gt;
&lt;p&gt;We can get roads by querying OSM for the GPS co-ordinates for Dublin and saving it to a variable called &lt;em&gt;roads&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;roads &amp;lt;- city_coords %&amp;gt;% #pipe!
  opq() %&amp;gt;% # create query for OSM database
  add_osm_feature(key = &amp;quot;highway&amp;quot;, 
                  value = c(&amp;quot;motorway&amp;quot;, &amp;quot;primary&amp;quot;, 
                            &amp;quot;secondary&amp;quot;, &amp;quot;tertiary&amp;quot;)) %&amp;gt;%
  osmdata_sf() # save it as an simple features format
roads&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;streets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Streets&lt;/h2&gt;
&lt;p&gt;We can do the same for streets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;streets &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;highway&amp;quot;, 
                  value = c(&amp;quot;residential&amp;quot;, &amp;quot;living_street&amp;quot;,
                            &amp;quot;unclassified&amp;quot;,
                            &amp;quot;service&amp;quot;, &amp;quot;footway&amp;quot;)) %&amp;gt;%
  osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;water&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Water&lt;/h2&gt;
&lt;p&gt;Can’t forget the Liffey and the canals. Sadly the ocean cannot be mapped.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;water &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;waterway&amp;quot;, value = c(&amp;quot;canal&amp;quot;, &amp;quot;river&amp;quot;)) %&amp;gt;%
  osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;3. Plotting&lt;/h1&gt;
&lt;p&gt;Time to call &lt;code&gt;ggplot2&lt;/code&gt; and plot our map.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map &amp;lt;- ggplot() +
  # roads
  geom_sf(data = roads$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;grey&amp;quot;, # colour of feature
          size = 0.8,       # Size on map
          alpha = 0.8) +    # transparency
  # streets
  geom_sf(data = streets$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;#ffbe7f&amp;quot;,
          size = 0.2,
          alpha = 0.6) +
  # water
  geom_sf(data = water$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;steelblue&amp;quot;,
          size = 0.8,
          alpha = 0.5) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE) +
  # remove axes
  theme_void()

map&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;labels&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;4. Labels&lt;/h1&gt;
&lt;p&gt;At this point it is easier to save the file and add text in powerpoint but if you want to try your hand at ggplot’s annotation features go ahead.&lt;/p&gt;
&lt;p&gt;Here I’ve done one in a dark colour scheme.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme_colour &amp;lt;- &amp;quot;#282828&amp;quot; # dark theme

dark_map &amp;lt;- map +
  labs(caption = &amp;quot;Dublin, Ireland&amp;quot;) +
  theme(axis.text = element_blank(),
        plot.margin=unit(c(1,1,1,1),&amp;quot;cm&amp;quot;),
        panel.grid.major = element_line(colour = theme_colour),
        panel.grid.minor = element_line(colour = theme_colour),
        plot.background = element_rect(fill = theme_colour),
        panel.background = element_rect(fill = theme_colour),
        plot.caption = element_text(size = 24, colour = &amp;quot;white&amp;quot;, hjust = 0.5, vjust = -2, family = &amp;quot;mono&amp;quot;),
        panel.border = element_rect(colour = &amp;quot;white&amp;quot;, fill=NA, size=2),
        axis.ticks = element_blank())

dark_map&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;saving-our-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Saving our map&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ggsave(plot = dark_map, filename = &amp;quot;NERD/dark_dublin.pdf&amp;quot;, width = 11, height = 8.5, device = &amp;quot;pdf&amp;quot;, dpi = 300)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;If all of that was too much, there’s an R package for it. &lt;a href=&#34;https://github.com/lina2497/Giftmap&#34; class=&#34;uri&#34;&gt;https://github.com/lina2497/Giftmap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is also a &lt;a href=&#34;https://anvaka.github.io/city-roads/&#34;&gt;website&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;extra-details&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Extra details&lt;/h1&gt;
&lt;p&gt;Less is more but if you really want to put more features:&lt;/p&gt;
&lt;div id=&#34;other-water-bodies&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other water bodies&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;extra_water &amp;lt;- city_coords %&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;natural&amp;quot;, value = c(&amp;quot;water&amp;quot;)) %&amp;gt;%
  osmdata_sf()

dark_map +
   geom_sf(data = extra_water$osm_polygons,
          inherit.aes = FALSE,
          fill = &amp;quot;steelblue&amp;quot;,
          colour = NA,
          alpha = 0.5) +
  geom_sf(data = extra_water$osm_multipolygons,
          inherit.aes = FALSE,
          fill = &amp;quot;steelblue&amp;quot;,
          colour = NA,
          alpha = 0.5) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;parks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Parks&lt;/h2&gt;
&lt;p&gt;Nature reserves including Dublin Bay&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;park &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;leisure&amp;quot;, value = c(&amp;quot;park&amp;quot;)) %&amp;gt;%
  osmdata_sf()

dark_map +
   geom_sf(data = park$osm_polygons,
          inherit.aes = FALSE,
          fill = &amp;quot;darkgreen&amp;quot;,
          colour = NA,
          alpha = 0.3) +
  geom_sf(data = park$osm_multipolygons,
          inherit.aes = FALSE,
          fill = &amp;quot;darkgreen&amp;quot;,
          colour = NA,
          alpha = 0.3) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;end&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;End&lt;/h1&gt;
&lt;p&gt;That’s the gist of using OSM in &lt;code&gt;R&lt;/code&gt;. You can use the same code to make any map, e.g. for a paper.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R Club: Functions &amp; Loops</title>
      <link>https://jacintak.github.io/post/2021-06-01-r-function-loops/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-06-01-r-function-loops/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This tutorial was originally presented to NERD club on 18/11/2020.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This document contains two examples of functions and an example of how functions can be integrated with loops.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;User defined functions take the general form of &lt;code&gt;function(inputs){processing inputs; return(output)}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;predator-prey-interactions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Predator-Prey interactions&lt;/h1&gt;
&lt;p&gt;We will use a simulation of predator-prey interactions as an example. Predator-prey interactions simulate how many prey a predator can capture after a specific amount of time and for a given density of prey. We use this example with undergraduate biology students to demonstrate statistical modelling, experimental design and collecting data.&lt;/p&gt;
&lt;p&gt;Normally we would get students to do this laboratory practical in class by picking up counters and putting them in jars while blindfolded. We can also see whether the use of different types of jars affects the efficiency of the predator. This is the experimental design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Response variable - Number of prey caught (&lt;code&gt;Ha&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Total foraging time - 1 minute, a constant (&lt;code&gt;T&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Predictor variables:
&lt;ul&gt;
&lt;li&gt;Prey density - user defined treatments (&lt;code&gt;H&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Type of jar used - jar with a lid or no lid (&lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normally the students will collect data to parameterise the functional response. Instead I’ve created a function that will predict new values of prey captured using a functional response formula that is already parameterised.&lt;/p&gt;
&lt;p&gt;Let’s look at the function:&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;an-interactive-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An interactive function&lt;/h2&gt;
&lt;p&gt;R has some capacity to be interactive. It can ask a user to input variables.
The function &lt;code&gt;functional_response&lt;/code&gt; will return the number of prey captured for a given prey density and type of jar used. The function will ask for these two inputs each time the function is run. Look at the code below and try to understand the different components. Then try running the code yourself with different inputs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#### Interactive function
# Simulation of the predator-prey functional response - DO NOT CHANGE
# To run: click Source (cmd or ctrl+shift+S) or Run All (ctrl+alt+r)
# Or source(&amp;quot;&amp;lt;insert file location here&amp;gt;&amp;quot;, echo = FALSE)

functional_response &amp;lt;- function(){
  
  # Introduce the simulation to the user - prints a message
  cat(paste(
    &amp;quot;&amp;quot;,
    &amp;quot;You have some counters (prey), a piece of A4 paper &amp;amp; a jar.&amp;quot;,
    &amp;quot;You spread the counters randomly on the A4 sheet.&amp;quot;,
    sep=&amp;quot;\n&amp;quot;))
  
  # Ask the user for the prey density for the functional response
  prey_density  &amp;lt;- readline(&amp;quot;How many prey counters are used? &amp;quot;) # ask for prey density
  
  # Check the user has inputted a number properly
  if(!grepl(&amp;quot;^[0-9]+$&amp;quot;, prey_density)){ # check whether the input contains numeric characters between 0-9 using regex (regular expressions)
    message(&amp;quot;Please enter an integer&amp;quot;) # If the input is not a number, tell them to do it again
    return(functional_response()) # Return to the beginning of the function and start again
  }
  prey_density &amp;lt;- as.integer(prey_density) # If the prey density input is a number, turn it into an interger
  
  # Ask the user for the type of jar used
  cat(paste(
    &amp;quot;&amp;quot;,
    &amp;quot;Every second you (the predator) tap the sheet to find and pick up a prey counter while blindfolded.&amp;quot;,
    &amp;quot;You have 1 minute to put as many prey counters as you can in the jar.&amp;quot;,
    &amp;quot;There are two types of jars you can use while handling prey.&amp;quot;,
    &amp;quot;Enter 1 to use a jar with a lid that you have to open and close.&amp;quot;,
    &amp;quot;Enter 2 to use a jar without a lid.&amp;quot;,
    &amp;quot;&amp;quot;,
    &amp;quot;What type of jar is used?&amp;quot;,
    sep=&amp;quot;\n&amp;quot;))
  lid_used &amp;lt;- menu(c(&amp;quot;Lid&amp;quot;, &amp;quot;No Lid&amp;quot;))
  
  # Calculate the number of prey caught (the functional response) based on the user defined input above
  if(lid_used != 0){ # Check that the use has chosen the jar used properly (1 or 2)
    
    # Use this model if using a jar with a lid
    if(lid_used == 1){
      Ha &amp;lt;- (0.2 * prey_density)/(1 + 0.2 * 0.03 * prey_density) 
    }
    
    # Use this model if using a jar without a lid
    if(lid_used == 2){
      Ha &amp;lt;- (0.7 * prey_density)/(1 + 0.7 * 0.05 * prey_density) 
    }
    
    # Add in some variation around the predicted value so that users don&amp;#39;t get the exact parameterised functional response
    Ha &amp;lt;- Ha + sample(seq(-3,3), 1) 
    
    # Make sure there are no negative prey items caught!
    if(Ha &amp;lt; 0){
      Ha &amp;lt;- 0 # Make prey caught 0 if less than 0
    }
    
    # Make sure the number of prey caught doesn&amp;#39;t exceed the number of prey available!
    if(Ha &amp;gt; prey_density){
      Ha &amp;lt;- prey_density # If prey caught is greater than the number of prey available, make it the maximum possible
    }
    
    # Print a message showing the results
    message(&amp;quot;The number of prey caught is &amp;quot;, floor(Ha), &amp;quot;. Well done!&amp;quot;) 
  }
}

# Actually run the function and tell R that it&amp;#39;s interactive 
if(interactive()) functional_response()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The function doesn’t have any inputs in &lt;code&gt;function()&lt;/code&gt; because it will ask the user for them each time&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readline&lt;/code&gt; is the function to ask for a single user input&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menu&lt;/code&gt; is the function to ask the user to chose from a number of options
&lt;ul&gt;
&lt;li&gt;Here the option is press 1 to use a jar with a lid or press 2 to use a jar without a lid&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;There are two parameterised functional responses - one for a jar with a lid and one for a jar without a lid&lt;/li&gt;
&lt;li&gt;&lt;code&gt;floor&lt;/code&gt; is a function to round the number of prey caught to the lowest whole number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the practical, students will need to run the above function for 10 prey densities, repeated 3 times, for both jar treatments - so 60 times in total. But we don’t have to do that manually - that is what loops are for!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;functions-and-loops&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Functions and loops&lt;/h2&gt;
&lt;p&gt;Here is a non-interactive version of the function above. It doesn’t have the printed messages asking for user input. This time, the function needs 3 inputs as indicated by &lt;code&gt;function(prey_density, lid_used, total_time)&lt;/code&gt;: the prey density used, the type of jar used and the total foraging time, respectively.&lt;/p&gt;
&lt;p&gt;Run the code chunk to load the function into the R environment:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Functional response function
functional_response &amp;lt;- function(prey_density, lid_used, total_time){
  
  # Check jar type is inputted correctly
  if (!lid_used %in% c(&amp;quot;yes&amp;quot;, &amp;quot;no&amp;quot;)) {
    stop(&amp;quot;Lid used is not inputted correctly. Use &amp;#39;yes&amp;#39; or &amp;#39;no&amp;#39; in all lowercase&amp;quot;)
  }
  if(lid_used == &amp;quot;yes&amp;quot;){
    Ha &amp;lt;- (0.2 * prey_density * total_time)/(1 + 0.2 * 0.03 * prey_density)
  }
  if(lid_used == &amp;quot;no&amp;quot;){
    Ha &amp;lt;- (0.7 * prey_density * total_time)/(1 + 0.7 * 0.05 * prey_density)
  }
  Ha &amp;lt;- Ha + sample(seq(-3,3), 1)
  if(Ha &amp;lt; 0){
    Ha &amp;lt;- 0
  }
  if(Ha &amp;gt; prey_density){
    Ha &amp;lt;- prey_density
  }
  # message(&amp;quot;The number of prey caught is &amp;quot;, floor(Ha))
return(floor(Ha))
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function will check that the character vector indicating the type of jar to be used is correct because R is case sensitive. The function will return the number of prey caught &lt;code&gt;Ha&lt;/code&gt; as indicated by &lt;code&gt;return(Ha)&lt;/code&gt;. The function &lt;code&gt;return&lt;/code&gt; specifically tells R to tell us the output, otherwise R will keep it to itself! Only one output is allowed (unless extra steps are taken).
The rest of the function is the same.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;using-the-functional-response-function-in-a-loop&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using the functional response function in a loop&lt;/h3&gt;
&lt;p&gt;Now let’s use a loop to do our entire experiment in one go! No manual inputs for us. In fact we can do as many treatments or replicates as we want. Let’s do prey densities between 5 and 100 in increments of 5 and 3 replicates. Since the function inputs are required we can set them up in the environment for the function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set parameters for the function
total_time &amp;lt;- 1 # total foraging time in minutes
no_treatments &amp;lt;- seq(from = 5, to = 100, by = 5) # prey density treatments between 5 and 100
replications &amp;lt;- 3 # number of replications

# a numeric vector of prey densities for all treatments, jar types and replications 
prey_density &amp;lt;- rep(rep(no_treatments, replications),2) # repeated twice for each jar type

# a character vector of the jar type
lid_used &amp;lt;- sort(rep(c(&amp;quot;no&amp;quot;, &amp;quot;yes&amp;quot;), length(prey_density)/2)) # &amp;quot;yes&amp;quot; or &amp;quot;no&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By setting up the parameters outside the function or loop, we can easily modify the parameters of the function and feed the new values into the loop. This helps us debug and is cleaner and easier to read.&lt;/p&gt;
&lt;p&gt;Now for the actual loop itself. We need to be able to store the output of the looped function.
Lists are the fastest way to do so in R because R is designed for lists and matrices.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create an empty list called prey_caught to populate 
prey_caught &amp;lt;- list()

for(i in seq_along(prey_density)){
  # Run the functional response for the nth observation in the vector prey_density representing all our observations and save it to the list
  prey_caught[[i]] &amp;lt;- functional_response(prey_density = prey_density[i],
                                         lid_used = lid_used[i],
                                         total_time = total_time)
  
  # Prepare the list for further analysis
  prey_caught[[i]] &amp;lt;-  cbind(prey_caught[[i]], prey_density[i]) # add a column for the prey density used to calculate the number of prey caught for that observation (row)
  prey_caught[[i]] &amp;lt;-  cbind(prey_caught[[i]], 1/prey_caught[[i]]) # add a column for the inverse of the number of prey caught - for statiscally parameterising the functional response
  prey_caught[[i]][,3] &amp;lt;-  ifelse(prey_caught[[i]][,3] == Inf, 0, prey_caught[[i]][,3]) # Housekeeping - turn undefined values of prey caught (from calculating 1 divided by 0) into 0. If the number of prey caught was 0
}

# Turn our list into a data frame
prey_caught &amp;lt;- data.frame(do.call(&amp;quot;rbind&amp;quot;, prey_caught))

# Label the columns
colnames(prey_caught) &amp;lt;- c(&amp;quot;Ha&amp;quot;, &amp;quot;H&amp;quot;,&amp;quot;Ha.1&amp;quot;, &amp;quot;HT.1&amp;quot;) # &amp;quot;.1 is inversed columns&amp;quot;

# Add type of lid used to our data frame
prey_caught$lid_used &amp;lt;- lid_used&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Here we are using a &lt;code&gt;for&lt;/code&gt; loop with the n&lt;sup&gt;th&lt;/sup&gt; observation denoted &lt;code&gt;i&lt;/code&gt;. This can be called anything you want but &lt;code&gt;i&lt;/code&gt; is from mathematical notation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seq_along&lt;/code&gt; is a useful function for telling which observation you are at for a vector - try it out on its own.&lt;/li&gt;
&lt;li&gt;Lists can only contain one variable type, unlike a data frame, but that’s why they are fast and memory efficient for high performance computing
&lt;ul&gt;
&lt;li&gt;If we were to add the jar type (a character vector) to the list within the loop, then all our numeric output will be converted to characters (default R behaviour) - not what we want!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do.call&lt;/code&gt; is a handy function for lists. It collapses multidimensional lists into one dimension, here appending them by rows (i.e. adding new observations by rows at the end)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;visualising-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visualising the data&lt;/h3&gt;
&lt;p&gt;Now we can plot our results and conduct our linear regression:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

prey_caught %&amp;gt;% # Absolute values
  ggplot(aes(H, Ha, colour = lid_used)) +
  geom_point() +
  geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, fullrange=TRUE) +
  labs(x = expression(paste(&amp;quot;Prey density  (H)&amp;quot;)),
       y = expression(paste(&amp;quot;Prey captured  (Ha)&amp;quot;)),
       colour = &amp;quot;Jar used&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/index_files/figure-html/plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Linear model
summary(lm(Ha.1 ~ HT.1 * lid_used, prey_caught))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Call:
lm(formula = Ha.1 ~ HT.1 * lid_used, data = prey_caught)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.27245 -0.05371 -0.01596  0.00899  0.84476 

Coefficients:
                 Estimate Std. Error t value Pr(&amp;gt;|t|)   
(Intercept)       0.07136    0.02262   3.155  0.00204 **
HT.1              1.00548    0.40029   2.512  0.01338 * 
lid_usedyes       0.09517    0.03198   2.976  0.00356 **
HT.1:lid_usedyes -1.11833    0.56609  -1.976  0.05058 . 
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

Residual standard error: 0.1351 on 116 degrees of freedom
Multiple R-squared:  0.08913,   Adjusted R-squared:  0.06558 
F-statistic: 3.784 on 3 and 116 DF,  p-value: 0.01242&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That has saved us from running the code 120 times! Now we can do it in one!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Formatting P values</title>
      <link>https://jacintak.github.io/post/2021-05-01-formatting-p-values/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-05-01-formatting-p-values/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-05-01-formatting-p-values/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This &lt;a href=&#34;https://www.r-bloggers.com/2016/03/correctly-reporting-p-values-in-summary-tables-reported-with-xtable/&#34;&gt;post&lt;/a&gt; on R bloggers describes a handy function for formatting really small P values in ANOVA tables (more than 3 decimal places) with &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;0.001\)&lt;/span&gt;. I find this easier to read when I need to present a formatted table, e.g. in teaching.&lt;/p&gt;
&lt;p&gt;The original function doesn’t cover all ways of creating ANOVA tables in &lt;code&gt;R&lt;/code&gt; so I have extended the function to cover more cases. The &lt;code&gt;fixp&lt;/code&gt; function below will work for ANOVA tables (&lt;code&gt;x&lt;/code&gt;) generated by &lt;code&gt;anova(lm(...))&lt;/code&gt; and &lt;code&gt;summary(aov(lm(...)))&lt;/code&gt;, as well as the model coefficients table generated by &lt;code&gt;coef(summary(lm(...)))&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;a-function-to-format-p-values&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A function to format P values&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;fixp &amp;lt;- function(x, dig=3){

# Convert to a data frame
  if(is.data.frame(x) | is.matrix(x)){
  x &amp;lt;- as.data.frame(x)
  } else {
  x &amp;lt;- as.data.frame(x[[1]])
  }

# Check column order  
  if(substr(names(x)[ncol(x)],1,2) != &amp;quot;Pr&amp;quot;){
    warning(&amp;quot;The name of the last column didn&amp;#39;t start with Pr. This may indicate that p-values weren&amp;#39;t in the last row, and thus, that this function is inappropriate.&amp;quot;)
    }
    
# Round P values to &amp;quot;dig&amp;quot; decimal places, default 3     
  x[,ncol(x)] &amp;lt;- round(x[,ncol(x)], dig)

#  
  for(i in 1:nrow(x)){
    if(x[i,ncol(x)] == 0 &amp;amp; !is.na(x[i,ncol(x)])){
      x[i,ncol(x)] &amp;lt;- paste0(&amp;quot;&amp;lt;0.&amp;quot;, paste0(rep(0,dig-1), collapse=&amp;quot;&amp;quot;), &amp;quot;1&amp;quot;)
      }
  }
  x
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main modification to the original function is to expand the conversion of &lt;code&gt;x&lt;/code&gt; to a data frame to accept lists and matrices. &lt;code&gt;summary(aov(lm(...)))&lt;/code&gt; creates an object with class &lt;code&gt;summary.aov&lt;/code&gt; which is a list and the coefficients table is a matrix. Although &lt;code&gt;anova(lm(...))&lt;/code&gt; creates a data frame that will work with the function without a fatal error, the function &lt;code&gt;anova&lt;/code&gt; has its own way of “pretty” printing [to quote the help file] which is not compatible with the character vector in the P value column and thus will show a P value of 1. So forcing to a data frame is necessary. A minor modification is to ignore the NAs in the Residual row created by the data frame which would otherwise give an error.&lt;/p&gt;
&lt;p&gt;The three decimal places for P values is coded into the function by default and can be changed by the &lt;code&gt;dig&lt;/code&gt; option. For example, &lt;code&gt;dig = 1&lt;/code&gt; will give you &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;0.1\)&lt;/span&gt;. You can then call your ANOVA table and the &lt;code&gt;fixp&lt;/code&gt; function through &lt;code&gt;knitr::kable()&lt;/code&gt; or your favourite HTML/LaTeX table formatter. e.g. &lt;code&gt;kable(fixp(anova(lm(...))), digits = ...)&lt;/code&gt;. If you don’t want to print NAs, it’s probably better to use the options in your chosen formatting function - e.g. the &lt;code&gt;knitr.kable.NA&lt;/code&gt; option in &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/kable.html&#34;&gt;&lt;code&gt;kable&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Leaving the valley of intermediate competence</title>
      <link>https://jacintak.github.io/post/using-mapply/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/using-mapply/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/using-mapply/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;if-it-aint-broke-dont-fix-it&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;If it ain’t broke, don’t fix it?&lt;/h1&gt;
&lt;p&gt;So you’ve spent a lot of time learning and practising &lt;code&gt;R&lt;/code&gt; and you’re pretty comfortable with using functions, if else statements and loops like they teach at introductory programming. What more is there to improve?&lt;/p&gt;
&lt;p&gt;If the answer is no or you subscribe to the quote above, then turn back now. If yes, continue.&lt;/p&gt;
&lt;p&gt;I think that even if one has the skills to do fundamental programming competently, there’s always room for improvement or something new to learn. Or you know that there’s a better, more efficient, way to do it but something is holding you back. For me, it’s usually the latter.&lt;/p&gt;
&lt;p&gt;In a milestone of using &lt;code&gt;R&lt;/code&gt; I think I have wrapped my head around replacing for loops with the &lt;code&gt;apply&lt;/code&gt; family, specifically &lt;code&gt;mapply&lt;/code&gt;. The last hurdle in delving into functional programming.&lt;/p&gt;
&lt;p&gt;I’ve used iterative coding quite a bit over the years and I’ve been using for loops to do so. As I’ve gotten more competent with applying basic concepts (like loops and functions), I’ve been moving towards optimising my code with more advanced &lt;code&gt;R&lt;/code&gt; methods. I started with using more manual functions and sourcing functions from external scripts but I was still relying on loops to apply those functions iteratively.&lt;/p&gt;
&lt;p&gt;I know loops are inefficient. I’ve waited &lt;em&gt;days&lt;/em&gt; for computationally intensive loops on large datasets to finish. I know that &lt;code&gt;apply&lt;/code&gt; and co. can be more computationally efficient but in your typical learning something new way, they hadn’t really clicked for me…until now.&lt;/p&gt;
&lt;p&gt;I’ve been trying to use &lt;code&gt;apply&lt;/code&gt; family functions where appropriate for years but I’ve never felt comfortable with using them to use them from the start. So, I default back to loops to save time and frustration.&lt;/p&gt;
&lt;p&gt;I think the slow uptake is because the syntax is different to the logic of loops that are taught, even if &lt;code&gt;apply&lt;/code&gt;’s logic is better from a computing perspective. The syntax and the logic is also inconsistent within the &lt;code&gt;apply&lt;/code&gt; family; a known disadvantage over similar functions (like &lt;code&gt;purrr::map&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;But let’s focus on a specific case before this becomes a cooking blog: replacing for loops. I’m going to assume that you are competent with manual functions, for loops and lists, and that you want to improve your code. I’m going to focus on lists because they are an efficient way of storing lots of similarly structured data in &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here are two ways to replace a for loop.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;an-example-loop&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;An example loop&lt;/h1&gt;
&lt;p&gt;Let’s create an example scenario and data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# some data to use
loop_data &amp;lt;- data.frame(col1 = c(11:15), col2 = c(20:24))

# define variable to change
a &amp;lt;- seq(0.2, 1, 0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loop_data&lt;/code&gt; is a data frame with two numeric columns (&lt;code&gt;col1&lt;/code&gt; &amp;amp; &lt;code&gt;col2&lt;/code&gt;). We technically won’t use &lt;code&gt;loop_data$col2&lt;/code&gt; but it’s there to create a 5x2 data frame.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; is a variable that we need for our function. There are 5 values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We want to add each element of &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;loop_data$col1&lt;/code&gt; and save that in a new column &lt;code&gt;loop_data$col1a&lt;/code&gt;. We will also add &lt;code&gt;a&lt;/code&gt; as a column in &lt;code&gt;loop_data&lt;/code&gt; just so we can keep track of which value was used to calculate &lt;code&gt;col1a&lt;/code&gt;. So the final output should have 25 rows (5 observations in &lt;code&gt;loop_data&lt;/code&gt; x 5 values of &lt;code&gt;a&lt;/code&gt;) and 4 columns (&lt;code&gt;col1&lt;/code&gt;, &lt;code&gt;col2&lt;/code&gt;, &lt;code&gt;col1a&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We will be storing our data in lists in all our scenarios. Note that I create the list to hold the answers (&lt;code&gt;loop_ans&lt;/code&gt;) before the function rather than to append newly calculated answers sequentially to the list within the function. I use the same &lt;code&gt;replicate&lt;/code&gt; function before all the examples. You could also start with an empty list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# data sets stored as a list - must not simplify or it will reduce to a matrix!
loop_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)

# A function to add a value a to a data frame x
loop_function &amp;lt;- function(x, a) {
  x$col1a &amp;lt;- x$col1 + a # add answer to a new column 
  x$a &amp;lt;- a # add a to a new column
  return(x) # give us the updated data frame
}

# Let&amp;#39;s loop
for(i in seq_along(a)){
  loop_ans[[i]] &amp;lt;- loop_function(loop_ans[[i]], a = a[i]) 
}

# merge to single data frame
loop_ans &amp;lt;- do.call(rbind, loop_ans)

# view the data
summary(loop_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       col1         col2        col1a            a      
##  Min.   :11   Min.   :20   Min.   :11.2   Min.   :0.2  
##  1st Qu.:12   1st Qu.:21   1st Qu.:12.4   1st Qu.:0.4  
##  Median :13   Median :22   Median :13.6   Median :0.6  
##  Mean   :13   Mean   :22   Mean   :13.6   Mean   :0.6  
##  3rd Qu.:14   3rd Qu.:23   3rd Qu.:14.8   3rd Qu.:0.8  
##  Max.   :15   Max.   :24   Max.   :16.0   Max.   :1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s the loop - should be familiar to you. Merging into a single data frame is optional if you want to keep using lists. Now let’s look at &lt;code&gt;lapply&lt;/code&gt; for a less elegant solution (!).&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;lapply&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. &lt;code&gt;lapply&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;lapply&lt;/code&gt; takes a list as input, does stuff and gives a list as output. Hence, the l in &lt;code&gt;lapply&lt;/code&gt; stands for list. The difference with loops and &lt;code&gt;lapply&lt;/code&gt; is that &lt;code&gt;lapply&lt;/code&gt; can only take one input - your data frame (or element in list). This means that we need to add the corresponding value of &lt;code&gt;a&lt;/code&gt; as a column in each element of &lt;code&gt;lapply&lt;/code&gt; - in other words to do part of what &lt;code&gt;loop_function&lt;/code&gt; did but outside the loop/&lt;code&gt;lapply&lt;/code&gt;. Thus, each data frame in the input list should have three columns: &lt;code&gt;col1&lt;/code&gt;, &lt;code&gt;col2&lt;/code&gt; &amp;amp; &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Incidentally, we can add the corresponding &lt;code&gt;a&lt;/code&gt; value as a column using &lt;code&gt;mapply&lt;/code&gt; and &lt;code&gt;cbind&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# the function only accepts one element: x
lapply_function &amp;lt;- function(x){
  x$col1a &amp;lt;- x$col1 + x$a
  return(x)
}

# Prepare the answer list
lapply_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)

# add a column using mapply
lapply_ans &amp;lt;- mapply(FUN = cbind, lapply_ans, &amp;quot;a&amp;quot; = a, SIMPLIFY = FALSE)

# apply function
lapply_ans &amp;lt;- lapply(lapply_ans, FUN = lapply_function)

# merge to single data frame
lapply_ans &amp;lt;- do.call(rbind, lapply_ans)

# view the data
summary(lapply_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       col1         col2          a           col1a     
##  Min.   :11   Min.   :20   Min.   :0.2   Min.   :11.2  
##  1st Qu.:12   1st Qu.:21   1st Qu.:0.4   1st Qu.:12.4  
##  Median :13   Median :22   Median :0.6   Median :13.6  
##  Mean   :13   Mean   :22   Mean   :0.6   Mean   :13.6  
##  3rd Qu.:14   3rd Qu.:23   3rd Qu.:0.8   3rd Qu.:14.8  
##  Max.   :15   Max.   :24   Max.   :1.0   Max.   :16.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you see it’s not as simple as the loop or &lt;code&gt;mapply&lt;/code&gt; and requires &lt;code&gt;mapply&lt;/code&gt; anyway 🤷&lt;br /&gt;
So we can do better…&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;mapply&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. &lt;code&gt;mapply&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The m in &lt;code&gt;mapply&lt;/code&gt; stands for multiple because it takes multiple arguments and applies them to the data. There are some key differences in the structure of the data and the function compared to &lt;code&gt;lapply&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can use the original loop function with two variables!
&lt;ul&gt;
&lt;li&gt;The additional variables (&lt;code&gt;a&lt;/code&gt; in this example) are written after the function &lt;code&gt;FUN&lt;/code&gt; is defined in &lt;code&gt;mapply&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We can also use the original list (&lt;code&gt;loop_data&lt;/code&gt;) without further modification!&lt;/li&gt;
&lt;li&gt;We need to tell &lt;code&gt;mapply&lt;/code&gt; not to simplify the output into a matrix by default. Note the use of upper case in &lt;code&gt;SIMPLIFY&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Prepare the answer list
mapply_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)
# mapply function
mapply_ans &amp;lt;- mapply(mapply_ans, FUN = loop_function, a = a, SIMPLIFY = FALSE)
# merge to single data frame
mapply_ans &amp;lt;- do.call(rbind, mapply_ans)
# view the data
summary(mapply_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       col1         col2        col1a            a      
##  Min.   :11   Min.   :20   Min.   :11.2   Min.   :0.2  
##  1st Qu.:12   1st Qu.:21   1st Qu.:12.4   1st Qu.:0.4  
##  Median :13   Median :22   Median :13.6   Median :0.6  
##  Mean   :13   Mean   :22   Mean   :13.6   Mean   :0.6  
##  3rd Qu.:14   3rd Qu.:23   3rd Qu.:14.8   3rd Qu.:0.8  
##  Max.   :15   Max.   :24   Max.   :16.0   Max.   :1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What &lt;code&gt;mapply&lt;/code&gt; is doing is using the n&lt;sup&gt;th&lt;/sup&gt; element of &lt;code&gt;a&lt;/code&gt; with the corresponding n&lt;sup&gt;th&lt;/sup&gt; element in the list &lt;code&gt;loop_data&lt;/code&gt;. So the fifth value of &lt;code&gt;a&lt;/code&gt; (1.0) is used in the calculations on the 5th data frame in &lt;code&gt;loop_data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’ve replace the for loop with a &lt;code&gt;mapply&lt;/code&gt; function! 👏&lt;br /&gt;
Here’s to functional programming. Next up is &lt;code&gt;purrr::map&lt;/code&gt;…&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Transparent graphing for dark backgrounds</title>
      <link>https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I’m not usually a dark background person but I’m open to the dark side. I wanted to make a solid coloured graph with a transparent background that would show up nicely but &lt;code&gt;ggplot2&lt;/code&gt; doesn’t have a set theme for that. A clean solid fill and transparency requires some specific customisation so here is a reproducible example for you using the built-in &lt;code&gt;trees&lt;/code&gt; dataset:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tree_graph &amp;lt;- ggplot(data = trees, 
       mapping = aes(x = Height, 
                     y = Girth)) + 
    geom_point(size = 0.5, colour = &amp;quot;#B8DE29FF&amp;quot;) + 
    geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, col = &amp;quot;#B8DE29FF&amp;quot;) + 
    geom_abline(intercept = 0, slope = 1, col = &amp;quot;white&amp;quot;, lwd = 0.5, lty = 2) + 
    theme_classic() +
    theme(plot.background = element_rect(fill = &amp;quot;transparent&amp;quot;, color = NA),
          panel.background = element_rect(fill = &amp;quot;transparent&amp;quot;),
          axis.text = element_text(colour = &amp;quot;#B8DE29FF&amp;quot;, size = 8),
          axis.title = element_text(colour = &amp;quot;#B8DE29FF&amp;quot;, size = 8),
          axis.line = element_line(colour = &amp;quot;#B8DE29FF&amp;quot;),
          axis.ticks = element_line(colour = &amp;quot;#B8DE29FF&amp;quot;))

ggsave(tree_graph, filename = &amp;quot;tree_graph.png&amp;quot;, bg = &amp;quot;transparent&amp;quot;, type = &amp;quot;cairo&amp;quot;, width = 10, height = 10, dpi = 300)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a couple of generally useful elements added on purpose:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geom_smooth&lt;/code&gt; creates an automatically fitted linear model (defined using &lt;code&gt;method = &#34;lm&#34;&lt;/code&gt;). I have turned off plotting the standard errors (on by default) and manually set the colour.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geom_abline&lt;/code&gt; is your standard straight line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt; is where the customisation begins:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plot.background&lt;/code&gt; &amp;amp; &lt;code&gt;panel.background&lt;/code&gt; are set to transparent&lt;/li&gt;
&lt;li&gt;The various axis elements are set to the fill colour (a nice &lt;code&gt;viridis&lt;/code&gt; green) and desired text size&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggsave&lt;/code&gt; specifies that the background is transparent and to save it using the Cairo engine (&lt;code&gt;type = &#34;cairo&#34;&lt;/code&gt;). Cairo will create a vector based image so resizing the png isn’t an issue since the small font size is already defined.
&lt;ul&gt;
&lt;li&gt;You can also use &lt;code&gt;cairo-png&lt;/code&gt; but the graph height and width options appear to be ignored.&lt;/li&gt;
&lt;li&gt;If you don’t save it as a Cairo png, then the text will still have a white outline and won’t be a clean solid fill&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
