<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jacinta&#39;s Website</title>
    <link>https://jacintak.github.io/</link>
      <atom:link href="https://jacintak.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Jacinta&#39;s Website</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 01 Jan 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jacintak.github.io/img/icon-512.png</url>
      <title>Jacinta&#39;s Website</title>
      <link>https://jacintak.github.io/</link>
    </image>
    
    <item>
      <title>LaTeX exam templates with R &amp; Rmarkdown</title>
      <link>https://jacintak.github.io/post/latex-exam-template/</link>
      <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/latex-exam-template/</guid>
      <description>


&lt;div id=&#34;latex-the-final-fontier&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;LaTeX: The final fontier&lt;/h1&gt;
&lt;p&gt;Happy New Year! 2022’s holiday blog post is brought to you by the letters LaTeX. I do not use LaTeX outside the &lt;code&gt;rmarkdown&lt;/code&gt; environment so I wanted to familiarize myself with its more advanced typesetting features.&lt;/p&gt;
&lt;p&gt;If you’re thinking of typesetting a manuscript, then this is not the post for you. I used an exam as the example (pun not intended) to play with.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tl;dr I made an &lt;code&gt;rmarkdown&lt;/code&gt; template for an exam paper using LaTeX {exam}. It supports R code chunks and shows or hides the answers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;accessing-the-template&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Accessing the template&lt;/h2&gt;
&lt;p&gt;You need to be able to create PDFs with &lt;code&gt;rmarkdown&lt;/code&gt; (pandoc and LaTeX). &lt;code&gt;rmarkdown&lt;/code&gt; templates need to be housed within a package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you don’t want to create your own R package, the template can be downloaded ready to use via the package &lt;code&gt;biostats.tutorials&lt;/code&gt; on my &lt;a href=&#34;https://github.com/jacintak/biostats-tutorials&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You can get the files to add to your own package from the &lt;a href=&#34;https://gist.github.com/jacintak/71c9978cc5b3d9a2c1b8f82403a31830&#34;&gt;Gist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you have the templates installed, you should be able to see them listed when you create a an R markdown document from template.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;latex-exam&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;LaTeX {exam}&lt;/h2&gt;
&lt;p&gt;LaTeX has a document type called {exam} that contains helper functions for typesetting an exam. For example, defining questions, solutions, or showing mark allocations. It’s pretty straightforward to get a basic template set up by following the documentation.&lt;/p&gt;
&lt;p&gt;This option is fine if you are working purely in LaTeX and a TeX editor. &lt;strong&gt;But&lt;/strong&gt; it doesn’t work with R. R would be pretty important if for example you wanted to integrate R output. Of course, you could typeset an exam in &lt;code&gt;rmarkdown&lt;/code&gt; with a more generic document class but you miss out on the more specific functions.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;rmarkdown-latex&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Rmarkdown &amp;amp; LaTeX&lt;/h1&gt;
&lt;p&gt;There’s a lot of technical information to gloss over but there are three general ways to use LaTeX with &lt;code&gt;rmarkdown&lt;/code&gt;. Each way has its advantages and disadvantages to achieve our desired outcome: a nicely formatted exam template with R code that’s able to also show the answers.&lt;/p&gt;
&lt;div id=&#34;rnw&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Rnw&lt;/h2&gt;
&lt;p&gt;An Rnw (Sweave) file is a LaTeX file that supports R code. Meaning rather than a document written in markdown with code chunks and some LaTeX, you have a document written in LaTeX with code chunks and no markdown. Knitting proceeds as normal - be sure to change your setting from Sweave to knitr for Rnw files in your global settings.&lt;/p&gt;
&lt;p&gt;I found this to be the second best option and a decent alternative to my best option. It produces the desired outcome using {exam} provided the R code is relatively simple. However, your document will be very TeX heavy so avoid it if TeX is not your strong suit.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tex-template&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. TeX template&lt;/h2&gt;
&lt;p&gt;Another one for advanced TeX users. This way you make your own template that Pandoc uses to generate the PDF. However, this template seems to override the Pandoc template so you need a complete template with all the bells and whistles. This is probably the better option in terms of customisation and using LaTeX to the best of its ability. But involving Pandoc makes the behind-the-scenes workflow more complex, such as specifying to LaTeX how Pandoc creates bulleted lists. And I don’t know anything about TeX templates.&lt;/p&gt;
&lt;p&gt;The bookdown handbook recommends to start from the original Pandoc LaTeX template but I could not get the template to work out of the box from GitHub. Something about not knowing what to do with plots.&lt;/p&gt;
&lt;p&gt;There are lots of templates out there that don’t necessarily use {exam} that you could use. Once you have the template you can call it in the YAML like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output:
  pdf_document:
    template: template.tex&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;preambles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Preambles&lt;/h2&gt;
&lt;p&gt;In the end I found using preambles was the best compromise. You can include TeX files in YAML like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output:
  pdf_document:
    includes:
      before_body: cover.tex
      in_header: preamble.tex&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method allowed most of the functions and aesthetics of {exam}, like a cover page and a header and footer. These TeX snippets don’t override the template but they are not dynamic and cannot be linked to YAML variables. For example, you cannot use the title of your document as set in the YAML in the header. You could via $ operators in a TeX template.&lt;/p&gt;
&lt;p&gt;The benefits are that you can package your files as an &lt;code&gt;rmarkdown&lt;/code&gt; template and you can write in markdown, which is easier for me. The main drawback is that you cannot use code highlighting because there is an issue with a LaTeX package called &lt;code&gt;framed&lt;/code&gt;. I couldn’t find a workaround that worked for me (See this &lt;a href=&#34;https://tex.stackexchange.com/questions/71177/command-already-defined&#34;&gt;StackExchange&lt;/a&gt;). If you want to use &lt;code&gt;echo = TRUE&lt;/code&gt; as a chunk option then you need to set &lt;code&gt;highlight: NULL&lt;/code&gt; in YAML:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output:
  pdf_document:
    highlight: NULL
    includes:
      before_body: cover.tex
      in_header: preamble.tex&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;workflow&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Workflow&lt;/h1&gt;
&lt;p&gt;The template involves three files. See the &lt;a href=&#34;https://gist.github.com/jacintak/71c9978cc5b3d9a2c1b8f82403a31830&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;skeleton.rmd&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. skeleton.Rmd&lt;/h2&gt;
&lt;p&gt;This is the main template. &lt;code&gt;usethis::use_rmarkdown_template()&lt;/code&gt; will generate the correct folder structure and empty files for you. The template contains two example questions for how a question could be laid out but the heavy lifting is done automatically by document class {exam}, as called in the YAML. Remove &lt;code&gt;classoption: answers&lt;/code&gt; to hide the answers when knitting.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cover.tex&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. cover.tex&lt;/h2&gt;
&lt;p&gt;This creates a cover page containing generic instructions, the class and exam name as set in the YAML, and space for students to write their name and student number. This is like TeX that goes before &lt;code&gt;\begin{document}&lt;/code&gt;. This file is all aesthetics. The document works without it.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;preamble.tex&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. preamble.tex&lt;/h2&gt;
&lt;p&gt;This is the more important TeX file because there are some pecularities with how Pandoc and LaTeX talk to each other. First, we can avoid using &lt;code&gt;\begin{}&lt;/code&gt; or &lt;code&gt;\end{}&lt;/code&gt; commands by redefining them (See this &lt;a href=&#34;https://stackoverflow.com/questions/57791708/how-to-show-solutions-using-latex-exam-class-in-rmarkdown-file&#34;&gt;StackOverflow&lt;/a&gt;). The three main ones used in {exam} are for questions, questions with multiple parts, and solutions. Second, Pandoc does not know how to deal with all {exam} functions so you need to help it a little (See this &lt;a href=&#34;https://github.com/jgm/pandoc/issues/4023&#34;&gt;GitHub issue&lt;/a&gt;). We need to tell it how to understand we want a question with multiple parts like a) and b).&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;end-notes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;End notes&lt;/h1&gt;
&lt;p&gt;After all that I still know nothing about how Pandoc or LaTeX works.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>BES 2022</title>
      <link>https://jacintak.github.io/talk/BES2022/</link>
      <pubDate>Mon, 19 Dec 2022 17:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/talk/BES2022/</guid>
      <description>&lt;p&gt;Thermal tolerances, such as critical temperatures, are important indices for understanding an organism’s vulnerability to changing environmental temperature. Differences in thermal tolerance over ontogeny may generate a ‘thermal bottleneck’ that sets the climate vulnerability for organisms with complex life cycles. However, a species’ microhabitat preference and methodological differences among studies can generate confounding variation in thermal tolerance that may mask trends in large-scale comparative studies and may hinder our ability to assess climate change vulnerability within and among species. Here, we evaluated two approaches to resolving ontogenetic and environmental drivers of thermal tolerance and methodological variation: mathematical standardisation of thermal tolerance and classifying microhabitat preferences. Using phylogenetically informed, multi-level models with a global dataset of upper critical temperatures from 438 Anuran species, we found ontogenetic trends in thermal tolerance were similar across microhabitat preferences and standardising critical temperatures against common methodological variation had little impact on our conclusions. Our results suggested thermal bottlenecks are not strongly present in Anurans but instead, implied strong developmental or genetic conservatism of thermal tolerance within families and ecotypes. We discussed considerations for resolving confounding variation to interpret thermal tolerance at a macrophysiological scale.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Heating tolerance of ectotherms is explained by temperature’s non-linear influence on biological rates</title>
      <link>https://jacintak.github.io/publication/2022-biorxiv/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/publication/2022-biorxiv/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;The capacity of ectotherms to adjust their thermal tolerance limits through evolution or acclimation seems relatively modest and highly variable, and we lack satisfying explanations for both findings given a limited understanding of what ultimately determines an organism’s thermal tolerance. Here, we test if the amount of heating an ectotherm tolerates throughout a heating event until organismal failure scales with temperature’s non-linear influence on biological rates. To account for the non-linear influence of temperature on biological rates on heating tolerance, we rescaled the duration of heating events of 316 ectothermic taxa acclimated to different temperatures and describe the biological rate-corrected heating duration. This rescaling reveals that the capacity of an organism to resist a heating event is in fact remarkably constant across any acclimation temperature, enabling high-precision estimates of how organismal thermal tolerance limits vary under different thermal regimes. We also find that faster heating consistently reduces biological rate-corrected heating durations, which helps further explain why thermal tolerance limits seem so variable on absolute temperature scales. Existing paradigms are that heating tolerances and thermal tolerance limits reflect incomplete metabolic compensatory responses, are constrained by evolutionary conservatism, or index failure of systems such as membrane function; our data provide a different perspective and show that an organism’s thermal tolerance emerges from the interaction between the non-linear thermal dependence of biological rates and heating durations, which is an approximately-fixed property of a species.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Statistical modelling Part 1</title>
      <link>https://jacintak.github.io/teaching/StatsModelsPrac1/</link>
      <pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/teaching/StatsModelsPrac1/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is a static version of the &lt;code&gt;learnr&lt;/code&gt; tutorials for the Statistical Modelling practicals.&lt;/p&gt;
&lt;p&gt;Welcome! In two practicals and in three lectures we will be looking at statistical modelling.&lt;/p&gt;
&lt;p&gt;We have progressed beyond the realm of doing stats by hand and basic statistical tests like t-tests are &lt;strong&gt;not appropriate&lt;/strong&gt; for the types of data we will look at or the hypotheses we test. R will be the tool we will use.&lt;/p&gt;
&lt;p&gt;In these sessions, we will focus on the practical aspects of &lt;strong&gt;applying&lt;/strong&gt; statistics (implementation &amp;amp; interpretation) with real data – not on the theory or mathematical proofs – in fact, nearly all the relevant theory has been introduced to you in previous lectures.&lt;/p&gt;
&lt;p&gt;The practicals and lectures will feed off each other and these will also build upon the previous lectures and practicals. All concepts in this practical are assessable and relevant to the lectures. &lt;strong&gt;I expect you to be up to date with the module material&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The demonstrators are available if you have questions about the concepts or have technical issues with running the practical. Please talk to them, they get lonely. They will be checking in and making sure you are keeping to time.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;what-is-statistical-modelling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What is statistical modelling?&lt;/h2&gt;
&lt;p&gt;Recall from the lectures:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Statistical models are logical mathematical or statistical descriptions of what we believe to be important in a biological system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We use models to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sense of a complex and messy real world and its data
&lt;ul&gt;
&lt;li&gt;Formulate new theories&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Test our understanding of a biological system
&lt;ul&gt;
&lt;li&gt;Formulate hypotheses&lt;/li&gt;
&lt;li&gt;Make predictions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Make evidence-based decisions
&lt;ul&gt;
&lt;li&gt;Run simulations – “what if…?”, what happens if we change something?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If our model doesn’t match what we observe from empirical data, that’s OK! We can refine our model (our hypothesis) to better match what we observe. &lt;strong&gt;That’s the Scientific Method.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Remember!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Science isn’t about “proving” a hypothesis or being “right” – we find &lt;strong&gt;“support”&lt;/strong&gt; for a hypothesis and it’s when we “fail” or are wrong that progress happens.
&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;To paraphrase: all models are wrong but some can be useful&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;types-of-models&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Types of models&lt;/h2&gt;
&lt;p&gt;Models can be characterised in several ways depending on what they describe:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Theoretic models&lt;/strong&gt; describe processes – explored here&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Empirical models&lt;/strong&gt; describe data – explored in lectures and in the next practical&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some biological systems can be described both ways.&lt;/p&gt;
&lt;p&gt;Models can be placed on a spectrum of simple to complex, and specific to general.&lt;/p&gt;
&lt;p&gt;Models can also be described based on their precision, realism and generality. But these trade-off – No one model can perfectly capture all these qualities.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;All types&lt;/em&gt; of models are based on assumptions or require information about the biological system. Models describe a biological system with some limitations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The best model to use depends on the intended question.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;variables-vs-parameters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Variables vs parameters&lt;/h2&gt;
&lt;p&gt;Distinguishing between variables and parameters is important in statistics, particularly for modelling.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;br /&gt;
These are quantities that change with each iteration of a statistical model. E.g. the predictor (independent) variable and the response (dependent) variable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;br /&gt;
These are quantities that do not change with each iteration of a statistical model. They are often a constant and often represent the assumptions about our biological system we make to model it. If we change the fundamental assumptions of the model, then the &lt;em&gt;value&lt;/em&gt; of the parameter may change. Often the value of the parameter is &lt;strong&gt;unknown&lt;/strong&gt; to us and need to be &lt;strong&gt;parametrised&lt;/strong&gt; from empirical data.&lt;/p&gt;
&lt;p&gt;A variable could switch to being a parameter or vice versa depending on the experimental design and hypothesis tested, which in turn determines the statistical model. These decisions should be made when planning an experiment, not during or afterwards.&lt;/p&gt;
&lt;p&gt;We will go through the process of parametrising in the next practical and in the lectures.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;practical-information&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Practical information&lt;/h2&gt;
&lt;p&gt;In these practicals we will look at a theoretic model of a predator-prey interaction.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The aim is to understand how statistical models can be applied to biological data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The majority of this practical will focus on the practicalities of designing experiments and collecting data, which we covered earlier in the module.&lt;/p&gt;
&lt;p&gt;I recommend taking your time with these practical and the concepts because they are fundamental to biological statistics you are likely to encounter again (plus are highly relevant to your final report). There is no need to rush.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;learning-objectives&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Learning objectives&lt;/h3&gt;
&lt;p&gt;This practical is split into three parts with distinct learning objectives (recommended time to spend):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part A: Building a theoretic model (20 mins)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Know how a biological process can be described by a statistical model&lt;/li&gt;
&lt;li&gt;Understand how statistical models are applied to answer real world biological questions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Part B: Designing an experiment (20 mins)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apply your knowledge about experimental design and hypothesis formulation to a biological problem in practice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don’t spend too long on Parts A and B, move through them and the CA quickly. Part C is the most important part and will take the most time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part C: Collecting data (&lt;strong&gt;2 hours&lt;/strong&gt;)&lt;/strong&gt;&lt;br /&gt;
This is the main activity of the practical.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Know how to organise a spreadsheet and fill in a spreadsheet with data following the principles of tidy data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will be uploading your data to Blackboard. In the next practical we will be analysing the aggregated &amp;amp; anonymised class data set and using that to answer CA questions.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Continuous Assessment
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;I recommend finishing the CA &lt;em&gt;before&lt;/em&gt; Part C. The CA is worth 10% and is due at the end of the prac. There is a total of 10 marks.&lt;/p&gt;
The CA aims to assess your understanding of the concepts in this practical and your ability to apply the concepts in practice.
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-a-theoretic-models&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Part A: Theoretic models&lt;/h1&gt;
&lt;p&gt;In the previous practical you looked at a killer T cell digesting a pathogen. This infection response is a biological process and is analogous to a predator (e.g. a lion) hunting a prey (e.g. zebra), or a robot (a “predator”) cleaning up an oil spill (its “prey”).&lt;/p&gt;
&lt;p&gt;You started to compose a Scratch model. Although the Scratch model comprises of pictures and code blocks, under the hood these blocks represent computer code, and more abstractly a mathematical processes. Thus, the Scratch model is an implementation of a statistical model of a biological system – the infection response.&lt;/p&gt;
&lt;p&gt;This model was simple – too simple to be realistic. The killer T cell captured any and all pathogens touching it whereas in reality, a killer T cell may only target a few pathogens at a time or sequentially. This is also true for animal predators who hunt. Most predators need time to catch and process their food before their next meal.&lt;/p&gt;
&lt;p&gt;We can conceptualise a more realistic representation of an infection response, or more abstractly a predator-prey interaction. By breaking down what we observe to be important about the infection response into variables and assumptions, we can build our own theoretic model (describing a process) of an predator-prey interaction from scratch.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;what-is-a-predator-prey-interaction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What is a predator-prey interaction?&lt;/h2&gt;
&lt;p&gt;In a predator-prey interaction we have two &lt;strong&gt;variables&lt;/strong&gt;:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Predator&lt;/li&gt;
&lt;li&gt;Prey&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we think about what we consider to be important in a predator-prey interaction, searching for and handing prey two mutually exclusive aspects. We can then make the following statements, or assumptions, about the predator-prey interaction:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A predator randomly searches for prey&lt;/li&gt;
&lt;li&gt;A predator can only “search” a fixed area per unit time (search rate)&lt;/li&gt;
&lt;li&gt;A predator can only eat one prey at a time – it must “process” (i.e. digest) the prey before it can begin searching for the next one (handling time)
&lt;ul&gt;
&lt;li&gt;Handling time and searching activity are mutually exclusive&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Prey randomly move around independently of the predator (e.g. it does not slow down or speed up when the prey is near)&lt;/li&gt;
&lt;li&gt;Both the predator and the prey move at the same speed and at a constant speed&lt;/li&gt;
&lt;li&gt;Both the predator and the prey only move within a fixed area (e.g. their habitat), they cannot leave.&lt;/li&gt;
&lt;li&gt;The numbers of predators and prey are fixed at the start of the experiment (i.e. they do not replicate while the model is running, prey numbers can only decrease, predator numbers stay the same)&lt;/li&gt;
&lt;li&gt;Each predator-prey interaction lasts a fixed amount of time (total time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These same statements can be applied to an infection response or to any analogous scenario – merely replace “predator” and “prey” with the relevant terms.&lt;/p&gt;
&lt;div class=&#34;panel panel-info&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Discussion
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Would you agree with the above statements? Or are they too simplistic of a complex biological system?
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you thought our model is too simplistic, you are probably right &lt;em&gt;but&lt;/em&gt; in modelling philosophy some degree of simplification or abstraction is perfectly acceptable because &lt;em&gt;models are only representations of reality&lt;/em&gt;, they are not meant to copy the real world right down to the minutiae.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;div class=&#34;panel-title&#34;&gt;
Thus, one application of models is to consider them as hypotheses of biological systems – what we think are important components of the system.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;functional-responses&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Functional responses&lt;/h2&gt;
&lt;p&gt;Infection responses, predator-prey interactions… they can be generally classified as &lt;strong&gt;functional responses&lt;/strong&gt;. Luckily for us, there are already well known analytical (mathematical) models of functional response that we can use.&lt;/p&gt;
&lt;p&gt;There are multiple types of functional responses (labelled with Roman numerals: I — IV). Each of these models represents a &lt;em&gt;different hypothesis&lt;/em&gt; about functional responses and mathematically describes a &lt;em&gt;different relationship&lt;/em&gt; between our two variables (e.g. the killer T cell and the pathogen, or a predator and its prey). You can read more about functional responses by running &lt;code&gt;vignette(&#34;functional_responses&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The assumptions we make above are based on a &lt;strong&gt;Type II functional response model&lt;/strong&gt;, which is common in biology. You can read about the full derivation by running &lt;code&gt;vignette(&#34;TypeII_models&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Type II functional response model is a good example of a general model – it has been used to describe animal predators eating prey (e.g. Holling’s disc equations) or enzymes catalysing reactions (e.g. Michaelis-Menten equation). We can also use it to describe the immune response of the previous practical.&lt;/p&gt;
&lt;p&gt;It doesn’t matter what the mathematical symbols represent biologically, maths is a universal language that describes the underlying biological process. Here, we are applying it to an general predator-prey scenario involving students and plastic counters.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;a-type-ii-functional-response&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A Type II functional response&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://jacintak.github.io/teaching/StatsModelsPrac1/index_files/figure-html/funct_resp-1.png&#34; alt=&#34;Type II functional response of a predator-prey interaction&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
(#fig:funct_resp)Type II functional response of a predator-prey interaction
&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;panel panel-info&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Discussion
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
How would you describe the Type II relationship in words in a results section of a lab report?
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Maybe something like:&lt;br /&gt;
“The number of prey eaten rapidly increases at low prey densities and gradually plateaus to a maximum number of prey eaten at higher prey densities.”&lt;/p&gt;
&lt;p&gt;The mathematical model of the figure above is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[H_a=\ \frac{a\times H\times T_{total}}{1+a\times H\times T_h}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;You should read the full derivation in the documentation file to see how we’ve turned our earlier assumptions into mathematical expressions – run &lt;code&gt;vignette(&#34;TypeIImodels&#34;)&lt;/code&gt; in Console or via the Packages tab (click StatsModels -&amp;gt; User guides).&lt;/p&gt;
&lt;p&gt;Let’s go through what the letters and numbers mean and how they link to our model assumptions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(H\)&lt;/span&gt; is the number of prey within a fixed area (prey density, number per area). This is our predictor variable. We decide what values to use before our experiment&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; is the search rate or attack rate. It is the search area per unit time of a prey. This is a parameter that we do not know and that we calculate from our data.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(H_a\)&lt;/span&gt; is the number of prey captured. We record this at the end of our experiment as our response variable.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(T_{total}\)&lt;/span&gt; is the total time a predator spent hunting prey (time). This is a constant parameter that we decide before we start the experiment based on our assumptions.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(T_h\)&lt;/span&gt; is the time a predator spends digesting a single prey (time per prey). This is a parameter that we do not know and that we calculate from our data. In functional response models, this is called handling time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You’ll see that we know the value of some of these parameters already and some we need to calculate from our data.&lt;/p&gt;
&lt;div class=&#34;panel panel-info&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Discussion
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Variables or parameters? Which is which in our model? What information do we know already and what do we need to find out? And how would you find it out?
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;finding-our-unknown-parameters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Finding our unknown parameters&lt;/h2&gt;
&lt;p&gt;How do we estimate these unknown parameters from our data (e.g from the figure above)?&lt;/p&gt;
&lt;p&gt;Actually, the hyperbolic nature of the Type II makes it challenging to extract this information – and certainly beyond the expectations of this module. &lt;em&gt;But&lt;/em&gt; we can use mathemagics to turn this hyperbolic relationship into a straight line by a process called &lt;em&gt;linearising&lt;/em&gt;. And straight lines are easier to manipulate or interpret – something we expect you to be able to do in this module.&lt;/p&gt;
&lt;p&gt;The linearised Type II equation is:
&lt;span class=&#34;math display&#34;&gt;\[\frac{1}{H_a}=\ \frac{1}{a}\times\frac{1}{H\times T_{total}}+\frac{T_h}{T_{total}}\]&lt;/span&gt;
The full derivation is accessible in &lt;code&gt;vignette(&#34;TypeIImodels&#34;)&lt;/code&gt;, we won’t go though how this is derived here, but you &lt;em&gt;do&lt;/em&gt; need to understand this equation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{H_a}\)&lt;/span&gt; is the inverse of our response variable – the number of prey eaten&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{a}\)&lt;/span&gt; is the inverse of our unknown search rate parameter&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{H \times T_{total}}\)&lt;/span&gt; is the inverse of our predictor variable (prey density) and the total predator-prey interaction time&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\frac{T_h}{T_{total}}\)&lt;/span&gt; is our unknown handling time divided by the total predator-prey interaction time&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;panel panel-info&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Discussion
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Does the overall structure of the equation look familiar to you? (maybe from high school maths)
&lt;/div&gt;
&lt;/div&gt;
The graph looks like this:
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:tyepe2line&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/teaching/StatsModelsPrac1/index_files/figure-html/tyepe2line-1.png&#34; alt=&#34;Linearised type II functional response of a predator-prey interaction&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Linearised type II functional response of a predator-prey interaction
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The linearised function has the general form &lt;span class=&#34;math inline&#34;&gt;\(y = \beta_1 x + \beta_0\)&lt;/span&gt; which is a straight line. &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; is the response variable, &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; is the predictor variable, &lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt; is the slope or gradient of the line, and &lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt; is the intercept of the line. We will see this notation again in the lectures.&lt;/p&gt;
&lt;p&gt;This linear form allows us to estimate the coefficients for the linear equation where y = &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{H_a}\)&lt;/span&gt; and x = &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{H\times T_{total}}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;From the linearised Type II equation we can see that:&lt;br /&gt;
&lt;span class=&#34;math display&#34;&gt;\[Slope=\ \frac{1}{a}\]&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;math display&#34;&gt;\[Intercept=\ \frac{T_h}{T_{total}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We can calculate the slope and intercept from regression and then do some algebra to find &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(T_h\)&lt;/span&gt;:&lt;br /&gt;
&lt;span class=&#34;math display&#34;&gt;\[a=\frac{1}{slope}\]&lt;/span&gt;
and
&lt;span class=&#34;math display&#34;&gt;\[T_h = T_{total} \times intercept\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now we have our model, we need to &lt;strong&gt;parameterise&lt;/strong&gt; it and find the values of our unknown parameters.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
For the rest of the practical we will look at the question:
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
What are the values of our unknown parameters, handling time and search rate?
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Unlike the previous practical, we are going to investigate this question by conducting a real experiment but it is possible to build an equivalent simulation in Scratch.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;That’s the end of Part A. Check in with your demonstrator. Take a break. Stand up. Shake your limbs. Breathe.&lt;/p&gt;
&lt;p&gt;You’re doing great!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b-designing-an-experiment&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Part B: Designing an experiment&lt;/h1&gt;
&lt;div id=&#34;the-predator-prey-experiment&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The predator-prey experiment&lt;/h2&gt;
&lt;p&gt;You have been provided some plastic counters, a stopwatch, a piece of paper and a jar with a lid. You are the predator and the counters are your prey. The piece of paper is your arena and the jar is for collecting prey that you have captured.&lt;/p&gt;
&lt;p&gt;You will be working in pairs – one of you will be the predator, the other will be the observer (keeping track of the time, recording the data). You will need a computer between you for entering and uploading data.&lt;/p&gt;
&lt;p&gt;The protocol is simple:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Spread out the desired number of counters on the A4 sheet randomly. Do not move counters around once landed&lt;/li&gt;
&lt;li&gt;The predator will close their eyes and use their index finger to randomly tap around the arena at a constant search rate called out by the observer. The observer has a stop-watch and tells the predator when to tap.&lt;/li&gt;
&lt;li&gt;If the predator touches a counter, they need pick it up and “processes” it. The prey caught must be placed in the provided jar.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The predator cannot hold the jar while searching for your prey because prey handling and prey search are mutually exclusive processes.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The predator must pick up the jar, unscrew the lid, drop in the counter, close the lid fully and place the jar back down on the table – all with their eyes closed&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can replicate using a different “predator” (student) to take turns but you should use the same predator across all prey densities.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The goal is to pick up as many counters as possible within a fixed time period.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;panel panel-info&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Discussion
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Why should we not touch the counters after we have placed them on the paper?&lt;/p&gt;
&lt;p&gt;Why can’t we hold the jar while looking for prey?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;identifying-treatments&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Identifying treatments&lt;/h2&gt;
&lt;p&gt;Experiments consist of variables that are &lt;em&gt;controlled&lt;/em&gt; or &lt;em&gt;manipulated&lt;/em&gt;. The manipulated variables are usually predictor variables. Controlled variables are other influential variables that may affect the response variable in ways that might mask or accentuate the effect of the predictor variable on the response variable. We control as many possible variables as possible to make sure what we observe is the true effect of the predictor variable of interest.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If we cannot control a variable, the least we can do is record it as a co-variate and apply more complex stats to account for the additional variable.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;If we don’t keep a comprehensive record, then we risk the co-varying variable &lt;strong&gt;confounding&lt;/strong&gt; the true effect of the predictor variable, adding uncontrolled variation (decreasing the chance of getting a significant P value) and increasing the risk of Type I or II error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We change the prey densities with each run of the experiment because it is the predictor variable. The different values of prey density is our &lt;strong&gt;treatment&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;How many prey densities should you use?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Generally, the more treatments, the better your data may capture some true biological relationship.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But more treatments means more work, time and effort! You need at least two treatments (two observations) to fit a straight line to data but there is no hard or fast rule for deciding these things.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;div class=&#34;panel-title&#34;&gt;
&lt;p&gt;&lt;strong&gt;For the purpose of this practical, we will decide on 5 treatments of prey density. You are free to choose any 5 numbers from a range of 1 to 100.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We will collate the entire class’ data so you don’t have to choose the same numbers. We aim for consistency and balance when designing experiments, so your treatments should be equally spaced out. For example, with equal increments.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;replication-replication-replication&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Replication, replication, replication&lt;/h2&gt;
&lt;p&gt;Replication is really important to increase the accuracy and precision of our data and make sure our results are not due to random chance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Generally, the more replication the better!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again, the trade-off is more work, time, effort or computing power. It also reduces the chances of making a type 1 or type 2 error.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;div class=&#34;panel-title&#34;&gt;
&lt;p&gt;&lt;strong&gt;For the purpose of this practical, we will use 3 replicates of prey density.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Three is usually a minimum number of replications. In a real-world scientific study, you may see higher replications.&lt;/p&gt;
&lt;p&gt;A replication of 3 means that we need to repeat our experiment three times for every value of the treatment. Each replication should be independent of the others. Otherwise you risk &lt;em&gt;pseudoreplication&lt;/em&gt; – not replicating when you think you are.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;identifying-constant-parameters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Identifying constant parameters&lt;/h2&gt;
&lt;p&gt;In our experiment we have 1 predator tapping at a constant rate.&lt;/p&gt;
&lt;p&gt;Our tapping rate &lt;strong&gt;is not the same&lt;/strong&gt; as our unknown parameter search rate (also called area of discovery or attack rate).&lt;/p&gt;
&lt;p&gt;Total foraging time is another pre-determined constant.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;div class=&#34;panel-title&#34;&gt;
&lt;p&gt;&lt;strong&gt;We will use a tapping rate of 1 tap per second. Your assistant will need to call out when to tap for the predator.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We will use a value of 1 minute for total foraging time because we can divide by 1 and it makes our maths easier.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The number of predators, tapping rate and total time are all &lt;em&gt;parameters&lt;/em&gt; and they are &lt;em&gt;constant&lt;/em&gt; in a single experiment. These are constants that does not change – doing so would violate the assumptions of our model, change the experimental design and hypotheses tested, nd turn these parameters into variables.&lt;/p&gt;
&lt;p&gt;Changing these but keeping our hypotheses the same would be introducing additional variation into our data and increase the chance of making a type 2 error. Thus, sometimes parameters become variables; it all depends on the aim of the study.&lt;/p&gt;
&lt;p&gt;Although these constant parameters are unknown to us, we want to know their values to use the analytical model but we need empirical data to fit to our analytical model. We will estimate these values using statistical models next practical to complete the equation:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[H_a=\ \frac{a\times H\times T_{total}}{1+a\times H\times T_h}\]&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;panel panel-danger&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Remember!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Keep it simple! A more complex statistical analysis cannot fix issues arising from a badly designed experiment.
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;hypotheses&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Hypotheses&lt;/h2&gt;
&lt;p&gt;The final but most important thing before we can start collecting data is to formulate our hypotheses.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Another use of statistical models is to explore different scenarios that represent different hypotheses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What happens if our predator was more efficient? What would you change about the experiment to achieve this? How would this aim affect &lt;span class=&#34;math inline&#34;&gt;\(H_a\)&lt;/span&gt; and the estimates of &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(T_h\)&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;For example, vaccines provide a chance for the immune system to “learn” how to eat prey (e.g. viruses). After this experience, immune systems become more efficient at destroying prey.&lt;/p&gt;
&lt;p&gt;We will simulate a different predator behaviour by repeating our counter and jar experiment but this time, the jar does not have a lid so the predator does not need to open and close the lid when they are handing the counters. We will call this new variable &lt;strong&gt;foraging strategy&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;These two experiments are &lt;em&gt;independent&lt;/em&gt;. If we want to compare the foraging properties between the two predators, we need to run the experiment again &lt;strong&gt;keeping everything the same but changing only the variable of interest&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Foraging strategy becomes a &lt;strong&gt;second predictor variable&lt;/strong&gt; that has two possibilities:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Jar with a lid; the original protocol simulating a less experienced predator. We will call this &lt;code&gt;yes_lid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Jar without a lid; the second experiment simulating a more experienced predator. We will call this &lt;code&gt;no_lid&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;div id=&#34;the-null-hypothesis-h0&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The null hypothesis (H0)&lt;/h3&gt;
&lt;p&gt;Remember our research questions is: What are the values of our unknown parameters, handling time and search rate?&lt;/p&gt;
&lt;p&gt;We know from our model that we expect a positive linear relationship between the inverse of prey captured and the inverse of prey density multiplied by total foraging time.&lt;/p&gt;
&lt;p&gt;We have a second question with the addition of foraging strategy: Does foraging strategy affect handling time and search rate?&lt;/p&gt;
&lt;p&gt;We can write a null hypothesis (H0) about the effect of foraging strategy on our model parameters:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;H0: There is no difference in the number of prey eaten with prey density, and in handling time and search rate between foraging strategies&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Remember!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
The alternative hypothesis is the outcome we would expect if there was an effect of the predictor on the response variable. The null hypothesis is what we expect when there is no effect (hence, null). Most of the time we want there to be an effect (what we hope is correct about a biological system).
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-alternative-hypothesis-h1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;The alternative hypothesis (H1)&lt;/h4&gt;
&lt;p&gt;Here’s the most basic alternative hypothesis we can formulate&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;H1: There is a difference in the number of prey eaten with prey density, and in handling time and search rate between foraging strategies&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice, it’s just the opposite of the null hypothesis.&lt;/p&gt;
&lt;p&gt;It’s often more interesting to formulate a more specific alternative hypothesis than just the opposite of the null hypothesis if we expect there’s a &lt;em&gt;direction&lt;/em&gt; to the effect of the new predictor variable on the response variable. Which we do in this practical.&lt;/p&gt;
&lt;div class=&#34;panel panel-info&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Discussion
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Formulate a more specific hypothesis we can use as an alternative hypothesis.&lt;/p&gt;
&lt;p&gt;Hint: What are we aiming to do with this experiment? What sort of detail should be included?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It’s better to be specific in your hypothesis if it is plausible in your biological system. For example, if we are testing whether a vaccine induces an immune response, the resulting immune response can only be positive – a negative immune response (i.e. becoming more susceptible to disease) is implausible (and unfortunate).&lt;/p&gt;
&lt;p&gt;Thus, a simplistic hypothesis would not provide an informative or helpful conclusion if we were testing a new vaccine. If the vaccine made people &lt;em&gt;more susceptible&lt;/em&gt; to disease, we would still accept our alternative hypothesis and reject the null hypothesis even if the &lt;em&gt;direction&lt;/em&gt; of the effect was the opposite to our idealised outcome (improved immunity).&lt;/p&gt;
&lt;p&gt;If you are less certain about your predicted outcomes you could be less specific if you wanted to (e.g. “There is a linear relationship between prey density and number of prey eaten” means the hypothesised relationship could be positive &lt;em&gt;or&lt;/em&gt; negative).&lt;/p&gt;
&lt;div class=&#34;panel panel-warning&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Choose wisely!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;The wording of your hypothesis will dictate the best experimental design and statistical analysis to test your hypothesis! Think carefully about the details.&lt;/p&gt;
&lt;p&gt;Keep your hypothesis as simple as possible to investigate what you are interested in, in your biological system. A more complex hypothesis means a more complex statistical analysis is needed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are no limits to how many hypotheses you have. You could have three hypotheses, a null and two alternatives describing different possible outcomes.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Remember!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
As scientists we never try to “prove” or “disprove” hypotheses. We aim to gather evidence and see whether the evidence &lt;strong&gt;supports&lt;/strong&gt; our hypothesis.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Conducting a simple statistical analysis on a complex hypothesis and experimental design means that there is variation in your data that is not accounted for and could be affecting your response variable – it increases the chances of making a type II error (the meaningful biological relationship is hidden under statistical noise).&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;div class=&#34;panel-title&#34;&gt;
&lt;p&gt;&lt;strong&gt;When in doubt, keep it simple.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Details matter!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Thinking ahead, you should also be careful how you describe the relationship between multiple predictor variables in your hypothesis. Predictor variables can be &lt;strong&gt;independent&lt;/strong&gt; or they can &lt;strong&gt;affect&lt;/strong&gt; each other’s influence on the response variable.&lt;/p&gt;
&lt;p&gt;Consider these sentences with two predictor variables that describe the same relationship with Y, but different relationships between X1 and X2:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Y decreases with X1 and X2 but the relationship does not differ between X1 and X2&lt;/li&gt;
&lt;li&gt;Y decreases with X1 and X2 and the relationship differs between X1 and X2&lt;/li&gt;
&lt;/ul&gt;
These could be a set of hypotheses. How would you expect the graphs of these relationships to look like?
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;section&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;div class=&#34;panel panel-info&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Discussion
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Which of the statistical tests you’ve already learnt would you use to analyse the data if foraging strategy was the only predictor variable? (no prey density)&lt;/p&gt;
What about if prey density was the only predictor variable? (no foraging strategy)
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s the end of Part B. We have designed an experiment and identified our hypotheses.&lt;/p&gt;
&lt;div class=&#34;panel panel-success&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;div class=&#34;panel-title&#34;&gt;
Take a break. Check in with your demonstrator. Stand up. Shake your limbs. Breathe.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Keep it up!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c-collecting-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Part C: Collecting data&lt;/h1&gt;
&lt;p&gt;Planning about collecting data &lt;em&gt;before&lt;/em&gt; collecting any data will save you a lot of headache if you realise halfway through that you’ve made a mistake and have to start over, or that there is a better, more efficient way of organising your data. Planning is everything.&lt;/p&gt;
&lt;p&gt;Scientists often work in teams, which means that several people might collect data. This means that every person must collect data in a consistent way so that all the data can be aggregated. It also means that what information to collect and how it is stored or shared needs to be agreed on before anyone starts. One might also need to consider any laws or regulations for how data is collected (e.g. research ethics, privacy laws).&lt;/p&gt;
&lt;p&gt;Having a standardised data sheet and way of data entry is key to maintain consistency and minimise data loss.&lt;/p&gt;
&lt;div id=&#34;tidy-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Tidy data&lt;/h3&gt;
&lt;p&gt;Tidy data is set of principles for organising data sheets and filling in data. It is designed in a way to make data analysis easier and reduces the amount of work required to &lt;em&gt;prepare&lt;/em&gt; your data for analysis.&lt;/p&gt;
&lt;p&gt;In short:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every column is a variable&lt;/li&gt;
&lt;li&gt;Every row is an observation&lt;/li&gt;
&lt;li&gt;No empty cells&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can read more about tidy data &lt;a href=&#34;https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To paraphrase another quote:&lt;br /&gt;
All data has a place and all data is in its place&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;long-vs-wide-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Long vs Wide data&lt;/h2&gt;
&lt;p&gt;There are two general ways of presenting data in a spreadsheet (or as tabbed data):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Long – Variables are presented in one column, the corresponding value is presented in a second column. This format can be hard to interpret&lt;/li&gt;
&lt;li&gt;Wide – Each variable is a separate column (many columns) and each row is a single observation. This is the way we are collecting data in class (see above criteria)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;As a general rule, aim to add rows (observations) not columns and columns should be independent of each other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Certain types of data analysis require a wide or long format. Sometimes we need to convert the data structure from wide to long or vice versa. We won’t be needing to do this in this module because we are taking care with designing our data sheet to make it easier to analyse our data with minimal post-collection data manipulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;filling-in-a-data-sheet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Filling in a data sheet&lt;/h2&gt;
&lt;p&gt;To help you, there is a data sheet template on blackboard you can fill in.&lt;/p&gt;
&lt;p&gt;Here are the rules we want you to apply here (these are not global standards and may vary elsewhere):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CaSe coNsistEncy in all text
&lt;ul&gt;
&lt;li&gt;All words including column headers should be in lower case, no spaces&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Column headers should be informative
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pathogen_density&lt;/code&gt; or &lt;code&gt;total_time&lt;/code&gt; is good (even the mathematical notation like &lt;code&gt;H&lt;/code&gt; or &lt;code&gt;Th&lt;/code&gt; because it is standardised)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;col1&lt;/code&gt; or &lt;code&gt;pd&lt;/code&gt; is bad – not easy to understand (e.g. acronyms not everyone uses)&lt;/li&gt;
&lt;li&gt;The column headers in the template are pre-filled. You do not need to change them.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No empty cells&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;All cells should have a value. Put &lt;code&gt;NA&lt;/code&gt; if there is no value&lt;/li&gt;
&lt;li&gt;Every cell is a single value&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Do not mix alphanumeric characters (e.g. l3773r5 &amp;amp; numb3r5)
&lt;ul&gt;
&lt;li&gt;Numeric columns should only contain numbers (0-9), no letters. Character strings should only contain letters (a-z), no numbers&lt;/li&gt;
&lt;li&gt;Avoid special characters (e.g. (), ~, &amp;amp;, / etc.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;No spaces (called whitespace in computing)
&lt;ul&gt;
&lt;li&gt;No spaces between words. Use _ instead. E.g. &lt;code&gt;no_spaces&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No spaces before or after words&lt;/li&gt;
&lt;li&gt;This rule doesn’t apply to generic text fields for taking notes, comments or observations. It applies to treatments of a variable if they are described by strings, e.g. &lt;code&gt;no_fertiliser&lt;/code&gt;, &lt;code&gt;yes_fertiliser&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Data is stored in rows and columns in a tidy format&lt;/li&gt;
&lt;li&gt;All data is presented together
&lt;ul&gt;
&lt;li&gt;Not in multiple sheets – use a separate file if you must.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Data is raw
&lt;ul&gt;
&lt;li&gt;Meaning it is not manipulated or processed after being recorded. We will do any data processing in R later&lt;/li&gt;
&lt;li&gt;This is also important to maintain transparency in our workflow&lt;/li&gt;
&lt;li&gt;All data is presented, not summarised. E.g. as means&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Data is presented in a portable csv format
&lt;ul&gt;
&lt;li&gt;Not everyone has access to Excel. What if someone uses Google Sheets? “.xlsx” files are for Excel.&lt;/li&gt;
&lt;li&gt;“.csv” comma separated files are portable across platforms, use less memory and are easy for a computer to read – &lt;strong&gt;save your data as csv&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Are all the necessary columns/information included and in the right order?
&lt;ul&gt;
&lt;li&gt;Do not change the headers of the template&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Info!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;These guidelines are how R reads data from a spreadsheet. Thus, following these best practices will prevent errors when importing data into R.&lt;/p&gt;
&lt;p&gt;We want you to follow these rules &lt;em&gt;exactly&lt;/em&gt; because we will collate your datasheets across the class.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div id=&#34;database-lingo&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Database lingo&lt;/h3&gt;
&lt;p&gt;When data is imported into a computer, the computer will classify it according to the type of data. Here are some common data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;numeric – fields or cells that only contain numbers&lt;/li&gt;
&lt;li&gt;string – strings of characters, i.e. text. Can be letters and numbers. Called &lt;code&gt;character&lt;/code&gt; in R&lt;/li&gt;
&lt;li&gt;date – for dates&lt;/li&gt;
&lt;li&gt;logical – for logical statements, e.g. TRUE/FALSE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are the main data classes characterised by R. There may be other types in other programs (e.g. Access, SQL). In computer science, variables (i.e. columns) in R are called fields, so “predator density” and “total time” are fields.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;do-your-experiment-collect-your-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Do your experiment &amp;amp; collect your data&lt;/h2&gt;
&lt;p&gt;See the table below for an example of column headers with no spaces and all cells with a single value. These are the information you need to provide in your data sheet and the type of data they are:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;50%&#34; /&gt;
&lt;col width=&#34;29%&#34; /&gt;
&lt;col width=&#34;20%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;column_information&lt;/th&gt;
&lt;th&gt;information_type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;total_time&lt;/td&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;in minutes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;prey_density&lt;/td&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;replicate&lt;/td&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;prey_eaten&lt;/td&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;foraging_strategy&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;&lt;code&gt;no_lid&lt;/code&gt; for no lid or &lt;code&gt;yes_lid&lt;/code&gt; for a jar with a lid&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These headers are pre-filled for you in the correct order on the template. You do not need to change anything. The order of columns has to exactly match the order in the table.&lt;/p&gt;
&lt;div class=&#34;panel panel-warning&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Warning!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;R is a computer program so you need to be specific about how you present information to it. For example, you may think having your treatments in individual tables separated by empty rows is sensible and logical but those empty cells mean missing data to a computer – so the computer thinks you haven’t filled in the data properly!&lt;/p&gt;
A space counts as a character so &lt;code&gt;&#34;cat&#34;&lt;/code&gt;, &lt;code&gt;&#34;cat &#34;&lt;/code&gt; and &lt;code&gt;&#34; cat&#34;&lt;/code&gt; would be read as three distinct inputs. This kind of human error can mess up your analysis but is very common.
&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Save your data regularly!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;data-cleaning&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data cleaning&lt;/h2&gt;
&lt;div class=&#34;panel panel-danger&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Danger!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Information that isn’t structured properly will have errors when imported into R. This is why we must always check that data imported properly every time we load data.&lt;/p&gt;
This data will need to be &lt;strong&gt;cleaned&lt;/strong&gt; before it can be analysed. So putting in the effort and attention to detail now will save future you a lot of avoidable stress!
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In data science, data usually needs to be processed before we can use it. The data needs to be checked and validated. Are all the fields entered correctly?&lt;/p&gt;
&lt;p&gt;Attention to detail is important in case it introduces mistakes in our data that may bias our analyses! How much do you trust your fellow students to have followed the previous instructions to the letter?&lt;/p&gt;
&lt;p&gt;Checking and correcting data is called &lt;strong&gt;cleaning&lt;/strong&gt;. We take raw data and clean it up. Sometimes data cannot be fixed (e.g. errors of unknown origin), then the conservative approach is to exclude the observation which is a shame if lots of time and effort (or money) went in to collecting it. Cleaning often takes longer than the actual analysis! It is a real pain! &amp;gt;:(&lt;/p&gt;
&lt;p&gt;In the real world, human-collected data is almost never clean because humans are not robots. In previous years, as high as 95% of submissions for this practical failed the data entry guidelines above. Can you do better?&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;uploading-your-dataset-to-blackboard&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Uploading your dataset to Blackboard&lt;/h2&gt;
&lt;p&gt;Save your data sheet &lt;strong&gt;as a csv file&lt;/strong&gt; (click “Save As” and select csv file type). No other file types are accepted. Your file name should be each of your student numbers and practical session separated by &lt;code&gt;_&lt;/code&gt;. e.g. &lt;code&gt;54321_12345_AM.csv&lt;/code&gt; for the morning session.&lt;/p&gt;
&lt;p&gt;Upload your csv file to the assignment link provided on Blackboard. &lt;strong&gt;Only one person in the group needs to upload a file&lt;/strong&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;final-checklist&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Final checklist&lt;/h1&gt;
&lt;p&gt;Use the following check list to make sure you have done everything you need for this practical.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does your data sheet fully conform to the guidelines above?&lt;/li&gt;
&lt;li&gt;Uploaded your dataset to Blackboard?
&lt;ul&gt;
&lt;li&gt;Correct file type?&lt;/li&gt;
&lt;li&gt;Correct file name?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Done the CA questions?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;panel panel-success&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;div class=&#34;panel-title&#34;&gt;
&lt;p&gt;That’s a wrap! Well done for making it to the end. Check in with your demonstrator.&lt;/p&gt;
Take a break. Stand up. Dance. Breathe.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;To sum up, we:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Composed a theoretic model of a predator-prey interaction with known and unknown parameters. The model describes a set of hypotheses based on assumptions we have made about the predator-prey interaction&lt;/li&gt;
&lt;li&gt;Identified a biological question and hypothesis&lt;/li&gt;
&lt;li&gt;Designed an experiment with adequate treatments and replication&lt;/li&gt;
&lt;li&gt;Conducted an experiment and recorded data&lt;/li&gt;
&lt;li&gt;Filled in a spreadsheet with data following the principles of tidy data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these steps are part of the scientific method and are relevant to your final assessment.&lt;/p&gt;
&lt;p&gt;If everyone follows the instructions, then all your datasets will be comparable and we can combine everyone’s data into one giant (anonymised) dataset. Meaning more data to play with than if you had done it by yourself. The idea is that with a large enough sample size (an entire module of students) we can get a good coverage of numbers between 1 and 100 for prey density values.&lt;/p&gt;
&lt;p&gt;In the next practical we will be analysing the aggregated &amp;amp; anonymised class data set. We will use another type of statistical models (a linear regression) to statistically describe the data we collect and test the hypotheses of our functional response model.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Setup R</title>
      <link>https://jacintak.github.io/teaching/introR/</link>
      <pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/teaching/introR/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#why-programming-and-computing&#34; id=&#34;toc-why-programming-and-computing&#34;&gt;1. Why programming and computing?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-computing-terms&#34; id=&#34;toc-basic-computing-terms&#34;&gt;Basic computing terms&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#drives-folders-files&#34; id=&#34;toc-drives-folders-files&#34;&gt;Drives, Folders &amp;amp; Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#directories&#34; id=&#34;toc-directories&#34;&gt;Directories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-r&#34; id=&#34;toc-why-r&#34;&gt;Why R?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-rstudio&#34; id=&#34;toc-why-rstudio&#34;&gt;Why RStudio?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installing-r-and-rstudio&#34; id=&#34;toc-installing-r-and-rstudio&#34;&gt;2. Installing R and RStudio&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#windows&#34; id=&#34;toc-windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mac&#34; id=&#34;toc-mac&#34;&gt;Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linux&#34; id=&#34;toc-linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chromebook&#34; id=&#34;toc-chromebook&#34;&gt;Chromebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#opening-rstudio-for-the-first-time&#34; id=&#34;toc-opening-rstudio-for-the-first-time&#34;&gt;3. Opening RStudio for the first time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r-structure-and-terminology&#34; id=&#34;toc-r-structure-and-terminology&#34;&gt;4. R structure and terminology&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#installing-more-packages&#34; id=&#34;toc-installing-more-packages&#34;&gt;Installing more packages&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-packages-folder-your-library&#34; id=&#34;toc-the-packages-folder-your-library&#34;&gt;The packages folder (your library)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#my-first-script&#34; id=&#34;toc-my-first-script&#34;&gt;5. My first script&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#loading-packages&#34; id=&#34;toc-loading-packages&#34;&gt;Loading packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commenting&#34; id=&#34;toc-commenting&#34;&gt;Commenting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#working-directories-in-r&#34; id=&#34;toc-working-directories-in-r&#34;&gt;6. Working directories in R&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#changing-working-directories&#34; id=&#34;toc-changing-working-directories&#34;&gt;Changing working directories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rubber-ducks&#34; id=&#34;toc-rubber-ducks&#34;&gt;Rubber ducks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#finding-help&#34; id=&#34;toc-finding-help&#34;&gt;Finding help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final-checklist&#34; id=&#34;toc-final-checklist&#34;&gt;Final checklist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Have a look at this checklist:&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Fundamental skills checklist
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Do you know how to navigate computer directories and get addresses of files or folders?&lt;/li&gt;
&lt;li&gt;Do you have R and RStudio installed and up to date on your computer?&lt;/li&gt;
&lt;li&gt;Do you know what an R package is and how to install them?&lt;/li&gt;
&lt;li&gt;Do you know how to set up working directories and use scripts in RStudio?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you’ve answered no to any of the above questions, then continue on. Some of you may already have R and RStudio installed from previous modules - that’s great! Make sure everything is up to date. You can refer back to this document in the future.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;why-programming-and-computing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. Why programming and computing?&lt;/h1&gt;
&lt;p&gt;We care about teaching you programming and computing skills because they are important skills in the current workforce and are not to be taken for granted. Programming is not just code, it’s a way of thinking and requires problem solving skills that are applicable to other scenarios. You can apply these skills to a range of problems or examples beyond what we will cover in this module.&lt;/p&gt;
&lt;div class=&#34;panel panel-success&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Best Practice
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Learning programming is like learning a language - there is grammar and syntax. It takes time and effort to learn and to practice. Don’t expect to pick it up immediately - take it in small steps and practice as much as you can.
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-computing-terms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic computing terms&lt;/h2&gt;
&lt;p&gt;We don’t always formally learn computing terminology even if we’ve always been using computers. Here are some general computing concepts we will be using and that we expect you to be familiar with:&lt;/p&gt;
&lt;div id=&#34;drives-folders-files&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Drives, Folders &amp;amp; Files&lt;/h3&gt;
&lt;p&gt;In computer science, most commercial operating software are organised in to &lt;strong&gt;drives&lt;/strong&gt;, &lt;strong&gt;directories&lt;/strong&gt;, &lt;strong&gt;folders&lt;/strong&gt; &amp;amp; &lt;strong&gt;files&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Using Windows as example (Macs are similar):
C:/ is a drive (a hard drive). Within the drive, information is sorted in folders (e.g. Documents). Within folders are lists of files which contain information (e.g. my_document.doc). Here, “.doc” is the file extension that tells the computer what kind of file it is and what program to use to read the information (a Word document). Folders within folders are sometimes called sub-folders.&lt;/p&gt;
&lt;p&gt;Basic commercial computers tend to have only one drive but you can have as many drives, folders and files as you want. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C: (the hard drive)
  -&amp;gt; my documents (within drive C)
      -&amp;gt; file A (within my documents)
      -&amp;gt; folder 1 (within my documents)
          -&amp;gt; folder 2 (within folder 1)
              -&amp;gt; file B (within folder 2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;directories&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Directories&lt;/h3&gt;
&lt;p&gt;Directories are the cataloguing system describing where files and folders are stored; also called &lt;strong&gt;addresses&lt;/strong&gt;. Directories take the form of an address like “C:/documents/folder/file” which tells a program to look in this location.&lt;/p&gt;
&lt;p&gt;The concept of folders and files comes from the days before computers where information was written on paper and stored in filing cabinets. Directories are not case sensitive. Case sensitivity means a computer reads capitalised letters (ABC) differently to lowercase letters (abc).&lt;/p&gt;
&lt;div class=&#34;panel panel-success&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Best Practice
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;ul&gt;
&lt;li&gt;We recommend that you organise your files in a structured way. This will make importing data into R easier. For example, have a folder for the module and sub-folders for each of the practicals:&lt;br /&gt;
Documents (folder) -&amp;gt; Biostats (folder) -&amp;gt; Practical 1 (folder) -&amp;gt; Script (file)&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;We don’t recommend using a automatically selected “downloads” folder or your “desktop” because these are not permanent file locations and it can be hard to find files in a messy folder.
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice that the components of the address is separated using a forward slash &lt;code&gt;/&lt;/code&gt;. R can understand &lt;code&gt;/&lt;/code&gt; but does not understand back slash &lt;code&gt;\&lt;/code&gt; because back slashes have a specific meaning in programming. When typing addresses, make sure you use the correct slash.&lt;/p&gt;
&lt;div class=&#34;panel panel-danger&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Danger!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Computers are only as smart as the humans that use them.&lt;/p&gt;
&lt;p&gt;If your code is not working there is most likely a spelling mistake or a typographic error. These human errors are easy to miss but equally easy to fix!&lt;/p&gt;
&lt;p&gt;There is a difference between &lt;code&gt;&#34;&lt;/code&gt;straight&lt;code&gt;&#34;&lt;/code&gt; or “curly”, ‘single’ or “double” quotation marks! R does not recognise curly quotation marks so beware when pasting code from elsewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We navigate through our computer’s directories using Explorer in Windows or Finder in MacOS. You can see the address of a directory in the address bar. We will learn how to use directories in RStudio.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Expectations
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;We expect you to be able to manage your own computer organisation. E.g. know how to open a file, save files in a specific file type and know where you saved files!&lt;/p&gt;
&lt;p&gt;We will ask you to load data from files using addresses so knowing where you saved the file is essential.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;why-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why R?&lt;/h2&gt;
&lt;p&gt;R is just one of &lt;em&gt;many&lt;/em&gt; high-level programming languages used professionally (e.g. C++, Java, Python) but R is specially designed for doing statistics and handling data. Hence R is widely taught in statistic classes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Knowing R is not the same skill as knowing Excel.&lt;br /&gt;
R is far more powerful for doing data science.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;R is an open source software and it is &lt;strong&gt;transparent&lt;/strong&gt;, meaning you can &lt;em&gt;see&lt;/em&gt; how your data is being manipulated. Transparency allows us to check whether the statistics is done correctly and is easier to see how statistical theory is being applied. This is not always possible to see in commercial statistical software or Excel.&lt;/p&gt;
&lt;p&gt;R is also &lt;strong&gt;reproducible&lt;/strong&gt; because R allows you to document your code in &lt;strong&gt;scripts&lt;/strong&gt; that you can give another person to replicate your analysis.&lt;/p&gt;
&lt;p&gt;The traditional option to learning statistics is to do these calculations by hand with pre-calculated statistical reference tables but doing calculations by hand is an arduous task for realistic biological problems.&lt;/p&gt;
&lt;div class=&#34;panel panel-success&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Best Practice
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
One way to practice R is to use it preferentially whenever you can, even in other modules. For example, use R to make graphs for your assignments instead of Excel. Or to calculate simple statistics.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Beyond what we will cover in this module, R can be used to write documents (like this one), interactive apps, websites, or presentations. The possibilities are endless.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;why-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why RStudio?&lt;/h2&gt;
&lt;p&gt;R and RStudio are different software. R is a computer programming language and statistical environment. RStudio is a user interface which has some useful features that makes using R easier. There are other user interfaces for R but RStudio has lots of support.&lt;/p&gt;
&lt;p&gt;RStudio acts as a mediator between you and R:&lt;br /&gt;
user -&amp;gt; input -&amp;gt; RStudio -&amp;gt; R -&amp;gt; RStudio -&amp;gt; output -&amp;gt; user&lt;/p&gt;
&lt;p&gt;It is possible to use R by itself (you may prefer it) but RStudio makes everything a lot easier by providing some organisation and allows you to write &lt;strong&gt;scripts&lt;/strong&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-r-and-rstudio&#34; class=&#34;section level1 tabset&#34;&gt;
&lt;h1&gt;2. Installing R and RStudio&lt;/h1&gt;
&lt;div class=&#34;panel panel-danger&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Danger!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;You need to install R then RStudio &lt;strong&gt;in that order&lt;/strong&gt;! RStudio cannot work without R but R can work without RStudio.&lt;/p&gt;
&lt;p&gt;An analogy: R is the engine of a car and RStudio is the steering wheel - you control the wheel but the engine is what makes the car go forward.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;CRANsite.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Install R from CRAN. &lt;a href=&#34;https://cran.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you prefer instructional videos, here’s a video about installing R &lt;a href=&#34;https://vimeo.com/203516510&#34; class=&#34;uri&#34;&gt;https://vimeo.com/203516510&lt;/a&gt; and RStudio &lt;a href=&#34;https://vimeo.com/203516968&#34; class=&#34;uri&#34;&gt;https://vimeo.com/203516968&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are the instructions for various operating software:&lt;/p&gt;
&lt;div id=&#34;windows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Windows&lt;/h2&gt;
&lt;p&gt;For R:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://cran.r-project.org/bin/windows/base/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/bin/windows/base/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click “Download R” in the blue box for the latest version.&lt;/li&gt;
&lt;li&gt;Save the file, open it and follow the instructions. You can leave everything as the default option. Make sure you’ve installed the program somewhere sensible like the Programs folder in the C:/ drive.&lt;/li&gt;
&lt;li&gt;Open it and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For RStudio:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://rstudio.com/products/rstudio/download/&#34; class=&#34;uri&#34;&gt;https://rstudio.com/products/rstudio/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click download for &lt;strong&gt;RStudio Desktop Open Source Licence&lt;/strong&gt;. The FREE option.&lt;/li&gt;
&lt;li&gt;Install the program somewhere sensible&lt;/li&gt;
&lt;li&gt;Open it and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;mac&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mac&lt;/h2&gt;
&lt;p&gt;For R:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://cran.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click “Download R for (Mac) OS X”&lt;/li&gt;
&lt;li&gt;Save the latest release file (e.g. R-4.0.2.pkg), open it and follow the instructions. You can leave everything as the default option. Make sure you’ve installed the program somewhere sensible.&lt;/li&gt;
&lt;li&gt;Open it and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For RStudio:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://rstudio.com/products/rstudio/download/&#34; class=&#34;uri&#34;&gt;https://rstudio.com/products/rstudio/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click download for &lt;strong&gt;RStudio Desktop Open Source Licence&lt;/strong&gt;. The FREE option.&lt;/li&gt;
&lt;li&gt;Install the program somewhere sensible&lt;/li&gt;
&lt;li&gt;Open it and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;linux&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;p&gt;For R:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://cran.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click “Download R for Linux”&lt;/li&gt;
&lt;li&gt;Click your version of Linux&lt;/li&gt;
&lt;li&gt;Copy and paste the relevant installation code&lt;/li&gt;
&lt;li&gt;Open R and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For RStudio:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://rstudio.com/products/rstudio/download/&#34; class=&#34;uri&#34;&gt;https://rstudio.com/products/rstudio/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click download for &lt;strong&gt;RStudio Desktop Open Source Licence&lt;/strong&gt;. The FREE option.&lt;/li&gt;
&lt;li&gt;Run the relevant code&lt;/li&gt;
&lt;li&gt;Open it and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See &lt;a href=&#34;https://linuxconfig.org/rstudio-on-ubuntu-18-04-bionic-beaver-linux&#34; class=&#34;uri&#34;&gt;https://linuxconfig.org/rstudio-on-ubuntu-18-04-bionic-beaver-linux&lt;/a&gt; for a guide&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;chromebook&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chromebook&lt;/h2&gt;
&lt;p&gt;There are a few options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The easiest option is to run Linux on your computer, then you can install R and RStudio. Try the instructions on &lt;a href=&#34;https://blog.sellorm.com/2018/12/20/installing-r-and-rstudio-on-a-chromebook/&#34; class=&#34;uri&#34;&gt;https://blog.sellorm.com/2018/12/20/installing-r-and-rstudio-on-a-chromebook/&lt;/a&gt; or &lt;a href=&#34;https://github.com/jennybc/operation-chromebook#links-re-r-and-rstudio&#34; class=&#34;uri&#34;&gt;https://github.com/jennybc/operation-chromebook#links-re-r-and-rstudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use RStudio Server&lt;/li&gt;
&lt;li&gt;Use RStudio Cloud &lt;a href=&#34;https://rstudio.cloud/&#34; class=&#34;uri&#34;&gt;https://rstudio.cloud/&lt;/a&gt; (in beta so it may not work)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sorry chromebook users, if your chromebook version is very old then it may not be possible to install R.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;opening-rstudio-for-the-first-time&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;3. Opening RStudio for the first time&lt;/h1&gt;
&lt;p&gt;If you open RStudio you’ll see several windows that organise how information is passed to R and how output from R is presented:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;RStudio-console.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;The default RStudio layout can be customised.&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Left: The big window is the &lt;strong&gt;Console&lt;/strong&gt;. This is the interface with R and is the same as using R on its own. (don’t worry about “Terminal”)&lt;/li&gt;
&lt;li&gt;Top right: This window has three tabs: “Environment” - shows you what information is stored in R’s memory, “History” - shows your code history &amp;amp; “Connections” - don’t worry about this one, it’s for connection to database servers.&lt;/li&gt;
&lt;li&gt;Bottom right: This has several tabs. The most important being “Files” - showing you where RStudio is looking at on your computer &amp;amp; “Plots” - shows you any plots you make in R.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you open a &lt;strong&gt;Script&lt;/strong&gt;, it will appear as a panel in the top left.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Expectations
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;We expect you to be familiar with the RStudio layout and using R within it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can customise the layout, colour scheme, font and font size of RStudio in Options.&lt;br /&gt;
Shortcuts and hotkeys will make your life easier. You can see a list of them under Help. There are only minor differences between Windows and Mac shortcuts (e.g. using Cmd instead of Ctrl).&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;r-structure-and-terminology&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;4. R structure and terminology&lt;/h1&gt;
&lt;p&gt;There are a number of terms you’ll come across when using R. Here are some basic ones:&lt;/p&gt;
&lt;p&gt;R is a statistical environment that consist of &lt;strong&gt;packages&lt;/strong&gt;. Packages are sets of &lt;strong&gt;functions&lt;/strong&gt; that do something to input depending on the instructions described in the function. All your packages are stored in your &lt;strong&gt;library&lt;/strong&gt; (a folder on your computer). When you download R it comes with a basic set of packages as default (&lt;strong&gt;base packages&lt;/strong&gt;). Some of these &lt;strong&gt;base packages&lt;/strong&gt; are loaded every time you open R.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;R is CaSe SenSitiVe. Meaning that &lt;code&gt;library()&lt;/code&gt; is different to &lt;code&gt;Library()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;panel panel-success&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Best Practice
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Keep your R, RStudio and packages up to date. These things are continuously updated by the community. You can update your packages by clicking the Update button under the Packages tab.
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div id=&#34;installing-more-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installing more packages&lt;/h2&gt;
&lt;p&gt;We can customise and expand the functionality of R by installing more packages, which are made by the community and distributed freely. The function to download packages from the Internet is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;&amp;lt;insert name of package&amp;gt;&amp;quot;) # installs a package&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, &lt;code&gt;install.packages(&#34;learnr&#34;)&lt;/code&gt;. Note how non-curly quotation marks are used. Some packages have more functions to do more advanced computing, some contain datasets you can practice with.&lt;/p&gt;
&lt;div id=&#34;the-packages-folder-your-library&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The packages folder (your library)&lt;/h3&gt;
&lt;p&gt;Additional packages are saved to a folder on your computer. We should check that your packages folder is set up properly - especially if you use Windows 10 and sync with OneDrive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is not a problem for Mac users or Windows users that are not logged in to a Microsoft account (check it anyway, in case).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Packages should ideally be downloaded to your local computer and not saved on the cloud (e.g. through OneDrive).&lt;/p&gt;
&lt;p&gt;The constant syncing slows down communication and creates issues between the cloud and R and RStudio. You can see where your packages are saved using &lt;code&gt;.libPaths()&lt;/code&gt; in your console - meaning Library Paths, the address of your package libraries.&lt;/p&gt;
&lt;p&gt;There should be two addresses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One in your Program Files or wherever your computer installed R. E.g. &lt;code&gt;&#34;C:/Program Files/R/R-4.1.1/library&#34;&lt;/code&gt; - this is where all the base R packages are installed (the default packages that come with R)&lt;/li&gt;
&lt;li&gt;One somewhere else on your computer - this is your personal library. When you install new packages from the Internet, they will be saved here.
&lt;ul&gt;
&lt;li&gt;If the second address is on your local computer (e.g. Documents) and not in the cloud then you don’t have to do anything. E.g. &lt;code&gt;&#34;C:/Users/XXXX/Documents/R/win-library/4.1&#34;&lt;/code&gt; is fine&lt;/li&gt;
&lt;li&gt;If the address has OneDrive in the address, then we need to fix that - follow the steps below. E.g. &lt;code&gt;&#34;C:/Users/XXXX/OneDrive/Documents/R/win-library/4.1&#34;&lt;/code&gt; is problematic&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;To change the address of your personal library in Windows 10&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create an empty folder in your Documents folder called &lt;code&gt;R&lt;/code&gt;. Make sure it is not syncing with the cloud. E.g. with the address &lt;code&gt;C:\Users\XXXX\Documents\R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click Start (Windows icon). Type in “environmental variables” [without quotations], you should see “Edit environment variables for your account” in the search results - click that&lt;/li&gt;
&lt;li&gt;Under User variables (the top window) click New&lt;/li&gt;
&lt;li&gt;In the Variable name field type &lt;code&gt;R_LIBS_USER&lt;/code&gt; - exactly like that in all caps&lt;/li&gt;
&lt;li&gt;In the Variable value field enter the address of the package folder (where you made it in step 1) - make sure to use backslash &lt;code&gt;\&lt;/code&gt; not forward slash &lt;code&gt;/&lt;/code&gt;. E.g. &lt;code&gt;C:\Users\XXXX\Documents\R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click OK twice to exit&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;.libPaths()&lt;/code&gt; in R to check that your personal library folder is now listed in &lt;code&gt;R&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Changing default settings in the Control Panel is pretty advanced computing - we don’t expect you to know this. Don’t be afraid to ask for help.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;my-first-script&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;5. My first script&lt;/h1&gt;
&lt;p&gt;The greatest advantage of RStudio is that it allows you to write &lt;strong&gt;scripts&lt;/strong&gt;. These are files ending in &lt;code&gt;.R&lt;/code&gt; that are created and opened by RStudio. R itself cannot open, read or create scripts.&lt;/p&gt;
&lt;p&gt;Scripts are text documents of code that you can save on your computer and open later. Scripts are instructions to give to R, but can also serve as a record of what you’ve done (&lt;strong&gt;transparency&lt;/strong&gt; &amp;amp; &lt;strong&gt;reproducibility&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Before RStudio, we had to save our code in notepad or similar then copy and paste it into R (believe me it was a pain). Now we can do the same but in one click.&lt;/p&gt;
&lt;div class=&#34;panel panel-success&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Best Practice
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;We &lt;strong&gt;strongly recommend&lt;/strong&gt; running code from your script rather than directly from the console because a script will be easier to proof-read and troubleshoot.&lt;/p&gt;
Scripts provide a guide to what you want to enter to R and saves you from having to type out code over and over again.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can create a new script under File -&amp;gt; New file -&amp;gt; Script (Ctrl+Shift+N) or click the white square with a green and white plus sign in the top left corner.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;open-script.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Run your code from scripts, rather than the console. It is easier to spot and fix mistakes!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Activity
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Open your first script. Save it with a meaningful name.&lt;/p&gt;
&lt;p&gt;The numbers along the left hand side of the script refer to &lt;strong&gt;line numbers&lt;/strong&gt;. It helps when referring to a specific function or code snippet to others.&lt;/p&gt;
&lt;p&gt;Let’s add your first functions to your R script!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div id=&#34;loading-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading packages&lt;/h2&gt;
&lt;p&gt;One of the first things you may need in an R script is to load the packages you will use.
Some base R packages are automatically loaded.&lt;/p&gt;
&lt;p&gt;To use a package in R, you need to &lt;strong&gt;call&lt;/strong&gt; it from R’s library. The function to load a package is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(&amp;lt;insert name of package&amp;gt;) # loads a package&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A package we will see later in the module is &lt;code&gt;MASS&lt;/code&gt; which contains datasets you can use at home to practice the statistical tests covered in the lectures. &lt;code&gt;MASS&lt;/code&gt; is a base R package but is not automatically loaded.&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;data()&lt;/code&gt; or &lt;code&gt;data(package = .packages(all.available = TRUE))&lt;/code&gt; will show the list of available built-in datasets. Some of these will be relevant to biological sciences, others are more general.&lt;/p&gt;
&lt;p&gt;Once a package is loaded, entering the name of a dataset will display the entire dataset.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Activity
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Type &lt;code&gt;library(MASS)&lt;/code&gt; into your script.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put your cursor on the line you want to run then press Ctrl+Enter or click Run&lt;/li&gt;
&lt;li&gt;You can run multiple lines by highlighting the relevant lines&lt;/li&gt;
&lt;li&gt;You do not need to highlight a single line to run it&lt;/li&gt;
&lt;li&gt;You can run the entire script from beginning to end using the shortcut Ctrl+Alt+R&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;Run.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Shortcuts will make your life easier.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;Run the &lt;code&gt;library(MASS)&lt;/code&gt; code. You have just &lt;strong&gt;run&lt;/strong&gt; your first &lt;strong&gt;line of code&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;R will load the package &lt;code&gt;MASS&lt;/code&gt; in the background. You can check this in RStudio under the Packages tab where there will now be a tick in the box next to &lt;code&gt;MASS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Try calling one of the &lt;code&gt;MASS&lt;/code&gt; datasets, like &lt;code&gt;Rabbit&lt;/code&gt;, to view the entire dataset. To call a dataset, type in the name and run the code.&lt;/p&gt;
&lt;p&gt;You can see the descriptions of each dataset by calling &lt;code&gt;help(&amp;lt;dataset name&amp;gt;)&lt;/code&gt;, e.g. &lt;code&gt;help(Rabbit)&lt;/code&gt; will tell you it describes the blood pressure of rabbits before and after a drug treatment.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Activity
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;We will use the package &lt;code&gt;learnr&lt;/code&gt; later in the module.&lt;/p&gt;
&lt;p&gt;This code will install the package but there is &lt;em&gt;one mistake&lt;/em&gt; - fix the mistake and install the package: &lt;code&gt;install.packages(learnr)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Install any other packages you are asked to. If it worked you should see something under the Tutorial tab (next to Files, Plots etc.) in RStudio.&lt;/p&gt;
&lt;p&gt;When you’ve installed the package, modify your code to install the package &lt;code&gt;remotes&lt;/code&gt;. You now should have installed two packages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;commenting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Commenting&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;#&lt;/code&gt; (hash/pound) sign indicates comments. Anything after this symbol is not run in R. Commenting is for writing notes or telling the user what is going on.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this is a comment&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;panel panel-success&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Best Practice
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Comment often and in detail. Someone should be able to understand what you did and why. Including your future self.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Activity
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Add at least one comment to your R script describing what your script is doing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;working-directories-in-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;6. Working directories in R&lt;/h1&gt;
&lt;p&gt;Remember directories? Typing out whole addresses starting from the hard drive is annoying. There is a short cut if we use &lt;strong&gt;working directories&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The working directory in R is the default directory R will look in first. We can then use directory addresses that are &lt;strong&gt;relative&lt;/strong&gt; to this default address to call files.&lt;/p&gt;
&lt;p&gt;For example, following this directory structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:
  -&amp;gt; documents
      -&amp;gt; file A 
      -&amp;gt; folder 1 
          -&amp;gt; folder 2 
              -&amp;gt; file B&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the default directory is C:/, then the address for file B is &lt;code&gt;C:/documents/folder1/folder2/fileB&lt;/code&gt;.&lt;br /&gt;
But if we set folder 1 as the working directory &lt;code&gt;C:/documents/folder1/&lt;/code&gt;, then we can use the relative address for the file: &lt;code&gt;folder2/fileB&lt;/code&gt;. This way we don’t have to type &lt;code&gt;C:/documents/folder1/&lt;/code&gt; every time.&lt;/p&gt;
&lt;p&gt;Navigating through directories using addresses can be confusing.&lt;br /&gt;
Another useful command is &lt;code&gt;..&lt;/code&gt; which tells the address to go &lt;em&gt;up&lt;/em&gt; a directory. For example, if folder 2 was the working directory &lt;code&gt;C:/documents/folder1/folder2&lt;/code&gt; and we wanted to access file A, then we need to tell the computer to go up two directories. The relative address for the file is: &lt;code&gt;../../fileA&lt;/code&gt; which means that the computer is now looking in the &lt;code&gt;documents&lt;/code&gt; folder. In contrast, the relative address for file B is even shorter, &lt;code&gt;fileB&lt;/code&gt;, since folder 2 is already the working directory.&lt;/p&gt;
&lt;p&gt;RStudio has a default working directory.&lt;br /&gt;
You can see which working directory is the default directory in RStudio on the “Files” tab. The code to see the working directory in R is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getwd() # GET Working Directory. There is nothing in the brackets&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;panel panel-danger&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Danger!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;When you run code directly from the Console, it will use the RStudio working directory. The working directory of a script by default is the directory the script is saved in - this may be different to the default working directory in the Files tab.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This may be one reason RStudio cannot find a file even with a “correct” relative address and why it’s important to know which working directory your computer is using&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Carefully check that the file address is correct! And that you know where the file is on your computer!&lt;/p&gt;
&lt;p&gt;You may need to change the working directory.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div id=&#34;changing-working-directories&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Changing working directories&lt;/h2&gt;
&lt;p&gt;You can change the default RStudio directory under Tools -&amp;gt; Global Options but on a daily basis, changing the directory temporarily under Session -&amp;gt; Set working directory is more useful.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;setwd.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Setting the working directory using the drop down menu.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The R function to change your working directory is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setwd(&amp;quot;&amp;lt;insert directory address here&amp;gt;&amp;quot;) # SET Working Directory&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, &lt;code&gt;setwd(&#34;~/&#34;)&lt;/code&gt; will change your working directory to your default directory (called Root in computing terms). It is good practice to keep similar files in the same folder. Otherwise you will need to specify the full address when you call a file that exists in another folder and it can get confusing if your files are all over the place.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;setwd2.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Setting the working directory using R code is better for writing scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Expectations
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;We expect you to know how to change working directories and tell R where to find files through relative addresses because that is how we &lt;strong&gt;import&lt;/strong&gt; and &lt;strong&gt;export&lt;/strong&gt; data to and from R.&lt;br /&gt;
Think of directories and addresses like postal addresses - if your address is incorrect the postman (R) wouldn’t know where to go to pick up your parcel (file).&lt;br /&gt;
If R cannot find a file, check the address or the working directory is correct.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;rubber-ducks&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Rubber ducks&lt;/h1&gt;
&lt;p&gt;Problem solving is an important skill. If your code is not working then it’s likely that you’ve made an error somewhere - and that’s OK! It’s all part of learning how to program and there’s no shame in not getting it right the first time. The first thing is to retrace your steps and identify whether you’ve missed a step or misspelled something.&lt;/p&gt;
&lt;p&gt;Learning to problem solve independently is not something you learn by reading or something you can be taught. It is a skill you have to learn by &lt;em&gt;doing&lt;/em&gt;, which means having a go yourself before seeking help from others. Make a habit of asking for help as your last option because for the assessment you will need to use R and troubleshoot independently.&lt;/p&gt;
&lt;p&gt;If you can’t identify the problem, then you need to be able to describe your problem to another person. The other person needs enough information and context to understand what you hope to achieve and what you’ve done so far to suggest a solution. Sometimes the solution isn’t immediately obvious so it may require some trial and error - and that’s all part of the process too! It’s really hard to fix someone’s coding problem without context.&lt;/p&gt;
&lt;p&gt;Talking through your problem is called rubber ducking in computer science - talking through your thought process to a rubber duck may help you realise the solution.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Expectations
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;We expect you to be able to troubleshoot common programming problems on your own. Working things out yourself is also an essential skill, generally.&lt;/p&gt;
&lt;p&gt;99% of all errors are incorrect addresses (working directory not set properly), missing characters, wrong quotation marks, or missing a step in the instructions. Typographic errors and spelling mistakes will be the first things we will check.&lt;/p&gt;
&lt;p&gt;We don’t want you to treat R and coding as a black box (i.e. something you don’t understand how it works). Don’t expect to be given code that works, that defeats the point of learning programming – We want you to be able to write your own code and do data analysis in R independently by the end of this module for any scenario.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;finding-help&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Finding help&lt;/h2&gt;
&lt;p&gt;All R code comes with help files. You can access them from the “Help” tab in RStudio. If you want help on a specific function, then you can type in &lt;code&gt;help(&amp;lt;insert function name here&amp;gt;)&lt;/code&gt;. If you don’t know your exact query, you can search using &lt;code&gt;??&amp;lt;insert term here&amp;gt;&lt;/code&gt; - e.g. &lt;code&gt;??mean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Internet is also great for R help. Websites like StackExchange are help forums for programming. Most likely your question has already been answered on StackExchange. The trick is knowing what to type into Google - meaning you need to know what outcome you want.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;final-checklist&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Final checklist&lt;/h1&gt;
&lt;p&gt;You should now have R and RStudio installed on your computer, installed some packages and updated your R settings if needed.&lt;/p&gt;
&lt;p&gt;You are now ready for the rest of the module.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you know how to navigate computer directories and addresses to find files or folders?&lt;/li&gt;
&lt;li&gt;Do you know how to set up scripts and directories in RStudio?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ve introduced some basic computing concepts: scripts, directories and commenting.&lt;/p&gt;
&lt;p&gt;We’ve also introduced some fundamental R functions. You will need these in the future:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;install.packages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;library&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setwd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Statistical modelling Part 2</title>
      <link>https://jacintak.github.io/teaching/StatsModelsPrac2/</link>
      <pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/teaching/StatsModelsPrac2/</guid>
      <description>


&lt;p&gt;This is a static version of the &lt;code&gt;learnr&lt;/code&gt; tutorials for the Statistical Modelling practicals.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;practical-outline&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Practical outline&lt;/h1&gt;
&lt;p&gt;Welcome to Part 2! We will continue where we left off in Part 1 and progress through a &lt;strong&gt;workflow&lt;/strong&gt; of conducting an experiment and analysing data.&lt;/p&gt;
&lt;p&gt;We will explore &lt;em&gt;two&lt;/em&gt; types of statistical modelling – using linear regression (empiric model) to &lt;strong&gt;parameterise&lt;/strong&gt; our function response model (theoretic model).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learning objectives:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Know how to parameterised a linear regression in R with biological data&lt;/li&gt;
&lt;li&gt;Know how to use linear models to predict new values&lt;/li&gt;
&lt;li&gt;Know how to interpret linear regression output to test hypotheses&lt;/li&gt;
&lt;li&gt;Know what to include in a results paragraph&lt;/li&gt;
&lt;li&gt;Know how to make a graph in R with appropriate labels and caption&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have covered all of these concepts in the lectures or previous practicals. This prac will reinforce and revise these concepts and allows you to practice them under supervision of the demonstrators.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;div class=&#34;panel-title&#34;&gt;
I recommend taking your time and making sure you understand the content and are up to date with the module. This practical synthesises and integrates &lt;em&gt;everything&lt;/em&gt; up to this point. There is no new material here.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are two activities:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;A step by step recap of the lecture content and the practicalities of linear regression in R using an example dataset. Work through the coding exercises and answer the questions &lt;em&gt;in order&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Testing your understanding of the content by applying what you’ve learnt from the example to the data you collected last practical. This is the assessment.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Don’t forget to answer the CA questions in a separate link. There are prompts that will tell you when to answer the questions. The demonstrators aren’t allowed to help you answer the CA directly but they can help you understand the theory parts so that you can answer the CA.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-problem-solve&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How to problem solve&lt;/h1&gt;
&lt;p&gt;We don’t expect you to be expert programmers but we &lt;em&gt;do&lt;/em&gt; expect you to be able and willing to figure things out yourself (problem solving).&lt;/p&gt;
&lt;p&gt;In programming, it’s &lt;em&gt;really easy&lt;/em&gt; to make mistakes that breaks code. That is no means a reflection on you or your ability to code/learn.&lt;/p&gt;
&lt;p&gt;If your code is not working take a moment to &lt;strong&gt;breathe&lt;/strong&gt;. Then check for common, minor errors such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spelling mistakes&lt;/li&gt;
&lt;li&gt;Wrong dataset name&lt;/li&gt;
&lt;li&gt;Wrong variable (column) name&lt;/li&gt;
&lt;li&gt;Missing or wrong quotation mark&lt;/li&gt;
&lt;li&gt;Missing bracket&lt;/li&gt;
&lt;li&gt;Inconsistent cases (e.g. Uppercase)&lt;/li&gt;
&lt;li&gt;Missed a step&lt;/li&gt;
&lt;li&gt;Invalid syntax (e.g. spaces)&lt;/li&gt;
&lt;li&gt;Duplicates of the same function with multiple errors – keep your scripts tidy!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These reading/typing mistakes are the majority of encountered errors. They are not a big deal and are easily corrected.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;div class=&#34;panel-title&#34;&gt;
&lt;p&gt;You can &lt;strong&gt;and should&lt;/strong&gt; easily fix the above mistakes yourself!&lt;br /&gt;
We want you to know how to work problems out independently.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div id=&#34;be-clear-about-your-problem&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Be clear about your problem&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Programming requires a clear idea of what you want to achieve.&lt;br /&gt;
You need to do the thinking for the computer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the hardest thing about troubleshooting someone else’s programming is that we cannot read your mind. When describing your problem, be comprehensive &amp;amp; give context. The more information you provide, the more information and context people have to help you.&lt;/p&gt;
&lt;p&gt;If something isn’t working, can you articulate what you aim to do? What you expect to see if it worked? What you did leading up to this point? And what you think is happening to cause the error?&lt;/p&gt;
&lt;p&gt;This is called the &lt;strong&gt;rubber duck method&lt;/strong&gt; – like you are explaining your problems to a rubber duck. Notice, it’s exactly like the Scientific Method.&lt;/p&gt;
&lt;p&gt;If there’s an error message, read it. Error messages are the computer telling you what’s wrong. Try googling the entire error message to see what other people have said. The entire error message is necessary for context, not just the last bit.&lt;/p&gt;
&lt;div class=&#34;panel panel-success&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Some general advice
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Programming is &lt;strong&gt;trial and error&lt;/strong&gt;. You shouldn’t expect to get it on the first try. And that’s OK – it’s part of the process.&lt;/p&gt;
&lt;p&gt;You’ll often find it’s because you haven’t proof-read your code carefully enough for the mistakes above.&lt;/p&gt;
&lt;p&gt;Practice the basics before you progress to harder stuff or answer the assessment. Take good notes.&lt;/p&gt;
&lt;p&gt;Learning is about the process and about your growth, not the end result or your grade. Apply your knowledge to new scenarios.&lt;/p&gt;
&lt;p&gt;Don’t over-think it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;two-pitfalls-to-avoid&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Two pitfalls to avoid&lt;/h2&gt;
&lt;div class=&#34;panel panel-danger&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Danger!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;&lt;strong&gt;Do not take the code here for granted.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The point of learning computation and programming is to not treat software like a black box where you cannot see inside and you don’t know where the output came from or what they mean.&lt;/p&gt;
&lt;p&gt;Every dataset is different, so code you copy from someone else is not guaranteed to work with your dataset first time. For example, you may be using different column names.&lt;/p&gt;
&lt;p&gt;Think about what the code means and what it’s doing so you can make sure it’s appropriate and correct.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Do not skip questions or exercises to answer your assessment on the fly.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All the activities and quiz questions will give you the knowledge to do the assessment – do these first. Don’t do the assessment questions at the same time as the practical exercises.&lt;/p&gt;
&lt;p&gt;Don’t stress yourself by attempting the assessment unprepared. Demonstrators are not allowed to help you answer the assessment questions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;functional-responses-recap&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Functional responses recap&lt;/h1&gt;
&lt;p&gt;Remember, in the previous practical we asked the question “How does prey density and foraging strategy affect the number of prey captured in a predator-prey scenario?”.&lt;/p&gt;
&lt;p&gt;We have three variables of interest in our experimental design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prey_captured&lt;/code&gt;: The response variable, continuous numeric variable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prey_density&lt;/code&gt;: The first predictor variable, continuous numeric variable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foraging_strategy&lt;/code&gt;: The second predictor variable, categorical variable with two sub-groups: &lt;code&gt;no_lid&lt;/code&gt; and &lt;code&gt;yes_lid&lt;/code&gt; for whether the jar had a lid or not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We derived a mathematical expression of a predator-prey interaction (Type II model) called a functional response by turning our assumptions about a predator prey interaction into mathematical equations. You can refresh your memory from &lt;code&gt;vignette(&#34;functional_responses&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Type II model looks like this:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://jacintak.github.io/teaching/StatsModelsPrac2/index_files/figure-html/funct_resp-1.png&#34; alt=&#34;Type II functional response of an predator-prey response&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
(#fig:funct_resp)Type II functional response of an predator-prey response
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The equation of the model is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[H_a=\ \frac{a\times H\times T_{total}}{1+a\times H\times T_h}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The model is not linear.&lt;/p&gt;
&lt;p&gt;The aim of the practical was to &lt;strong&gt;find the unknown values of search rate, &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; and handling time, &lt;span class=&#34;math inline&#34;&gt;\(T_h\)&lt;/span&gt;&lt;/strong&gt; and we hypothesised that these values will change depending on the type of jar used (foraging strategy).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The process of estimating the value of unknown parameters in a statistical model is called &lt;strong&gt;parameterising&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Non-linear methods of parameterising these equations are beyond the scope of this module. But we can use algebra to make this equation linear and therefore we can use linear regression to get an estimate for the unknown parameters (see &lt;code&gt;vignette(&#34;TypeII_models&#34;)&lt;/code&gt; to refresh your memory).&lt;/p&gt;
&lt;p&gt;We then get a model:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\frac{1}{H_a}=\ \frac{1}{a}\times\frac{1}{H\times T_{total}}+\frac{T_h}{T_{total}}\]&lt;/span&gt;
This model has the form &lt;span class=&#34;math inline&#34;&gt;\(Y = \beta_0 + \beta_1 X\)&lt;/span&gt; of a general linear model.&lt;/p&gt;
The graph looks like this:
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:tyepe2line&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/teaching/StatsModelsPrac2/index_files/figure-html/tyepe2line-1.png&#34; alt=&#34;Linearised type II functional response of an predator-prey response&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Linearised type II functional response of an predator-prey response
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now we can fit a linear model and find the values of search rate (&lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;) and handling time (&lt;span class=&#34;math inline&#34;&gt;\(T_h\)&lt;/span&gt;) from the slope and intercept of the linear regression.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ \beta_1 = \frac{1}{a}\]&lt;/span&gt;
and
&lt;span class=&#34;math display&#34;&gt;\[ \beta_0 = \frac{T_h}{T_{total}}\]&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;which-linear-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Which linear model?&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-or-multiple-regression&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simple or multiple regression?&lt;/h2&gt;
&lt;p&gt;In the lectures, we saw that the structure of the appropriate linear model to fit depends on the characteristics of the data, the experimental design and the hypothesis. We looked at cases with one predictor variable (simple regression) and with two predictor variables (multiple regression).&lt;/p&gt;
&lt;p&gt;If we did a simple linear regression with one predictor variable, we would have ignored foraging strategy meaning we have &lt;strong&gt;pooled&lt;/strong&gt; observations for foraging strategy.&lt;/p&gt;
&lt;p&gt;By pooling foraging strategy, any variation in the data generated by foraging strategy is &lt;strong&gt;unaccounted for&lt;/strong&gt;. Unaccounted variation may increase our chance of making a Type I or II error because foraging strategy &lt;strong&gt;confounds&lt;/strong&gt; the effect of prey density.&lt;/p&gt;
&lt;p&gt;Phrased differently, the effect of prey density on numbers of prey captured is &lt;strong&gt;masked&lt;/strong&gt; by the effect of foraging strategy. Thus, in this case, using a simple linear regression on a dataset with two or more predictor variables is not the best course of action for explaining as much variation in the data as we can.&lt;/p&gt;
&lt;p&gt;If we want to see whether using a lid has an effect on our predator-prey interaction response, we need to include the variable in our linear model &lt;em&gt;as well as our original predictor variable, prey density&lt;/em&gt;. We need a multiple linear regression model.&lt;/p&gt;
&lt;div class=&#34;panel panel-warning&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Plan ahead!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Confounding variation from doing a test that is too simple for the experimental design can drastically change the conclusion of the analysis! See &lt;strong&gt;Simpson’s paradox&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;additive-or-multiplicative-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Additive or multiplicative model?&lt;/h2&gt;
&lt;p&gt;There are also two types of multiple regression: additive and interactive/multiplicative.&lt;/p&gt;
&lt;p&gt;We could fit an interactive model to our data if we were more interested in finding a mathematical description of our data that &lt;strong&gt;explains the most variation in prey captured using the simplest model possible&lt;/strong&gt; (model parsimony). So using multiplicative models are instead a statistical representation of the data, rather than a theoretic model.&lt;/p&gt;
&lt;p&gt;Both are types of statistical models and valid in their own right but in this case an interaction doesn’t match the goals of constructing a theoretic model of predator-prey interactions from fundamental observations.&lt;/p&gt;
&lt;p&gt;Foraging strategy determines the amount of prey captured but does not affect the number of prey present. And prey density determines the number of prey captured but does not influence the foraging strategy. This is based on our assumptions about the predator-prey interaction – the predator does not change foraging behaviour.&lt;/p&gt;
&lt;p&gt;If the predator changed their foraging behaviour then there would be an interaction between the two predictor variables. This could be realistic. For example, animal predators might use different foraging strategies under different prey densities or they may switch to another strategy when prey density reaches a certain threshold. In fact, this is a Type III functional response.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;hypotheses&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Hypotheses&lt;/h2&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Info!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;The wording of the hypothesis will dictate the appropriate linear model, statistical test, and our expectations about the graph.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Following the Type II model, the number of prey captured will increase with prey density until there are too many prey for a predator to handle and the number of prey captured will plateau.&lt;/p&gt;
&lt;p&gt;Following the linearised Type II model, we expect a positive relationship between the two predictors.&lt;/p&gt;
&lt;p&gt;We also had predictions about how foraging strategy affected the parameters of the Type II model – handling time and search rate (or attack rate).&lt;/p&gt;
&lt;p&gt;Our hypotheses are:&lt;/p&gt;
&lt;p&gt;H0: The number of prey captured increases with prey density but does not differ between foraging strategies&lt;br /&gt;
H1: The number of prey captured increases with prey density and is higher with the more efficient foraging strategies (shorter handling time) but the search rate does not vary&lt;/p&gt;
&lt;div class=&#34;panel panel-info&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Discussion
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;How would your data look like to support these hypotheses?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;additive-linear-models&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Additive linear models&lt;/h1&gt;
&lt;p&gt;As we saw in the lectures, the theory behind all linear regressions is the same no matter how many predictor variables or interactions you have.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Variance in &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; is partitioned sequentially and in alphabetical order (unless otherwise asked to) in R&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To practice fitting linear regression in R, we will use the dataset &lt;code&gt;crabs&lt;/code&gt; – see &lt;code&gt;help(crabs)&lt;/code&gt; for more information. You can also check the data using &lt;code&gt;str(crabs)&lt;/code&gt;. This dataset is provided in R in the package &lt;code&gt;MASS&lt;/code&gt;. I have already loaded the data for you within the tutorial so you don’t need to do it but you will need to load it via &lt;code&gt;library(MASS)&lt;/code&gt; if you want to try code in a script. What happens in the interactive tutorial is independent of R’s Environment.&lt;/p&gt;
&lt;p&gt;There are three variables we will look at (carapace is the zoological term for shell):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CL&lt;/code&gt;: Carapace length (mm) – our response variable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CW&lt;/code&gt;: Carapace width (mm) – our predictor variable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sp&lt;/code&gt;: Colour morph (&lt;code&gt;B&lt;/code&gt; or &lt;code&gt;O&lt;/code&gt; for blue or orange crabs)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Info!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
The code we use here can be applied to any dataset. You can try it in your own time. For example, &lt;code&gt;airquality&lt;/code&gt; has environmental data or the Penguins &lt;a href=&#34;https://towardsdatascience.com/penguins-dataset-overview-iris-alternative-9453bb8c8d95&#34;&gt;dataset&lt;/a&gt; about penguins can be downloaded as a package.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We can ask the question “Does the relationship between shell length and width differ between colour morphs?”. We can also phrase this as “Does the relationship between shell length and width depend on the colour of the crab?”.&lt;/p&gt;
&lt;p&gt;Compared to a simple linear regression with one predictor variable (e.g. &lt;code&gt;CW&lt;/code&gt;), this is a more &lt;strong&gt;complex question&lt;/strong&gt; needing a more complex experimental design (two predictor variables) and thus a more &lt;strong&gt;complex statistical analysis&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Info!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Multiple regression allows us to ask “Does including information about our predictor variables improve our ability to detect/understand trends in our response variable?”
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;“Bigger” crabs are expected to be larger in width and length so we expect a positive relationship between these variables. Whether this relationship is &lt;em&gt;also&lt;/em&gt; dependent on the colour of the crab is what we can find out!&lt;/p&gt;
&lt;p&gt;We don’t hypothesise colour morphs to influence carapace width, i.e. crabs don’t change colour as they get bigger, so an additive model fits with our understanding of the biological system (assuming the growth rate of both colours are the same).&lt;/p&gt;
&lt;p&gt;It always helps to see a graph of the data:
&lt;img src=&#34;https://jacintak.github.io/teaching/StatsModelsPrac2/index_files/figure-html/crab-graph-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;the-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The model&lt;/h2&gt;
&lt;p&gt;Mathematically, an additive model is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[Y = \beta_0 + \beta_1 X_1 + \beta_2 X_2 + \varepsilon\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Where &lt;span class=&#34;math inline&#34;&gt;\(X_1\)&lt;/span&gt; is our first predictor variable and &lt;span class=&#34;math inline&#34;&gt;\(X_2\)&lt;/span&gt; is our second predictor variable.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; are the regression coefficients (also called terms) describing the variation in &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; attributed to each source of variation. The additive model has three terms that are unknown to us: &lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta_2\)&lt;/span&gt;. R’s job is to find the values of these coefficients from empirical data.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\varepsilon\)&lt;/span&gt; is the random error (residual error) not accounted for by the model – it’s always part of the equation but it’s often ignored, much like &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; in integration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In additive models, the effect of one predictor on the response variable is &lt;strong&gt;additive&lt;/strong&gt; or &lt;strong&gt;independent&lt;/strong&gt; of the other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is &lt;strong&gt;no interaction&lt;/strong&gt; between the predictor variables colour or shell width (i.e. &lt;span class=&#34;math inline&#34;&gt;\(\beta_3 = 0\)&lt;/span&gt;). Thus the two fitted lines have the same slope (&lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt;) – hence they are sometimes called &lt;em&gt;fixed slopes&lt;/em&gt; models. The model is described as a “&lt;strong&gt;reduced&lt;/strong&gt;” model because it does not contains all possible terms – all predictor variables and all possible combinations of their interactions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interactive models are considered “&lt;strong&gt;full&lt;/strong&gt;” models if they contain all interactions in a fully crossed design.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To estimate the &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; coefficients, the ordinary least squares regression splits the dataset into its predictor variables and fits a model to each component – this is called &lt;strong&gt;partial regression&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The goal is to assign as much variation in the data as possible to each predictor variable. This process requires a baseline variable that sets the contrast for assigning variation (i.e. what &lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt; represents).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dummy variables&lt;/strong&gt; are used with a &lt;strong&gt;categorical predictor&lt;/strong&gt; to set the baseline for the ordinary least squares regression. Since Blue is alphabetically before Orange, Blue is the baseline contrast used in the partial regression process and assigned the dummy variable 0 in &lt;code&gt;crabs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thus for a blue crab, the dummy variable is 0:&lt;br /&gt;
&lt;span class=&#34;math display&#34;&gt;\[CL = \beta_0 + \beta_1 CW + \beta_2 sp \times 0 + \varepsilon\]&lt;/span&gt;
simplifies to &lt;span class=&#34;math inline&#34;&gt;\(CL = \beta_0 + \beta_1 CW\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;An orange crab gets a dummy variable of 1, thus:
&lt;span class=&#34;math display&#34;&gt;\[CL = \beta_0 + \beta_1 CW + \beta_2 sp \times 1 + \varepsilon\]&lt;/span&gt;
becomes &lt;span class=&#34;math inline&#34;&gt;\(CL = (\beta_0 + \beta_2) + \beta_1 CW\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In effect, we are fitting &lt;em&gt;two&lt;/em&gt; lines to this data – one for each sub-category of colour. The technical term for each of these lines is a &lt;strong&gt;partial regression line&lt;/strong&gt;. We can generalise these regression lines as:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ shell \space length  = \beta_{0_{colour}} + \beta_{1} shell \space width + \varepsilon\]&lt;/span&gt;
Now the intercept parameter (&lt;span class=&#34;math inline&#34;&gt;\(\beta_{0_{colour}}\)&lt;/span&gt;) specifies that it is dependent on the colour of the crab as we showed above:
&lt;span class=&#34;math display&#34;&gt;\[\beta_{0_{Blue}} = \beta_0\]&lt;/span&gt;
&lt;span class=&#34;math display&#34;&gt;\[\beta_{0_{Orange}} = \beta_0 + \beta_2\]&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;characters-or-factors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Characters or factors?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Categorical data is are called &lt;strong&gt;factors&lt;/strong&gt; and the sub-groups are called &lt;strong&gt;levels&lt;/strong&gt; in R&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because R needs to attribute variation to every sub-group, the order of the subgroups is relevant. R shows you the &lt;strong&gt;difference&lt;/strong&gt; between levels of a factor (&lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;). The default order is in &lt;strong&gt;alphabetical order&lt;/strong&gt; of the levels.&lt;/p&gt;
&lt;p&gt;This is relevant to the experimental design too. It may be helpful to think of the first level of a treatment and the first intercept (&lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt;) and slope estimate (&lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt;) as the control of your experiment because R uses these coefficients as the &lt;strong&gt;baseline&lt;/strong&gt; for hypothesis tests.&lt;/p&gt;
&lt;p&gt;For example, the jar without a lid treatment is coded as &lt;code&gt;no_lid&lt;/code&gt; and the jar with a lid treatment is coded as &lt;code&gt;yes_lid&lt;/code&gt;. We can also think of jar with a lid as our experimental control (a less efficient predator) and the jar without a lid as our experimental treatment (a more efficient predator). Our “control” group (&lt;code&gt;yes_lid&lt;/code&gt;) is alphabetically after &lt;code&gt;no_lid&lt;/code&gt;, so we have the reverse scenario.&lt;/p&gt;
&lt;div class=&#34;panel panel-danger&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Remember!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;The order will affect how R parameterises our model. And thus will change the interpretation of the output! But not always the conclusion.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;By default, foraging strategy is classified as a &lt;strong&gt;character&lt;/strong&gt; vector because it is a field with strings (letters). Characters do not identify sub-groups thus there is no structure to this variable – they are simply a vector of strings.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Info!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Both characters and factors are ways R stores categorical data, the difference being that factors have a specific order.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To fit a linear regression, R converts the &lt;code&gt;foraging_strategy&lt;/code&gt; variable from a character vector to a factor and the order of levels is assigned alphabetically. R will use &lt;code&gt;no_lid&lt;/code&gt; as the baseline contrast for &lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt;. We just need to keep the order in mind when parameterising.&lt;/p&gt;
&lt;p&gt;We will not do anything about this for now – in this case, it doesn’t change our conclusions.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Info!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;If you needed to change the order of the sub-groups you will need to change the variable to a factor (&lt;code&gt;as.factor&lt;/code&gt;) and define the order of levels using &lt;code&gt;levels&lt;/code&gt;:&lt;br /&gt;
&lt;code&gt;data$var &amp;lt;- as.factor(data$var, levels = c(&#34;level1&#34;, &#34;level2&#34;)&lt;/code&gt;.&lt;/p&gt;
If we did this, then the regression uses &lt;code&gt;yes_lid&lt;/code&gt; as the baseline (&lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt;) and the dummy variables are reversed but the parameterised model is the same.
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;fitting-the-model-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fitting the model in R&lt;/h2&gt;
&lt;p&gt;An additive linear regression in R with two predictor variables follows the general formula:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lm(Y ~ X1 + X2, data)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X1&lt;/code&gt; &amp;amp; &lt;code&gt;X2&lt;/code&gt; are the two predictor variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; indicates the relationship between the two predictors: a plus sign for an &lt;strong&gt;additive&lt;/strong&gt; relationship&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lm&lt;/code&gt; stands for linear model&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y&lt;/code&gt; is our response variable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; is the name of our dataset&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt; indicates a relationship between our response and predictor variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In &lt;code&gt;crabs&lt;/code&gt;, our response variable is &lt;code&gt;CL&lt;/code&gt; and our predictor variables are &lt;code&gt;CW&lt;/code&gt; and &lt;code&gt;sp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Did you get some output when you ran the model?&lt;br /&gt;
It should tell us two things:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Call is the formula used. It should be the same as the linear model code&lt;/li&gt;
&lt;li&gt;Coefficients are the estimated coefficients of the model. There should be three coefficients called &lt;code&gt;(Intercept)&lt;/code&gt;, &lt;code&gt;CW&lt;/code&gt; &amp;amp; &lt;code&gt;spO&lt;/code&gt;. From left to right they are: &lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta_2\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can already substitute the estimated &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; coefficients into the full expression of the linear model &lt;span class=&#34;math inline&#34;&gt;\(Y = \beta_0 + \beta_1 X_1 + \beta_2 X_2 + \varepsilon\)&lt;/span&gt; for the crabs dataset as:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[CL = -0.67 + 0.88 CW + 1.09 sp + \varepsilon\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;But let’s look at the coefficients in more detail starting with the first two coefficients. The interpretation for these coefficients is the same as simple linear regression. There’s the intercept &lt;code&gt;(Intercept)&lt;/code&gt; (&lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt;) and there’s the slope &lt;code&gt;CW&lt;/code&gt; (&lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt;).&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Info!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Coefficients are named based on what variation in &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; they contribute to. So the slope coefficient is called &lt;code&gt;CW&lt;/code&gt; because it how much shell length changes with shell width.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Remember we are expecting &lt;em&gt;two&lt;/em&gt; lines in our model – one for blue crabs and one for orange crabs.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;parameterising-our-partial-regression-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Parameterising our partial regression model&lt;/h2&gt;
&lt;p&gt;Because the first two coefficients are for blue crabs, we already have our equation for blue crabs with &lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt;.&lt;br /&gt;
Parametrised equation for blue crabs:&lt;br /&gt;
&lt;em&gt;blue crab shell length&lt;/em&gt; = -0.7 + 0.9 &lt;em&gt;shell width&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Halfway there! Now for the orange crabs!&lt;/p&gt;
&lt;p&gt;Since we expect the slope of the regression for orange crabs is the same as blue crabs, we already know the value of &lt;span class=&#34;math inline&#34;&gt;\(\beta_{1}\)&lt;/span&gt; is 0.9. But we need to manually calculate the intercept for orange crabs.&lt;/p&gt;
&lt;p&gt;The estimate for &lt;code&gt;spO&lt;/code&gt; is &lt;span class=&#34;math inline&#34;&gt;\(\beta_2\)&lt;/span&gt;, which is the &lt;strong&gt;difference in the intercept between orange crabs and blue crabs&lt;/strong&gt;. Or the additional variation in shell length attributed to colour, while pooling for shell width.&lt;/p&gt;
&lt;p&gt;To calculate the intercept for orange crabs we need to add the estimated coefficient of the intercept for blue crabs (&lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt;) with the difference (&lt;span class=&#34;math inline&#34;&gt;\(\beta_2\)&lt;/span&gt;): &lt;span class=&#34;math inline&#34;&gt;\(\beta_{0_{Orange}} = \beta_0 + \beta_2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now that you know how to parameterise the linear regression for orange crabs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Intercept)          CW         spO 
       -0.7         0.9         1.1 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should be able to parameterise the linear model for orange crabs.&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Info!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;R shows the difference between parameter estimates so you need to calculate the correct values. They are the partial regression coefficients that show the change in the response variable with one predictor variable &lt;strong&gt;while holding all other predictor variables constant&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, using the mean value of orange crabs to estimate coefficients of blue crabs and vice versa, because the mean value of each of these groups represents the null hypothesis.&lt;/p&gt;
In other words, if we were to accept the null hypothesis that there is no relationship between shell width and colour on shell length, then the slope of the line should be 0 and the intercept of the line should be the sample mean of shell length (ignoring shell width and colours).
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;predicting-new-values&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Predicting new values&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;One application of statistical models is to make predictions about outcomes under new conditions&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can calculate the value of the response variable from any given value of the predictor variable.&lt;/p&gt;
&lt;p&gt;For example, we can use the parametrised equation of our model &lt;span class=&#34;math inline&#34;&gt;\(CL = -0.7 + 0.9 CW + 1.1 sp\)&lt;/span&gt; and the dummy variables 0 for Blue crabs or 1 for Orange crabs to work out the length of a crab for any value of shell width.&lt;/p&gt;
&lt;p&gt;If a blue crab is 10 mm wide, what is its predicted shell length?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We are told the value of shell width (10 mm)&lt;/li&gt;
&lt;li&gt;We know the parameterised linear model:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[CL = -0.7 + 0.9 CW + 1.1 sp\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can substitute the value of 10 for CW:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[CL = -0.7 + 0.9 \times 10 + 1.1 sp\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We know the dummy variable for blue crabs is 0 because it is the baseline level (assigned alphabetically) so we can substitute that into sp:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[CL = -0.7 + 9 + 1.1 \times 0\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;and solve for length:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[CL = -0.7 + 9\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[CL = 8.3 mm\]&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Or we can use our two partial regression models to predict the shell length of blue or orange crabs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Blue crab shell length&lt;/em&gt; = -0.7 + 0.9 &lt;em&gt;shell width&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Orange crab shell length&lt;/em&gt; = 0.4 + 0.9 &lt;em&gt;shell width&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You should now be able to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the model to predict the carapace length of a blue or orange crab for a given carapace width.&lt;/li&gt;
&lt;li&gt;Use the model to calculate the difference in carapace length between blue and orange crabs for a given carapace width.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;evaluating-hypotheses&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Evaluating hypotheses&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember that statistical models may represent hypotheses&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are the hypotheses:&lt;/p&gt;
&lt;p&gt;H0: Carapace length increases with carapace width but does not differ between colour morphs&lt;br /&gt;
H1: Carapace length increases with carapace width and differs between colour morphs but the rate of size increases does not vary between colours&lt;/p&gt;
&lt;p&gt;We can test these hypotheses using the linear regression. It’s important to understand these hypotheses graphically. Look at the following graphs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/teaching/StatsModelsPrac2/index_files/figure-html/hypo-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Which of the graphs above represents the null hypothesis about crab size?&lt;/li&gt;
&lt;li&gt;Which of the graphs above represents the alternative hypothesis about crab size?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice how the slopes of all the lines are the same. We expected this based on the additive model maths.&lt;/p&gt;
&lt;p&gt;We want to know if the lines have different &lt;em&gt;intercepts to each other&lt;/em&gt;. Phrased differently, we need to test whether &lt;strong&gt;the difference in the intercept is different to 0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We could have more hypotheses that also test whether there &lt;em&gt;is&lt;/em&gt; a positive relationship in the data or not (i.e. is the slope = 0?) but the specific wording of our hypotheses above do not do so.&lt;/p&gt;
&lt;p&gt;We don’t just need to know the difference, we need to statistically test this; whether an estimated/observed value of a sample is significantly different to a known population value. You’ve learnt about this kind of test already.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Can you remember which coefficient in the additive model will test this hypothesis?&lt;/li&gt;
&lt;li&gt;Which of the statistical tests you’ve already learnt in this module would test whether our observed slope is significantly different to 0?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;panel panel-danger&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Remember!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Statistical significance is not the same thing as biological significance.&lt;/p&gt;
A relationship between two purely randomly generated numbers can be statistically significant but have no biological meaning. A biologically meaningful relationship can be statistically non-significant.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;R automatically tests the following hypotheses as part of &lt;code&gt;lm&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;H0: The difference is equal to 0&lt;br /&gt;
H1: The difference is not equal to 0&lt;/p&gt;
&lt;p&gt;To see more information about our linear regression we need to ask to see the &lt;code&gt;summary&lt;/code&gt; of our linear regression by placing our &lt;code&gt;lm&lt;/code&gt; function within &lt;code&gt;summary(lm())&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you run &lt;code&gt;summary&lt;/code&gt; you get a lot of information. Let’s break it down from top to bottom:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call is the formula used to do the regression&lt;/li&gt;
&lt;li&gt;Residuals are the residuals of the ordinary least squares regression&lt;/li&gt;
&lt;li&gt;Coefficients are the estimated coefficients we saw earlier &lt;em&gt;plus&lt;/em&gt; the standard error of these estimates, a t-value from a &lt;strong&gt;one sample t-test&lt;/strong&gt; testing whether the estimated coefficient is significantly different to 0 and the P value of this t-test&lt;/li&gt;
&lt;li&gt;Some additional information about the regression at the bottom which we can ignore for now&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the output you should be able to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify the correct t-statistic&lt;/li&gt;
&lt;li&gt;Make an inference about the one-sample t-test&lt;/li&gt;
&lt;li&gt;Accept or reject your null hypothesis&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Info!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;The one sample t-test is done on each coefficient. The hypotheses are the same. The test can also be phrased as “Does the coefficient explain a significant amount of additional variation in &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;?”.&lt;/p&gt;
For example, if we ran a multiplicative model with a &lt;span class=&#34;math inline&#34;&gt;\(\beta_3\)&lt;/span&gt; term, then the t-test will determine whether there is an interaction or not. If the t-test was not significant, then the interaction does not explain more variation and an additive model without an interaction is more appropriate. This is an example of model selection.
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;putting-results-into-sentences&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Putting results into sentences&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Statistical analyses need to be interpreted into full sentences, within a results section&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Always place your statistical analysis into the wider context of your hypotheses and aims. Demonstrate your understanding by justifying your choices and interpreting the output.&lt;/p&gt;
&lt;p&gt;ANOVA tables should be nicely formatted in a proper table with the correct column names. Don’t copy directly from R as is.&lt;/p&gt;
&lt;p&gt;When reporting summary statistics, describe an average with a measure of spread. You need to give a sense of the distribution of points so means on their own are not that informative. Include the range or standard error or standard deviation. E.g. “Mean carapace length was &lt;span class=&#34;math inline&#34;&gt;\(32.1 \pm 0.5\)&lt;/span&gt; (mean &lt;span class=&#34;math inline&#34;&gt;\(\pm\)&lt;/span&gt; standard error)”.&lt;/p&gt;
&lt;div class=&#34;panel panel-warning&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Be comprehensive!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;R output &lt;strong&gt;should not&lt;/strong&gt; be presented as a figure or screenshots. Do not copy and paste directly into a report – this output is meaningless to a reader because they do not know your data or your workflow like you do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P values should never be reported on their own&lt;/strong&gt; – they are also meaningless without the test statistic and degrees of freedom used to calculate them. P value of what?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A results sentence needs at a &lt;em&gt;minimum&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main result&lt;/li&gt;
&lt;li&gt;The name of the statistical test&lt;/li&gt;
&lt;li&gt;The test statistic and degrees of freedom
&lt;ul&gt;
&lt;li&gt;Df can be written as a subscript to the test statistic (e.g. &lt;span class=&#34;math inline&#34;&gt;\(t_{14}\)&lt;/span&gt;) or reported as df = 14&lt;/li&gt;
&lt;li&gt;F statistic need the degrees of freedom for the within &amp;amp; among error. E.g. &lt;span class=&#34;math inline&#34;&gt;\(F_{1,25}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The P value
&lt;ul&gt;
&lt;li&gt;Really small or large P values can be summarised. E.g. P &amp;lt; 0.001. Don’t write out many decimal places&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Reference to any relevant figures or tables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the above information is given to you in &lt;code&gt;summary&lt;/code&gt; or the ANOVA table. The degrees of freedom of a linear regression are found at the bottom of &lt;code&gt;summary&lt;/code&gt; (&lt;code&gt;Residual standard error&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;A sentence does not need to include &lt;em&gt;significant&lt;/em&gt; in the wording. Statistical significance or not is already implied by the wording of the sentence and the inclusion of the P value. The term can also be ambiguous in meaning.&lt;/p&gt;
&lt;div class=&#34;panel panel-danger&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Danger!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;There are many ways that P values can be biased or manipulated to give small or large values.&lt;/p&gt;
&lt;p&gt;People’s obsession over getting significant P values has driven a rise of unethical statistical practices (called P hacking or P fishing) which we do not want you as scientists in training to fall into the habit of.&lt;/p&gt;
The point of statistical testing is to understand trends in data. Not to get a significant P value. Null or non-significant results are valid results.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Check any published scientific paper to see how they’ve reported their results. Or any guide to scientific writing.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;practice-exploring-a-type-ii-functional-response&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Practice: Exploring a Type II functional response&lt;/h2&gt;
&lt;p&gt;Remember we had some unknown parameters in our predator-prey functional response model? The search rate, &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;, and the handling time, &lt;span class=&#34;math inline&#34;&gt;\(T_h\)&lt;/span&gt;. We need to find the value of those parameters from the slope and the intercept of our linearised Type II dataset – exactly like we did for the &lt;code&gt;crabs&lt;/code&gt; example. We can use the &lt;code&gt;lm&lt;/code&gt; function on our predator-prey model data to parameterise our model.&lt;/p&gt;
&lt;p&gt;Before we can do our &lt;code&gt;lm&lt;/code&gt; in R we need to import the data and linearise the data.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Importing data&lt;/strong&gt;&lt;br /&gt;
First, we need to import the data in to R. This should be familiar to you from before.&lt;/p&gt;
&lt;div class=&#34;panel panel-warning&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Warning!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Don’t use the code chunks in this tutorial to import data, it won’t work. Make your own script (File -&amp;gt; New Script, or Ctrl(Cmd) + Shift + N).&lt;/p&gt;
&lt;p&gt;Don’t write your code directly in the console either – you won’t have a good record of what you’ve done and it is harder to troubleshoot. You may want to use the code here to help you with your final report or future projects.&lt;/p&gt;
If you copy the code in this tutorial, make sure to &lt;strong&gt;modify it as appropriate for your data&lt;/strong&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The examples here use mathematical notation as the variable names here but the class dataset uses the names from Part 1. You should know which notation matches with what variable description.&lt;/p&gt;
&lt;p&gt;The class dataset is provided as a comma separated values file (&lt;code&gt;.csv&lt;/code&gt;). The function to import a csv file is &lt;code&gt;read.csv&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class_data &amp;lt;- read.csv(&amp;quot;directory/folder/class_data.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This imports the spreadsheet into an R object called &lt;code&gt;class_data&lt;/code&gt; but you can use whatever name you want. You need to replace the file address within the quotation marks with where ever you saved your file on your computer. File housekeeping is important!&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Remember!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Make sure you adapt code to match your dataset. Don’t take code for granted!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Step 2: Linearising data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We need to make our data linear to fit a linear model to it! Let’s first take the inverse of our response variable &lt;span class=&#34;math inline&#34;&gt;\(H_a\)&lt;/span&gt; to get &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{H_a}\)&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class_data$Ha.1 &amp;lt;- 1/class_data$Ha&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This line of code calculates the inverse of &lt;code&gt;Ha&lt;/code&gt;, that is, 1 divided (&lt;code&gt;/&lt;/code&gt;) by the number of prey captured (&lt;code&gt;Ha&lt;/code&gt;), then saves that number to a new column in our dataset called &lt;code&gt;Ha.1&lt;/code&gt;. Note the use of no spaces.&lt;/p&gt;
&lt;p&gt;Your column names can be whatever is meaningful to you. E.g. you don’t &lt;em&gt;have&lt;/em&gt; to call your new column &lt;code&gt;Ha.1&lt;/code&gt; but remember what you called it.&lt;/p&gt;
&lt;p&gt;When manipulating data like this, it’s best practice to add new columns to the data, rather than overwrite the original column. That way, if you make a mistake it’s easier to see what went wrong and you won’t have to start from the beginning!&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Remember!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;&lt;code&gt;data$column&lt;/code&gt; is the general structure to select a column in R. The dataset name and the column names in your code &lt;strong&gt;must exactly match&lt;/strong&gt; your data name and columns. R is case sensitive.&lt;/p&gt;
&lt;p&gt;Make sure you’re not making basic errors like using the wrong column name. Remember, problem solving is fundamental to coding.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s linearise the predictor variable (&lt;code&gt;H&lt;/code&gt;) to get &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{H\times T_{total}}\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class_data$HT.1 &amp;lt;- 1/(class_data$H * class_data$T_total)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we use a value of 1 minute for &lt;span class=&#34;math inline&#34;&gt;\(T_{total}\)&lt;/span&gt;, we are essentially dividing 1 by only prey density (&lt;span class=&#34;math inline&#34;&gt;\(H\)&lt;/span&gt;). Told you a value of 1 would make our maths easier!&lt;/p&gt;
&lt;div class=&#34;panel panel-warning&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Watch out!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Since we have done some division, it’s a good time to check for any undefined values in case we divided by 0.&lt;/p&gt;
&lt;p&gt;In R undefined values are denoted as infinities (&lt;code&gt;Inf&lt;/code&gt;). You can check how many infinities there are using &lt;code&gt;table(is.infinite(class_data$Ha.1))&lt;/code&gt; – this will check whether each cell has undefined values (&lt;code&gt;is.infinite&lt;/code&gt;) and give you logical &lt;code&gt;TRUE&lt;/code&gt;/&lt;code&gt;FALSE&lt;/code&gt; output, then tabulate the logic statements to count the number of &lt;code&gt;TRUE&lt;/code&gt;/&lt;code&gt;FALSE&lt;/code&gt; occurrences in the column &lt;code&gt;Ha.1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can replace the infinities with zeroes using &lt;code&gt;class_data$Ha.1 &amp;lt;- ifelse(class_data$Ha.1 == Inf, 0, class_data$Ha.1)&lt;/code&gt;&lt;/p&gt;
You might recognise the if else statement and understand what’s happening from previous lectures: &lt;strong&gt;if&lt;/strong&gt; there is an undefined value, &lt;strong&gt;then&lt;/strong&gt; replace that value with 0, &lt;strong&gt;else&lt;/strong&gt; leave the value as is. We don’t discard these observations because a value of 0 has biological meaning.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We now have all the correct columns to parameterise our functional response.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Construct an additive linear model for your data&lt;/strong&gt;&lt;br /&gt;
If &lt;code&gt;lm&lt;/code&gt; is the function to do a linear regression, &lt;code&gt;Ha.1&lt;/code&gt; is the name of our response variable, &lt;code&gt;HT.1&lt;/code&gt; is the name of the first predictor variable, &lt;code&gt;foraging_strategy&lt;/code&gt; is the name of the second predictor variable, and the name of our dataset is &lt;code&gt;class_data&lt;/code&gt;, you should be able to write the code for the linearised type II functional response (or replacing the respective components with the column name and dataset names you are using).&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Hint
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;The workflow is exactly as we did for &lt;code&gt;crabs&lt;/code&gt; – so you’ve practised it already! Remember that R partitions variation sequentially and in alphabetical order for factors.&lt;/p&gt;
&lt;p&gt;If you didn’t understand the previous material or you got some questions incorrect or you skipped bits, I recommend finishing them before progressing. Demonstrators cannot help you answer the assessment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Info!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Linear regressions are always done on the entire data, not on averages. i.e. you wouldn’t use the average of your replicates for each treatment for the underlying data. Data must be raw (unprocessed).&lt;/p&gt;
To fit a line to data, ordinary least squares regression depends on quantifying &lt;strong&gt;variation&lt;/strong&gt; of observations around the mean (think back to how sampled data from a population is distributed). Averaging data removes that variation and thus there is less information for R to use (fewer degrees of freedom).
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We won’t plot our regression lines just yet but you should be able to interpret the R output as a graph by looking at the coefficient values. We will construct a graph later!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Step 4: Parameterising &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(T_h\)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The final step is to get our unknown values of &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(T_h\)&lt;/span&gt; for each type of foraging strategy from our linear regression. Since we know our partial regression takes the form &lt;span class=&#34;math inline&#34;&gt;\(Y = \beta_{0_{foraging \space strategy}} + \beta_1 X_1\)&lt;/span&gt; with separate intercepts for each sub-group of &lt;code&gt;foraging_strategy&lt;/code&gt; and the same slope for both groups, and we know the linearised type II model is &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{H_a}=\ \frac{1}{a}\times\frac{1}{H\times T_{total}}+\frac{T_h}{T_{total}}\)&lt;/span&gt;, then you should have all the information to parameterise the type II model and derive values for &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(T_h\)&lt;/span&gt; from the linear regression output for both foraging strategies.&lt;/p&gt;
&lt;div class=&#34;panel panel-success&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
It’s time to answer the CA!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;You have all the information you need to answer the CA.&lt;br /&gt;
Make sure you’ve completed all the exercise up to this point.&lt;/p&gt;
Remember to save and submit your answers.&lt;br /&gt;
That’s the end of the assessment but not the end of the practical.&lt;br /&gt;
Keep going. You’re doing great!
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualising-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Visualising data&lt;/h1&gt;
&lt;p&gt;Visualising data is very important for understanding our data and for communicating our data to others. For example, in a written report.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;plot&lt;/code&gt; is the general plot function. Box-plots (&lt;code&gt;boxplot&lt;/code&gt;) and bar plots (&lt;code&gt;barplot&lt;/code&gt;) have their own plotting commands. You can add error bars using &lt;code&gt;arrows&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;theory&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Theory&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The general formula to plot a scatter graph is &lt;code&gt;plot(response ~ predictor, data)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If our data is categorised (e.g. &lt;code&gt;sp&lt;/code&gt; in &lt;code&gt;crabs&lt;/code&gt; has &lt;code&gt;B&lt;/code&gt; or &lt;code&gt;O&lt;/code&gt;), then we need to plot our points for each group separately. We can do this by calling a plot with no points using &lt;code&gt;plot(response ~ predictor, data, type = &#34;n&#34;)&lt;/code&gt; where &lt;code&gt;&#34;n&#34;&lt;/code&gt; tells R not to plot anything. Then we add points manually with &lt;code&gt;points(response ~ predictor, data[data$group == &#34;subsetA&#34;,])&lt;/code&gt; for each sub-category.&lt;/p&gt;
&lt;p&gt;We need to subset our data (like we did in previous pracs) so that R only plots the sub-categories of data.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Using the crabs dataset, plot crab shell length (response) against crab shell width (predictor) for &lt;strong&gt;only blue crabs&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you are correct, your graph should match the one below:
&lt;img src=&#34;https://jacintak.github.io/teaching/StatsModelsPrac2/index_files/figure-html/crabsol-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Now add the orange crabs to plot all the data – You have to start the code from the beginning.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Uh oh! We cannot distinguish between the colours of crabs! Time to learn more R to add more features to the graph.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;colours&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Colours&lt;/h2&gt;
&lt;p&gt;Colour is important when presenting data. Are the colours meaningful? Are they necessary? Can they be clearly distinguished? Are they appropriate for screens, for printing, or accessible for colour-blind people?&lt;/p&gt;
&lt;div class=&#34;panel panel-primary&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Info!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Red-Green colour blindness is the most common form of colour blindness. A simple guideline is to avoid using red and green together where ever possible. Blue and orange are better contrasting colours (that’s why they are common colour schemes for movie posters).
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Colour in R is defined by &lt;code&gt;col&lt;/code&gt;. So in a graph if I wanted to change the colour of the points from black (default) to red then I can either call &lt;code&gt;col = &#34;red&#34;&lt;/code&gt; or &lt;code&gt;col = 2&lt;/code&gt; as an argument within the &lt;code&gt;points()&lt;/code&gt; function, because red is the second colour in the default R colour palette (black is 1). There are lots of colours to choose from (Google it for a full list). R also accepts hexidecimal RGB colour codes for custom colours (e.g. black is #000000).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Change the colour of the points to their relevant colour (blue or orange)&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;shapes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shapes&lt;/h2&gt;
&lt;p&gt;Shapes are important because it makes the points stand out. It can also be used to distinguish between groups of data on the same graph. Sometimes it’s necessary to change colour &lt;em&gt;and&lt;/em&gt; shape to make it easier to distinguish between groups – redundancy is acceptable and encouraged in graphical design.&lt;/p&gt;
&lt;p&gt;The shape of the points are coded &lt;code&gt;pch = &amp;lt;number&amp;gt;&lt;/code&gt; as an argument within &lt;code&gt;plot()&lt;/code&gt; or &lt;code&gt;points()&lt;/code&gt;. There are lots of options designated a number from 1 to 25. (Google “R pch” for the full list). 1 is the default open circle. A filled circle is 16.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Change the shape of the points from open to filled circles.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can combine all the code above to change the colour, shape and axes labels.&lt;/p&gt;
&lt;p&gt;This graph is fine but if we were to put this in a professional scientific paper or report there are a few missing elements and we may want to customise the aesthetics for a prettier graph.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;axes-labels&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Axes labels&lt;/h2&gt;
&lt;p&gt;The R code to change the labels on a graph are &lt;code&gt;xlab&lt;/code&gt; and &lt;code&gt;ylab&lt;/code&gt; for the x axis and y axis, respectively. These are called within the &lt;code&gt;plot()&lt;/code&gt; function like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plot(response ~ predictor, data, xlab = &amp;quot;label&amp;quot;, ylab = &amp;quot;label&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Change the x axis label of our &lt;code&gt;crabs&lt;/code&gt; plot to “Width” instead.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In practice, we want our figures to be informative and be understandable independently of the main text. This means having informative labels and including units.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There are &lt;strong&gt;two mistakes&lt;/strong&gt; in the following code to change the axis labels to “Width” or “Length” AND include units (mm) in both the x and y axis. Fix it and run the code&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;regression-lines&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Regression lines&lt;/h2&gt;
&lt;p&gt;Once we’ve done the hard work to do a linear regression, it’s nice to add it to our graph so we can see how it fits to the data. A linear regression is always a linear line (straight line) so we can use the code to plot a straight line.&lt;/p&gt;
&lt;p&gt;The formula to plot a straight line is &lt;code&gt;abline(intercept, slope)&lt;/code&gt; because it plots a line from a to b. The intercept is the first value, the slope is the second value. You need to plot the data first before adding additional lines.&lt;/p&gt;
&lt;p&gt;Here are the coefficients for a simple linear model for the crabs showing the intercept and slope respectively:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Intercept)          CW 
       -0.7         0.9 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Complete the &lt;code&gt;abline()&lt;/code&gt; formula to plot our regression line then press run.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The same code is used to plot either regression line for a multiplicative regression – you just need to use the slope and intercept values you want!&lt;/p&gt;
&lt;p&gt;You can also change the colour, type and width of the line as arguments within &lt;code&gt;abline()&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lwd = &amp;lt;number&amp;gt;&lt;/code&gt; is line width. The default is 1. Values greater than 1 are a thicker line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lty = &amp;lt;number&amp;gt;&lt;/code&gt; is line type. The default solid line is 1. Different types of dashed or dotted lines are numbers 2 to 6.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;a-final-graphing-test&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A final graphing test&lt;/h2&gt;
&lt;p&gt;Let’s integrate everything we’ve learnt today and plot the graph of our additive linear model with the correct regression lines.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:final-graph&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/teaching/StatsModelsPrac2/index_files/figure-html/final-graph-1.png&#34; alt=&#34;A complete graph for a scientific report&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: A complete graph for a scientific report
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here are the coefficients for the additive linear model:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(Intercept)          CW         spO 
       -0.7         0.9         1.1 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Change the basic crabs graph to match the graph above – this graph is suitable for a scientific report&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;other-variables-in-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other variables in &lt;code&gt;plot&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Borders&lt;/strong&gt;&lt;br /&gt;
A border around the plot is plotted by default. This is dictated by the default &lt;code&gt;bty = &#34;o&#34;&lt;/code&gt;. You can remove the border entirely with &lt;code&gt;bty = &#34;n&#34;&lt;/code&gt; and you can plot only the bottom and right border (axes) with &lt;code&gt;bty = &#34;l&#34;&lt;/code&gt; – that’s a lowercase L, not a number 1. Borders also apply to legends.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Legends&lt;/strong&gt;&lt;br /&gt;
Figure legends can be added using &lt;code&gt;legend&lt;/code&gt;. Check out the help file for details because you need to set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where to put the legend&lt;/li&gt;
&lt;li&gt;The text of the legend&lt;/li&gt;
&lt;li&gt;The colours&lt;/li&gt;
&lt;li&gt;The lines or points used&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;&lt;br /&gt;
Figure titles can be set using &lt;code&gt;main = &#34;&amp;lt;title&amp;gt;&#34;&lt;/code&gt;. There are other ways of captioning figures too, like subtitles.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;type&lt;/code&gt; tells R what kind of plot you want. R plots points (&lt;code&gt;type = &#34;p&#34;&lt;/code&gt;) by default but can also plot lines (&lt;code&gt;type = &#34;l&#34;&lt;/code&gt;), [lowercase L]. You can plot a combination with &lt;code&gt;type = &#34;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lines&lt;/code&gt; is the equivalent to &lt;code&gt;points&lt;/code&gt; for plotting individual lines.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;captions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Captions&lt;/h2&gt;
&lt;p&gt;The last thing every scientific graph needs is a caption. The caption needs to describe the graph and explain every aspect of the graph to the reader &lt;em&gt;independently&lt;/em&gt; of the main text.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the overall relationship?&lt;/li&gt;
&lt;li&gt;What is on the x axis? What is on the y axis?&lt;/li&gt;
&lt;li&gt;What is the sample size?&lt;/li&gt;
&lt;li&gt;What do the colours, lines or points represent?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Often a single sentence saying “Figure 1. A graph of the response against the predictor” is not enough information in a professional report.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;saving-your-graph&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Saving your graph&lt;/h2&gt;
&lt;p&gt;One way to save your graph is to click “Export” in the Plots window.&lt;/p&gt;
&lt;p&gt;The other way is to use code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;png(&amp;quot;figure.png&amp;quot;)
plot(Y~X, data)
dev.off()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are three steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;png&lt;/code&gt; tells R to prepare a png file where you want the graph to be saved. jpeg and pdf are also accepted formats.&lt;/li&gt;
&lt;li&gt;Plot the graph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dev.off&lt;/code&gt; tells R you are finished plotting the graph and R will write the file to disk&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;practice-graphing-results-with-a-caption&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Practice: Graphing results with a caption&lt;/h2&gt;
&lt;div class=&#34;panel panel-info&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Discussion
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
Use your new found knowledge of making graphs in R to make a plot of our results from our predator-prey interaction response including appropriate axes labels with units. The aesthetics are up to you. Write a caption as well.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can show your figure to your demonstrator for feedback.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;end&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;End&lt;/h1&gt;
&lt;p&gt;That’s the end. Take a break. Stand up. Shake your limbs. Breathe.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;We’ve covered a lot of practical skills that you can use in your final report, in the future and in your other modules. Just as you should build upon what you’ve learnt in previous modules in this one.&lt;/p&gt;
&lt;p&gt;Here’s a summary of what we’ve done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Imported data into R&lt;/li&gt;
&lt;li&gt;Manipulated data in R, including cleaning&lt;/li&gt;
&lt;li&gt;Parameterised a linear regression in R with biological data&lt;/li&gt;
&lt;li&gt;Made predictions with linear models&lt;/li&gt;
&lt;li&gt;Interpreted linear regression output to test hypotheses&lt;/li&gt;
&lt;li&gt;Wrote a results paragraph&lt;/li&gt;
&lt;li&gt;Made a graph in R with appropriate labels and caption&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;panel panel-success&#34;&gt;
&lt;div class=&#34;panel-heading&#34;&gt;
&lt;h3 class=&#34;panel-title&#34;&gt;
Success!
&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&#34;panel-body&#34;&gt;
&lt;p&gt;Over the course of the last practical and this one, we have done a crash course in the Scientific Method from formulating a hypothesis from a biological system (infection or predator/prey response) to evaluating hypotheses and every thing in between.&lt;/p&gt;
We have followed a &lt;strong&gt;workflow&lt;/strong&gt; of data handling analysis that you can apply to any data.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Statistical Modelling Practicals</title>
      <link>https://jacintak.github.io/project/statistical-modelling/</link>
      <pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/project/statistical-modelling/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;StatsModels&lt;/code&gt; is an &lt;code&gt;R&lt;/code&gt; package of &lt;code&gt;learnr&lt;/code&gt; tutorials comprising two practicals on statistical modelling made for BUY22S01 Statistics and Computation at Trinity College Dublin. The package is distributed via GitHub. Each practical is for a 3 hour slot with an estimated completion time of 2.5 hours.&lt;/p&gt;
&lt;p&gt;The aim of the practicals is to introduce statistical modelling. It uses functional responses (i.e. Type II models, Holling’s disc equation) as background information.&lt;/p&gt;
&lt;p&gt;There are two parts to the practical:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Introduction to statistical modelling
&lt;ul&gt;
&lt;li&gt;Constructing a Type II functional response&lt;/li&gt;
&lt;li&gt;Designing an experiment&lt;/li&gt;
&lt;li&gt;Collecting data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Data analysis using statistical models in &lt;code&gt;R&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Importing data&lt;/li&gt;
&lt;li&gt;Manipulating data&lt;/li&gt;
&lt;li&gt;Conducting multiple linear regression (additive)&lt;/li&gt;
&lt;li&gt;Visualising data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Part 1 requires students collect data by replicating Holling’s disc experiment with two predictor variables: prey density and jar type (lid/ no lid). This practical focuses on Type II models. Part 2 analyses the data using additive multiple linear regression. Simple linear regressions (with one predictor variable) or multiplicative regression are not covered because of time constraints.&lt;/p&gt;
&lt;div id=&#34;remote-version&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Remote version&lt;/h2&gt;
&lt;p&gt;It is possible to adapt this in-person practical to a remote version by getting students to collect data using a Scratch simulation of a Type II functional response. I have a Scratch model of one.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;set-up&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Set up&lt;/h1&gt;
&lt;p&gt;We need to set up our computer to download the practical in R.&lt;/p&gt;
&lt;p&gt;Follow this checklist in order to make sure you are set up:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Have you installed R version 4.0 or above? - if not, install/update R
&lt;ul&gt;
&lt;li&gt;You can check your R package version using &lt;code&gt;R.Version()$version.string&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Have you installed RStudio version 1.0.136 or above? - if not install/update RStudio
&lt;ul&gt;
&lt;li&gt;You can check your RStudio version using &lt;code&gt;RStudio.Version()$version&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Have you installed the following packages? - if not use &lt;code&gt;install.packages(&#34;&amp;lt;name of package&amp;gt;&#34;)&lt;/code&gt; to do so
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;learnr&lt;/code&gt; - needed to run the tutorials&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remotes&lt;/code&gt; - needed to install the tutorials&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If everything works then you should see a Tutorials tab in one of your RStudio windows. There may already be tutorials listed there.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-the-tutorials&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installing the tutorials&lt;/h1&gt;
&lt;p&gt;Now we need to install the tutorial. The tutorials are stored in a Package available on GitHub. You will only have to install the package once at the beginning.&lt;br /&gt;
Use the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remotes::install_github(&amp;quot;jacintak/biostats&amp;quot;, dependencies = TRUE, build_vignettes = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are asked to install any other packages, choose yes.&lt;br /&gt;
If you are asked to update any packages, press &lt;code&gt;1&lt;/code&gt; for updating all of them.&lt;br /&gt;
If you are asked to install packages from source (i.e. in a pop-up window), press no.&lt;br /&gt;
If the package installed properly, you should automatically see the tutorials in the Tutorial tab.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;running-a-tutorial&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Running a tutorial&lt;/h1&gt;
&lt;p&gt;You should be able to run a tutorial from the Tutorial tab when you open RStudio without needing to do anything.&lt;br /&gt;
Make sure it’s a tutorial from the &lt;code&gt;StatsModels&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;If you click run tutorial, the tutorial will show up in the tab. You can click the “Show in new window” icon to open it in another window. Press the “Home” icon to return to the Tutorials tab.&lt;/p&gt;
&lt;p&gt;If that doesn’t work use this code and the tutorial will open in another window or your browser:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;learnr::run_tutorial(&amp;quot;&amp;lt;insert name of the tutorial to run&amp;gt;&amp;quot;, package = &amp;quot;StatsModels&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quit a tutorial by pressing the “Stop” icon.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Knitting an interactive document</title>
      <link>https://jacintak.github.io/post/knitting-an-interactive-document/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/knitting-an-interactive-document/</guid>
      <description>


&lt;div id=&#34;interactive-functions-dont-work-with-knitr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Interactive functions don’t work with &lt;code&gt;knitr&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;R has a neat interactive feature. You can write a script or a function that asks the user for input, like a number or a string, that can be used as a variable. I &lt;a href=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/&#34;&gt;wrote&lt;/a&gt; about how this feature works in an interactive function last year. Interactive functions are neat for demonstrating how variables work in functions but aren’t practical for most uses.&lt;/p&gt;
&lt;p&gt;One practical use for an interactive function I had recently was in a function to import multiple data files downloaded from a data logger. In this case, I wrote a generic function for importing the data because the structure of the data from the data logger (temperature, time, etc.) was consistent. Pretty standard stuff but the function asks the user where the files were located on the local drive. All files in the directory would be cleaned up and imported as a named list.&lt;/p&gt;
&lt;p&gt;Now you could say that the interactive aspect is unnecessary and you would be right. But where would the fun in that be?&lt;/p&gt;
&lt;p&gt;The importing function was saved as an R script (&lt;code&gt;.R&lt;/code&gt;) and called in a Rmarkdown file using &lt;code&gt;source()&lt;/code&gt; but there is a problem with this workflow. You can run an interactive session within an Rmarkdown file in a regular R session but you cannot knit it. By default, Rmarkdown does not permit an interactive R session while knitting. And that defeats the point of using Rmarkdown.&lt;/p&gt;
&lt;p&gt;Fortunately, there is a workaround to get &lt;code&gt;knitr&lt;/code&gt; to ask for the directory when knitting. We need to make some modifications to the YAML, setup chunk, and the importing function.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;yaml&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;YAML&lt;/h1&gt;
&lt;p&gt;You might have seen the option to “Knit with Parameters” in the Knit menu in RStudio. Parameters are additional variables that are called when knitting. We can use parameters to tell &lt;code&gt;knitr&lt;/code&gt; where to look for the files we are importing.&lt;/p&gt;
&lt;p&gt;Here’s a generic YAML with a parameter (&lt;code&gt;params&lt;/code&gt;) called &lt;code&gt;folder&lt;/code&gt; and the directory of the files we want (&lt;code&gt;data/subfolder&lt;/code&gt;). Note, no quotation marks in the address. The parameter &lt;code&gt;folder&lt;/code&gt; is used like a regular variable in R when knitting.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Title&amp;quot;
output:
  html_document:
    df_print: paged
params:
  folder: data/subfolder
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the files we want are located in a folder called &lt;code&gt;data&lt;/code&gt; and a sub-folder called &lt;code&gt;subfolder&lt;/code&gt; within our RStudio directory. The address can be where ever you want and it could be a full address or a relative address. I’m using addresses relative to the working directory, specifically the project directory because I’m working within a project. You’ll see why this is important below.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;setting-up-directories&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Setting up directories&lt;/h1&gt;
&lt;p&gt;I like to use subdirectories within an RStudio project. For example, I will have a separate folder for scripts, files, figures and any other outputs within my RStudio project folder. However, this is not the default behaviour of &lt;code&gt;knitr&lt;/code&gt; and causes some directory issues because &lt;code&gt;knitr&lt;/code&gt; uses the source file directory (i.e. “/project/scripts/” folder because that’s where my Rmd file is saved) rather than the project directory (i.e. “/project/”).&lt;/p&gt;
&lt;p&gt;So if I had the importing function (&lt;code&gt;import_data.R&lt;/code&gt;) in the scripts sub-folder, then:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Does not work when knitting, works in session
source(&amp;quot;scripts/import_data.R&amp;quot;)

# Works when knitting, does not work in session
source(&amp;quot;import_data.R&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would rather have the first option only because it makes more sense given my directory structure but this is a personal choice.&lt;/p&gt;
&lt;p&gt;You can tell &lt;code&gt;knitr&lt;/code&gt; to use the project directory when knitting in the &lt;code&gt;setup&lt;/code&gt; chunk via:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;opts_knit&lt;/code&gt; sets the options for knitting and &lt;code&gt;find_rstudio_root_file()&lt;/code&gt; is a helper function to get the root directory of the RStudio project (provided you are in one). This is instead of &lt;code&gt;setwd()&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;the-interactive-function&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The interactive function&lt;/h1&gt;
&lt;p&gt;Here’s a generic interactive function that will import all CSV files within a user-defined folder as a list called &lt;code&gt;imported_files&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import_files &amp;lt;- function(){
  # Ask the user for the folder address
  folder_address &amp;lt;- ifelse(interactive() == TRUE,
                           readline(&amp;quot;Enter relative folder address to working directory without quotation marks: &amp;quot;),
                           params$folder)
                           
  # Complete relative address
  folder_address &amp;lt;- paste(getwd(), folder_address, sep = &amp;quot;/&amp;quot;)

  # Get file names
  add.files &amp;lt;- list.files(folder_address, pattern=&amp;quot;.csv&amp;quot;, recursive = FALSE, full.names = TRUE)
  
  # Check the user has entered address properly
  if(identical(add.files, character(0))){ 
    message(paste(&amp;quot;Address&amp;quot;, folder_address, &amp;quot;has no files. Please try again.&amp;quot;)) 
    return(import_files()) # Return to the beginning of the function and start again
  }
  
  # Import file
  get.files &amp;lt;- lapply(add.files, read.csv)
  
  return(get.files)
  }

# Return as list
imported_files &amp;lt;- import_files()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The important feature of the interactive function that makes it play nicely with &lt;code&gt;knitr&lt;/code&gt; is the &lt;code&gt;ifelse&lt;/code&gt; statement when asking for the folder our CSVs are saved in (&lt;code&gt;folder_address&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In a regular R session that is interactive, the function will ask for the address (via &lt;code&gt;readline&lt;/code&gt;) but when knitting (thus when &lt;code&gt;interactive()&lt;/code&gt; is &lt;code&gt;FALSE&lt;/code&gt;) the folder address is the address defined in the &lt;code&gt;folder&lt;/code&gt; parameter (called via &lt;code&gt;params$folder&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This is where the knitting parameters we defined earlier comes in. So when knitting the input is &lt;code&gt;data/subfolder&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main reason I use relative addresses is so that I don’t have to type out the full address. I recreate the full address from the working directory so that there is no ambiguity in the address.&lt;/p&gt;
&lt;p&gt;Then, I have an &lt;code&gt;if&lt;/code&gt; statement for checking the address and user input. An error message will appear if the address does not have any CSV files (checked using &lt;code&gt;identical&lt;/code&gt;). It will print the address so you can check for typos.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;lapply&lt;/code&gt; function will load the CSVs as a list.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;knitting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Knitting&lt;/h1&gt;
&lt;p&gt;You need to use the “Knit with Parameters” option rather than the default Knit button (or a manual &lt;code&gt;render&lt;/code&gt;). I’m focussing on HTML here. When you knit, a window will pop up asking you what to input for each parameter you’ve set in the YAML. Here, it’s asking what’s the input for &lt;code&gt;folder&lt;/code&gt;. The window will say what you’ve set for &lt;code&gt;folder&lt;/code&gt; by default (&lt;code&gt;data/subfolder&lt;/code&gt;) or you can change it in the popup.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is this really useful? Probably not and it wouldn’t be as reproducible, but we can do it because we can!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;setting-knitr-options-globally&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Setting knitr options globally&lt;/h1&gt;
&lt;p&gt;You can set &lt;code&gt;opts_knit&lt;/code&gt; within your &lt;code&gt;.Rprofile&lt;/code&gt; as a global option using &lt;code&gt;options(knitr.package.root.dir = &amp;lt;address&amp;gt;)&lt;/code&gt; so that the root directory of your project is where your &lt;code&gt;.Rproj&lt;/code&gt; file is by default:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Always use project directory as root directory
if(class(try(rprojroot::find_rstudio_root_file(), silent = TRUE)) != &amp;quot;try-error&amp;quot;){
options(knitr.package.root.dir = rprojroot::find_rstudio_root_file())}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;if&lt;/code&gt; statement in your &lt;code&gt;.Rprofile&lt;/code&gt; file will check if there is an Rproject file (&lt;code&gt;.Rproj&lt;/code&gt;) using &lt;code&gt;rprojroot::find_rstudio_root_file()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;try&lt;/code&gt; is used in debugging to catch any error messages. &lt;code&gt;silent = TRUE&lt;/code&gt; will suppress showing these error messages.&lt;/p&gt;
&lt;p&gt;If you are not working in a project, then &lt;code&gt;find_rstudio_root_file()&lt;/code&gt; will generate an error message. So, we can check if we have generated an error message (&lt;code&gt;class&lt;/code&gt; should be a &lt;code&gt;&#34;try-error&#34;&lt;/code&gt;). If there is an error message, we are not working in a project and we do not change any options (&lt;code&gt;options(knitr.package.root.dir&lt;/code&gt; should be &lt;code&gt;NULL&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If there is no error message, then &lt;code&gt;find_rstudio_root_file()&lt;/code&gt; has found an &lt;code&gt;.Rproj&lt;/code&gt; file and will change the root directory to that location.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Again, setting &lt;code&gt;.Rprofile&lt;/code&gt; defaults creates dependencies in your code which may be convenient for you but not reproducible to others.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;other-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other points&lt;/h1&gt;
&lt;p&gt;You could also have a project specific &lt;code&gt;.Rprofile&lt;/code&gt; to your project root directory.&lt;/p&gt;
&lt;p&gt;Parameters can be called anything and you can have any number of parameters. They only work when knitting. They don’t work in a regular session.&lt;/p&gt;
&lt;p&gt;You can remove the last line of the importing function (&lt;code&gt;imported_files &amp;lt;- import_files()&lt;/code&gt;) if you’d rather load the function into your Global Environment.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Parthenogenesis without costs in a grasshopper with hybrid origins</title>
      <link>https://jacintak.github.io/publication/2022-Science/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/publication/2022-Science/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;The rarity of parthenogenetic species is typically attributed to the reduced genetic variability that accompanies the absence of sex, yet natural parthenogens can be surprisingly successful. Ecological success is often proposed to derive from hybridization through enhanced genetic diversity from repetitive origins or enhanced phenotypic breadth from heterosis. Here, we tested and rejected both hypotheses in a classic parthenogen, the diploid grasshopper Warramaba virgo. Genetic data revealed a single hybrid mating origin at least 0.25 million years ago, and comparative analyses of 14 physiological and life history traits showed no evidence for altered fitness relative to its sexual progenitors. Our findings imply that the rarity of parthenogenesis is due to constraints on origin rather than to rapid extinction.&lt;/p&gt;
&lt;h1 id=&#34;media-articles&#34;&gt;Media articles&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.unimelb.edu.au/newsroom/news/2022/june/males-need-not-apply-research-on-grasshopper-species-unravels-the-benefits-of-giving-up-sex&#34;&gt;University of Melbourne Pursuit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://theconversation.com/this-australian-grasshopper-gave-up-sex-250-000-years-ago-and-its-doing-fine-184241&#34;&gt;The Conversation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Best practices for building and curating databases for comparative analyses</title>
      <link>https://jacintak.github.io/publication/2022-JEB/</link>
      <pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/publication/2022-JEB/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;Comparative analyses have a long history of macro-ecological and -evolutionary approaches to understand structure, function, mechanism, and constraint. As the pace of science accelerates, there is ever-increasing access to diverse types of data and open-access databases that are enabling and inspiring new research. Whether conducting a species-level trait-based analysis or a formal meta-analysis of study effect sizes, comparative approaches share a common reliance on reliable, carefully-curated databases. Unlike many scientific endeavors, building a database is a process that many researchers undertake infrequently and in which we are not formally trained. This commentary provides an introduction to building databases for comparative analyses and highlights challenges and solutions that the authors of the commentary have faced in their own experiences. We focus on four major tips: 1) carefully strategizing the literature search; 2) structuring databases for multiple use; 3) establishing version control within (and beyond) your study; and 4) the importance of making databases accessible. We highlight how one’s approach to these tasks often depends on the goal of the study and the nature of the data. Finally, we assert that the curation of single-question databases has several disadvantages: it limits the possibility of using databases for multiple purposes and decreases efficiency owing to independent researchers repeatedly sifting through large volumes of raw information. We argue that curating databases that are broader than one research question can provide a large return on investment, and that research fields could increase efficiency if community curation of databases was established.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>December update</title>
      <link>https://jacintak.github.io/post/2021-12-01-december-update/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-12-01-december-update/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-12-01-december-update/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;end-of-the-year&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;End of the year!&lt;/h1&gt;
&lt;p&gt;The work-from-home go-in-to-work and back again switching meant I didn’t have time to write the post I originally intended. But this month I’ve made some updates around the site plus some general end of year housekeeping here on GitHub.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;research&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Research&lt;/h1&gt;
&lt;p&gt;It’s been a busy year including many firsts or personal records. I “attended” three conferences, wrote my first independent collaborative paper, submitted many papers, got many rejections, applied for jobs and reviewed many papers. I was pleasantly surprised to see my research mentioned in people’s conference presentations. Thank you for reading!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;teaching&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Teaching&lt;/h1&gt;
&lt;p&gt;I’ve updated the teaching materials on the site.&lt;/p&gt;
&lt;p&gt;Over the course of the year, I’ve turned various tutorials I ran for NERD club into blog posts on this site and collated them on a &lt;a href=&#34;https://jacintak.github.io/project/NERD-club&#34;&gt;Project page&lt;/a&gt; with their original presentations. I’m glad that some people have found them useful.&lt;/p&gt;
&lt;p&gt;At the moment I’m not sure what I want to do with the &lt;a href=&#34;https://jacintak.github.io/teaching/GLM/lectures/index.html&#34;&gt;GLM course notes&lt;/a&gt; on the site. With an update, they may be useful to some, but I revamped my lectures this year, so these notes don’t follow the lectures. I’m still not sure what the best balance of teaching stats is. Too many additional resources seem overwhelming to students especially with remote learning so this year I went for the less is more approach. At the very least, creating the resource was a good opportunity to try out &lt;code&gt;bookdown&lt;/code&gt; and figure out how to integrate it within a &lt;code&gt;blogdown&lt;/code&gt; site.&lt;/p&gt;
&lt;p&gt;I’ve updated an &lt;a href=&#34;https://jacintak.github.io/teaching/introR/index.html&#34;&gt;Introduction to R&lt;/a&gt; with how to change the default library address because I noticed that the user library folder created in Documents was syncing to OneDrive for many students using Windows 10. This is a feature of using a Microsoft account but it means there are then issues between R accessing the user library and OneDrive syncing the folder. This becomes a prominent issue if you are running a session that depends on many packages.&lt;/p&gt;
&lt;p&gt;This feature is frustrating because I don’t expect students to need to delve into Control Panel and change their computer settings. I don’t expect them to &lt;em&gt;know&lt;/em&gt; how to do it and it only adds to their stress when they get package related errors during class. Does the younger generation even know what the Control Panel is and how to modify it? It defeats the point of Windows becoming more user friendly. In terms of user friendliness, it would be great if changing the default package folder was an option through the RStudio GUI.&lt;/p&gt;
&lt;p&gt;These issues came about because I wanted to try delivering practicals through &lt;code&gt;learnr&lt;/code&gt;. On paper, interactive tutorials are great and they are well integrated within the RStudio environment through the Tutorial pane. In practice, it complicates the process for the students because now they have to install all the dependencies - and there are a lot of them! Which is an additional learning curve of computer housekeeping. This is also not the kind of debugging I expect the demonstrators to know. The remote delivery makes troubleshooting difficult.&lt;/p&gt;
&lt;p&gt;Though &lt;code&gt;learnr&lt;/code&gt; has been around for a few years, it’s still in active development and there are some issues or features that cause headaches during class. Unfortunately, debugging these error messages is not straightforward and the general fix is to reinstall the package again. Two issues I’ve come across that are known, open issues on GitHub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trailing garbage error. Some students cannot open a tutorial a second time, or even a first time. The error is inconsistent across students which makes it hard to infer why it’s happening.&lt;/li&gt;
&lt;li&gt;Skipping coding exercises by pressing run code (even with no input). This defeats the point of not allowing skipping.
&lt;ul&gt;
&lt;li&gt;There is a great temptation among students to rush through and skip exercises to get to the “important bits” (it’s all important) or to jump to any in-class assessment and work in reverse (i.e. reading the assessment question then skim reading the relevant section without working through the theory first). Maybe this is a consequence of remote teaching and open book assessment that this cohort is now used to. Forcing students to slow down and engage with the material in order is one solution.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ve made the &lt;code&gt;learnr&lt;/code&gt; practicals available on GitHub and given it a &lt;a href=&#34;https://jacintak.github.io/project/statistical-modelling&#34;&gt;project page&lt;/a&gt;. It’s a set of practicals about learning statistical modelling through the context of functional responses (predator-prey interactions). Students collect data in the first practical and analyse the data in the second. I made a Type II functional response model in Scratch for remote students to participate in data collection.&lt;/p&gt;
&lt;p&gt;I moved the original &lt;code&gt;learnr&lt;/code&gt; tutorials about R to their own GitHub repository and &lt;a href=&#34;https://jacintak.github.io/project/biostats-tutorials&#34;&gt;project page&lt;/a&gt;. I’m not sure what to do with this too. My original intention was to provide it as an additional resource to students. Currently, I have revamped the tutorials based on material I’ve presented to NERD club.&lt;/p&gt;
&lt;p&gt;Overall, I’m satisfied with how &lt;code&gt;learnr&lt;/code&gt; worked in a large classroom. The loading error is annoying but mostly because of the remote delivery and it only affects a minor proportion of students.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here’s to hoping for more adventures in the new year.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Gifs keep on giving</title>
      <link>https://jacintak.github.io/post/2021-11-01-gifs-in-r/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-11-01-gifs-in-r/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-11-01-gifs-in-r/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


I love gifs.&lt;br /&gt;

&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/FMhaQAQyv0xwc/giphy.gif&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Gifs are great for showing how data changes over time or just for putting something engaging in a presentation. When I was working on modelling insect phenology I wanted to create a gif of how insects hatch throughout the year across Australia for my presentations. Making gifs in R has improved a little since then so here’s a quick guide to making gifs. I won’t cover interactive plots (e.g. &lt;code&gt;plotly&lt;/code&gt;).&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;looping-through-images&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Looping through images&lt;/h1&gt;
&lt;p&gt;Basically this involves making lots of png images then looping through them. The package is &lt;code&gt;animation&lt;/code&gt; which depends on ImageMagick so you will need to install ImageMagick first. I’ve found it handy for sequentially showings layers of a raster (e.g. where each layer is data over time).&lt;/p&gt;
&lt;p&gt;Make sure to install legacy functions when installing ImageMagick (e.g. convert). You may need to tell R where to find ImageMagick using &lt;code&gt;ani.options(convert = &#39;C:/ImageMagick-7.0.9-Q16/convert.exe&#39;)&lt;/code&gt; for where ever ImageMagick was installed.&lt;/p&gt;
&lt;p&gt;Let’s pretend we have a raster of soil temperature for one day where each layer (n = 24) is an hour of a day (&lt;code&gt;soil_temp&lt;/code&gt;), like a raster from &lt;a href=&#34;https://onlinelibrary.wiley.com/doi/10.1111/aec.12689&#34;&gt;microclimOz&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We need to create our loop, then we can use &lt;code&gt;animation::saveGIF&lt;/code&gt; to save our image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(animation)
library(raster)
pal &amp;lt;- terrain.colors(10, rev = TRUE)
bre &amp;lt;- round(seq(min(minValue(soil_temp))-1,max(maxValue(soil_temp))+1,length.out=10))
saveGIF({
for(i in 1:24){plot(soil_temp[[i]], main = i, col = pal, breaks = bre)}
}, movie.name = &amp;quot;soil_temp.gif&amp;quot;, clean=T, convert = &amp;quot;convert&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;soil_temp.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To make sure the colour scale is consistent throughout the loop:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I’ve defined a fixed colour scale (&lt;code&gt;pal&lt;/code&gt;) using the base palette &lt;code&gt;terrain.colours&lt;/code&gt; and reversed the scale so that higher temperatures are green. Note that the terrain colour palette isn’t great for colour blindness.&lt;/li&gt;
&lt;li&gt;I’ve created my own colour scale (&lt;code&gt;bre&lt;/code&gt;) by manually defining the breaks in the colour scale based on the minimum and maximum temperatures in the entire raster dataset. Plus some wiggle room on either side.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I didn’t manually define the colour scale, then each image in the gif will use its own automatically generated scale and the colours will be inconsistent.&lt;/p&gt;
&lt;p&gt;Note the use of curly brackets to call an independent line of &lt;code&gt;R&lt;/code&gt; code within code (the loop within &lt;code&gt;saveGIF&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The benefit of &lt;code&gt;animation&lt;/code&gt; is that it works with any type of image in R and is basically a wrapper for ImageMagick, unlike &lt;code&gt;gganimate&lt;/code&gt;. You could also use ImageMagick in the command line.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;gradually-showing-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Gradually showing data&lt;/h1&gt;
&lt;p&gt;This is easily done using &lt;code&gt;ggplot2&lt;/code&gt; and &lt;code&gt;gganimate&lt;/code&gt;. ImageMagick isn’t needed (a different engine is used) but this method is limited to &lt;code&gt;ggplot&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;I have some &lt;a href=&#34;https://jacintakongresearch.wordpress.com/2020/10/17/measuring-the-mammalian-diving-reflex-with-apple-watch/&#34;&gt;heart rate data demonstrating the mammalian diving reflex&lt;/a&gt; that I will use as an example. I imported the data from my Apple Watch into R that you can read about at the link. Then, I made a gif for my lectures using &lt;code&gt;gganimate&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(gganimate) # loading just gganimate will also load ggplot2 for you
library(tidyverse)

hr_plot &amp;lt;- heart_rate %&amp;gt;%
          filter(time &amp;gt; &amp;quot;2020-10-17 11:00:34&amp;quot; &amp;amp; time &amp;lt; &amp;quot;2020-10-17 11:13:00&amp;quot;) %&amp;gt;% 
  ggplot(aes(time, value)) +
  # Dive 1
  annotate(&amp;quot;rect&amp;quot;, fill = &amp;quot;lightgrey&amp;quot;, alpha = 0.7, 
           xmin = as.POSIXct(&amp;quot;2020-10-17 11:05:00&amp;quot;), xmax = as.POSIXct(&amp;quot;2020-10-17 11:05:30&amp;quot;),
           ymin = -Inf, ymax = Inf) +
  # Dive 2
  annotate(&amp;quot;rect&amp;quot;, fill = &amp;quot;lightgrey&amp;quot;, alpha = 0.7, 
           xmin = as.POSIXct(&amp;quot;2020-10-17 11:07:12&amp;quot;), xmax = as.POSIXct(&amp;quot;2020-10-17 11:07:50&amp;quot;),
           ymin = -Inf, ymax = Inf) +
  geom_point(aes(group = seq_along(time))) +
  geom_line() +
  annotate(&amp;quot;text&amp;quot;, label = &amp;quot;Dives&amp;quot;, x = as.POSIXct(&amp;quot;2020-10-17 11:10&amp;quot;), y = 75) +
  annotate(&amp;quot;rect&amp;quot;, fill = &amp;quot;lightgrey&amp;quot;, alpha = 0.7, 
           xmin = as.POSIXct(&amp;quot;2020-10-17 11:10:40&amp;quot;), xmax = as.POSIXct(&amp;quot;2020-10-17 11:11:10&amp;quot;),
           ymin = 73, ymax = 77) +
  theme_classic() +
  labs(x = &amp;quot;Time&amp;quot;, y = expression(&amp;quot;Heart rate &amp;quot;(&amp;quot;Beats min&amp;quot;^-1))) +
  scale_x_datetime() + # time is already a POSIXct format
  ylim(c(50, 125)) +
  transition_reveal(time) +
  enter_fade()

animate(plot = hr_plot,
  nframes = 100,
  fps = 10,
  end_pause = 10,
  height = 600, width =600, res = 100)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ve split this into two parts. Lets break this down:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Make the heart rate graph (&lt;code&gt;hr_plot&lt;/code&gt;). My heart rate data is saved in a variable called &lt;code&gt;heart_rate&lt;/code&gt;.
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;I have trimmed the data (&lt;code&gt;dplyr::filter&lt;/code&gt;) then plotted heart rate over time (lines and points).&lt;/li&gt;
&lt;li&gt;I have annotated the graph with grey rectangles (&lt;code&gt;annotate(&#34;rect&#34;)&lt;/code&gt;) to indicate diving periods.&lt;/li&gt;
&lt;li&gt;I created a legend using &lt;code&gt;annotate&lt;/code&gt; for text and another little grey rectangle.&lt;/li&gt;
&lt;li&gt;Used &lt;code&gt;expression&lt;/code&gt; for scientific notation in my axis labels.&lt;/li&gt;
&lt;li&gt;Formatted the x axis as a date time axis (&lt;code&gt;scale_x_datetime&lt;/code&gt;). Not critical here.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transition_reveal&lt;/code&gt; and &lt;code&gt;enter_fade&lt;/code&gt; are &lt;code&gt;gganimate&lt;/code&gt; functions that describe how the data is revealed. Here I’m saying reveal along the x axis. This may take some time to render when you call the plot.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animate&lt;/code&gt; is the main function to create the animation.
&lt;ul&gt;
&lt;li&gt;I defined the number of frames, the speed (frames per second), how long to pause the gif at the last frame, and the dimensions.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;anim_save&lt;/code&gt; to save your gif.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
Here’s proof I am a mammal:
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;featured.gif&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;There are other types of transitions included in &lt;code&gt;gganimate&lt;/code&gt;. There is a handy &lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;cheatsheet&lt;/a&gt; too.&lt;/p&gt;
&lt;hr /&gt;
Happy animating!&lt;br /&gt;

&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/1CrejqXxVZs9q/giphy.gif&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An introduction to spatial data in R</title>
      <link>https://jacintak.github.io/post/spatial-data/</link>
      <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/spatial-data/</guid>
      <description>


&lt;p&gt;NB: This was originally a tutorial given to Space Lunch members on 6th October 2021. This is an adapted version. The original version, which uses a marine example, can be found on the &lt;a href=&#34;project/NERD-club/&#34;&gt;Project&lt;/a&gt; page.&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is going to be an introduction to a simple workflow for spatial data in R using rasters. I will assume you have some basic knowledge about spatial analyses and co-ordinate systems. This is not meant to be a documentation of the full suite of spatial analysis available in R. Some simple ways of plotting data is covered.&lt;/p&gt;
&lt;p&gt;Rasters are stored spatial data in a gridded format.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each grid cell contains a single value. E.g. temperature, elevation, species richness&lt;/li&gt;
&lt;li&gt;Often stored in three dimensions (e.g. latitude, longitude and time).&lt;/li&gt;
&lt;li&gt;The main &lt;code&gt;R&lt;/code&gt; package for handling rasters is &lt;code&gt;raster&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will consider a common workflow of associating rasters with spatial point data (e.g. lat and long).
I will be sticking to base R throughout.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;introducing-rasters&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introducing rasters&lt;/h1&gt;
&lt;div id=&#34;loading-from-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading from file&lt;/h2&gt;
&lt;p&gt;Rasters can be acquired from a range of sources, such as government agencies. There are also R packages to interface directly with online databases but for another time. Often they are saved as an nc file (network Common Data Form) that is imported as a raster with layers and assigned a spatial projection. You’ll see below that other dependent packages are loaded with &lt;code&gt;raster&lt;/code&gt; but you won’t need to load each one manually.&lt;/p&gt;
&lt;p&gt;You can load a raster from a local nc file using the function &lt;code&gt;raster::brick&lt;/code&gt;. The &lt;code&gt;::&lt;/code&gt; denotes calling a function from a specific package without loading it with &lt;code&gt;library&lt;/code&gt;. Good for quick and dirty functions you won’t use frequently, bad if you are using the package multiple times.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_raster &amp;lt;- brick(&amp;quot;raster_data.nc&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will cheat and use the built in function in &lt;code&gt;raster&lt;/code&gt; to query WorldClim for mean annual temperature.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(raster)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: sp&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp &amp;lt;- getData(&amp;quot;worldclim&amp;quot;,var=&amp;quot;bio&amp;quot;,res=10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in getData(&amp;quot;worldclim&amp;quot;, var = &amp;quot;bio&amp;quot;, res = 10): getData will be removed in a future version of raster
## . Please use the geodata package instead&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting-rasters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Subsetting rasters&lt;/h2&gt;
&lt;p&gt;Subset rasters by layers using basic square bracket subsetting for lists.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp &amp;lt;- temp[[1]] # Subset only the first layer - mean annual temperature&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I have selected mean annual temperature since we do not need the other variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-rasters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot rasters&lt;/h2&gt;
&lt;p&gt;We can use the basic plot function to view the raster data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(temp)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-3&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-3-1.png&#34; alt=&#34;Average annual temperature&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Average annual temperature
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The default colour scale is horrendous so we will change it to the viridis scale. Here’s an example of using &lt;code&gt;::&lt;/code&gt;. I don’t need the entire &lt;code&gt;viridis&lt;/code&gt; package. This is to make a continuous colour palette of 20 colours. And add a title to the graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(temp, main = &amp;quot;Mean annual temperature&amp;quot;, col = viridis::viridis(n = 20))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-4&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-4-1.png&#34; alt=&#34;That&#39;s better&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: That’s better
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There’s one last issue to deal with before this data is ready. WorldClim stores temperature data multiplied by 10 for space saving so we need to divide by 10.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;manipulating-rasters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Manipulating rasters&lt;/h2&gt;
&lt;p&gt;Rasters can be manipulated by base functions. E.g. addition or subtraction between rasters or layers. There are many other functions for analysing rasters and doing spatial analysis (e.g. interpolation) but we won’t cover that here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp &amp;lt;- temp/10
plot(temp, main = &amp;quot;Mean annual temperature&amp;quot;, col = viridis::viridis(n = 20))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-5&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-5-1.png&#34; alt=&#34;That&#39;s much much better&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 3: That’s much much better
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;spatial-point-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Spatial point data&lt;/h1&gt;
&lt;p&gt;I usually encounter spatial data in the form of decimal latitude and longitudes representing species occurrences or sampling sites. You may already have these data from your own work but for demonstration purposes I will show how to query an online database to get species distribution points from GBIF. This requires an Internet connection and the R package &lt;code&gt;rgbif&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s query GBIF occurrence points for an widespread bird: The house sparrow (&lt;em&gt;Passer domesticus&lt;/em&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need the unique identification key for the species you want. &lt;code&gt;name_suggest&lt;/code&gt; can help with that so you don’t have to manually search GBIF.&lt;/li&gt;
&lt;li&gt;The data comes as a list with some metadata. &lt;code&gt;.$data&lt;/code&gt; is the actual occurrence records. The dot &lt;code&gt;.&lt;/code&gt; is a placeholder meaning it represents an R variable (e.g. a dataframe). This is commonly used in &lt;code&gt;tidyverse&lt;/code&gt; and piping via &lt;code&gt;magrittr&lt;/code&gt;. It is also a cheat’s way of using base functions within a pipe.&lt;/li&gt;
&lt;li&gt;Co-ordinates are stored as &lt;code&gt;decimalLatitude&lt;/code&gt; and &lt;code&gt;decimalLongitude&lt;/code&gt;. I’ve removed any missing values manually but &lt;code&gt;occ_search&lt;/code&gt; has a variable called &lt;code&gt;hasCoordinate&lt;/code&gt; to return records with lat/long data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rgbif&lt;/code&gt; gets a max 500 records each time by default (&lt;code&gt;limit&lt;/code&gt;). Use &lt;code&gt;page&lt;/code&gt; to denote which record number to start at.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rgbif)
# get ID key for bird
bird_key &amp;lt;- name_suggest(q =&amp;quot;Passer domesticus&amp;quot;, rank=&amp;#39;species&amp;#39;)$data$key[1]
# get occurrence points
bird_points &amp;lt;- occ_search(taxonKey = bird_key) # Get all records, max 500 (see variable limit)
# exclude metadata
bird_points &amp;lt;- bird_points$data
# remove NA latitude or longitude
bird_points &amp;lt;- bird_points[!is.na(bird_points$decimalLatitude),]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since I’ve only searched for one species, the workflow is simple. If I wanted multiple species I would have to use lists and a function like &lt;code&gt;sapply&lt;/code&gt;. See help file for &lt;code&gt;occ_search&lt;/code&gt; for an example. Avoid for loops.&lt;/p&gt;
&lt;div id=&#34;plot-spatial-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot spatial data&lt;/h2&gt;
&lt;p&gt;Let’s look at the global distribution of points. I will use the base &lt;code&gt;maps&lt;/code&gt; package for a simple, low resolution and unprojected world map in R (not recommended for more professional output). The &lt;code&gt;maps&lt;/code&gt; package can also be used in &lt;code&gt;ggplot2&lt;/code&gt; via &lt;code&gt;borders(database = &#34;world&#34;, fill = NA)&lt;/code&gt; or &lt;code&gt;geom_polygon(data = map_data(&#34;world&#34;), aes(x=long, y = lat, group = group), fill = NA, col= 1)&lt;/code&gt;; &lt;code&gt;coord_map()&lt;/code&gt; may help in these cases.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(maps)
map(&amp;quot;world&amp;quot;) # get basic world map
title(main = &amp;quot;The distribution of house sparrow&amp;quot;) # plot title
points(decimalLatitude ~ decimalLongitude, bird_points, pch = 16, col = 2) # plot points
legend(x = -150, y= -50, legend = &amp;quot;occurence&amp;quot;, pch = 16, col = 2, bty = &amp;quot;n&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see that the 500 points from GBIF come mainly from around northern Europe. Here is a good point to check for sampling bias of points or any potential erroneous points - I will ignore this step for this demonstration.&lt;/p&gt;
&lt;p&gt;For more advanced mapping in R check out &lt;code&gt;ggmaps&lt;/code&gt;, which can interface with Open Street Maps (free) and Google Maps (for a fee), and &lt;code&gt;osmdata&lt;/code&gt;, which interfaces directly with OSM and allows you to customise which features to include - check out the related tutorial about mapping cities in R in the Space Club folder or &lt;a href=&#34;https://jacintak.github.io/post/2021-07-01-OSM-in-R/&#34;&gt;online&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;putting-it-all-together&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Putting it all together&lt;/h1&gt;
&lt;p&gt;Now we have all the data we need, let’s combine the datasets and plot the occurrence data with the temp raster.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(temp, main = &amp;quot;Mean annual temperature&amp;quot;, col = viridis::viridis(n = 20)) # temp
points(decimalLatitude ~ decimalLongitude, bird_points, pch = 16, col = 1) # bird&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-8&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-8-1.png&#34; alt=&#34;The distribution of sparrows with mean annual temperature&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 4: The distribution of sparrows with mean annual temperature
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Let’s do some simple extraction of data.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;what-range-of-temperatures-do-house-sparrows-live-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What range of temperatures do house sparrows live in?&lt;/h2&gt;
&lt;p&gt;We can use our new species distribution points to query the raster and extract values corresponding with the occurrence points. The function to query a raster is &lt;code&gt;raster::extract&lt;/code&gt;. The same can be used within &lt;code&gt;tidyverse::mutate&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get temp
temps &amp;lt;- extract(temp, SpatialPoints(cbind(bird_points$decimalLongitude, bird_points$decimalLatitude)), method = &amp;quot;bilinear&amp;quot;)
# Add new column
bird_temps &amp;lt;- cbind(bird_points, temps) 
# Remove missing temps
bird_temps &amp;lt;- bird_temps[!is.na(bird_temps$temps),]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;method = &#34;bilinear&#34;&lt;/code&gt; tells the function to interpolate the average of the nearest 4 cells around the spatial point. This is like a mini version of &lt;code&gt;buffer&lt;/code&gt; which will interpolate values within a buffer around a point. If spatial accuracy is not paramount (like here where we have a global scale raster), then this method might reduce the chance of extracting a &lt;code&gt;NA&lt;/code&gt; value. The default is to query the exact coordinate.&lt;/p&gt;
&lt;p&gt;Our final dataset contains 500 observations.&lt;/p&gt;
&lt;p&gt;Missing data at this stage could be from a mismatch between the accuracy of the spatial points and the resolution of the raster. Or plain errors in the spatial coordinates.&lt;/p&gt;
&lt;p&gt;Now we can plot the distribution of temperatures:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(bird_temps$temps, main = &amp;quot;Temperature distribution of house sparrows&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see they live between -2.7 and 8.2 °C, which here reflects the fact that all the points were sampled from northern Europe.&lt;/p&gt;
&lt;p&gt;Finally, we can plot the relationship between temperature and latitude:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(temps ~ decimalLatitude, bird_temps, pch = 16)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/spatial-data/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;End&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Beyond the valley of intermediate competence</title>
      <link>https://jacintak.github.io/post/purrr/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/purrr/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/purrr/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Earlier this year I &lt;a href=&#34;https://jacintak.github.io/post/using-mapply/&#34;&gt;wrote&lt;/a&gt; about learning to forego for loops for &lt;code&gt;apply&lt;/code&gt; functions in &lt;code&gt;R&lt;/code&gt;. I’m continuing this journey to replace for loops with &lt;code&gt;purrr&lt;/code&gt;. I’ll be honest and say that my main motivation for learning &lt;code&gt;purrr&lt;/code&gt; is the package name 🐱. &lt;code&gt;purrr&lt;/code&gt; is a package that does the same things as &lt;code&gt;mapply&lt;/code&gt; and &lt;code&gt;lapply&lt;/code&gt;; to apply a function over listed data and also has useful functions for manipulating lists and functional programming.&lt;/p&gt;
&lt;p&gt;Objectively, the functionality of &lt;code&gt;purrr&lt;/code&gt; is not that different to base functions. There’s an understandable learning curve and resulting benefit when going from for loops to &lt;code&gt;apply&lt;/code&gt; functions, but there’s diminishing return on going from &lt;code&gt;apply&lt;/code&gt; to &lt;code&gt;purrr&lt;/code&gt; unless you fully leverage the shortcuts of &lt;code&gt;tidyverse&lt;/code&gt; syntax (which I have not). The main advantage of &lt;code&gt;purrr&lt;/code&gt; is that it uses the &lt;code&gt;tidyverse&lt;/code&gt; syntax and pipes. Overall, I don’t think there’s a &lt;em&gt;huge&lt;/em&gt; benefit for using &lt;code&gt;purrr&lt;/code&gt; over base, unlike for example the advantages of using &lt;code&gt;ggplot2&lt;/code&gt; over base for graphing, but if your code is already written in &lt;code&gt;tidyverse&lt;/code&gt; then it makes sense to stick to it and have clear and consistent code (if you are used to reading &lt;code&gt;tidyverse&lt;/code&gt; syntax).&lt;/p&gt;
&lt;p&gt;If you really want to stay on the &lt;code&gt;tidyverse&lt;/code&gt; train you can skip learning &lt;code&gt;apply&lt;/code&gt; and jump straight to &lt;code&gt;purrr&lt;/code&gt; but I’m a fan of using as fewer dependencies as possible and knowing the base &lt;code&gt;R&lt;/code&gt; way. There are lots of detailed tutorials about &lt;code&gt;purrr&lt;/code&gt; and it’s functions, like &lt;a href=&#34;https://jennybc.github.io/purrr-tutorial/bk01_base-functions.html&#34;&gt;this one that discusses the differences with base functions&lt;/a&gt; so I recommend checking those out. If you’re already familiar with the &lt;code&gt;tidyverse&lt;/code&gt; syntax then &lt;code&gt;purrr&lt;/code&gt; is no different.&lt;/p&gt;
&lt;p&gt;Here are some things I’ve learnt about &lt;code&gt;purrr&lt;/code&gt; for applying functions to listed data.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;lapply&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;lapply&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;lapply&lt;/code&gt; takes one argument (data) and applies a function to it. As I found earlier, it’s quite a simple case and doesn’t suit more complex datasets I usually work with. The &lt;code&gt;purrr&lt;/code&gt; equivalent is &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One of the advantages of &lt;code&gt;purrr&lt;/code&gt; is that it you can specify the format of the output. That is, &lt;code&gt;lapply&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; takes a list and produces a list, but &lt;code&gt;map_*&lt;/code&gt; where &lt;code&gt;*&lt;/code&gt; are a range of output types will give that output type. For example, &lt;code&gt;map_chr&lt;/code&gt; will take a list and produce a character vector. This is handy because it skips an intermediate step to transform your resulting list into your desired output format, such as using &lt;code&gt;do.call&lt;/code&gt; to turn a list into a data frame.&lt;/p&gt;
&lt;div id=&#34;an-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An example&lt;/h2&gt;
&lt;p&gt;Let’s use the same code as the previous post:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# some data to use as a list
loop_data &amp;lt;- data.frame(col1 = c(11:15), col2 = c(20:24))

# define variable to change
a &amp;lt;- seq(0.2, 1, 0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, &lt;code&gt;loop_data&lt;/code&gt; is a data frame with two numeric columns (&lt;code&gt;col1&lt;/code&gt; &amp;amp; &lt;code&gt;col2&lt;/code&gt;). We technically won’t use &lt;code&gt;loop_data$col2&lt;/code&gt; but it’s there to create a 5x2 data frame. &lt;code&gt;a&lt;/code&gt; is a variable that we need for our function with 5 values.&lt;/p&gt;
&lt;p&gt;We want to add each element of &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;loop_data$col1&lt;/code&gt; and save that in a new column &lt;code&gt;loop_data$col1a&lt;/code&gt;. We will also add &lt;code&gt;a&lt;/code&gt; as a column in &lt;code&gt;loop_data&lt;/code&gt; just so we can keep track of which value was used to calculate &lt;code&gt;col1a&lt;/code&gt;. So the final output should have 25 rows (5 observations in &lt;code&gt;loop_data&lt;/code&gt; x 5 values of &lt;code&gt;a&lt;/code&gt;) and 4 columns (&lt;code&gt;col1&lt;/code&gt;, &lt;code&gt;col2&lt;/code&gt;, &lt;code&gt;col1a&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Now let’s use &lt;code&gt;map&lt;/code&gt; to do the same thing we did with &lt;code&gt;lapply&lt;/code&gt; but using &lt;code&gt;tidyverse&lt;/code&gt; and pipes 🛁&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;loop_data %&amp;gt;% 
  expand_grid(., a) %&amp;gt;% # expand to include all crossed combinations
  group_split(a) %&amp;gt;% # split into lists by the value of a for nested lists
  map_dfr(., function(x){
    x$col1a &amp;lt;- x$col1 + x$a
    return(x)
    }) %&amp;gt;% # apply the function to the list and return a data frame
  summary(.) # show the summary&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       col1         col2          a           col1a     
##  Min.   :11   Min.   :20   Min.   :0.2   Min.   :11.2  
##  1st Qu.:12   1st Qu.:21   1st Qu.:0.4   1st Qu.:12.4  
##  Median :13   Median :22   Median :0.6   Median :13.6  
##  Mean   :13   Mean   :22   Mean   :0.6   Mean   :13.6  
##  3rd Qu.:14   3rd Qu.:23   3rd Qu.:0.8   3rd Qu.:14.8  
##  Max.   :15   Max.   :24   Max.   :1.0   Max.   :16.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’re not familiar with piping this is what’s happening:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The first line is specifying our list &lt;code&gt;loop_data&lt;/code&gt; to be sent down the pipe (&lt;code&gt;%&amp;gt;%&lt;/code&gt;). Pipes are read sequentially and the output of one line is used as the input of the next line. This intermediate object is indicated by the dot (&lt;code&gt;.&lt;/code&gt;). Sometimes the dot can be left out if the arguments are presented to the function in the expected order but I find it useful to type everything out when learning anyway so that it’s clear what the arguments are. The dot is particularly needed when using base functions within a pipe, as seen in the last line with &lt;code&gt;summary(.)&lt;/code&gt; because these functions are expecting an argument that &lt;code&gt;tidyverse&lt;/code&gt; functions know how to deal with.&lt;/li&gt;
&lt;li&gt;I use &lt;code&gt;tidyr::expand_grid&lt;/code&gt; to create a data frame of all combinations of &lt;code&gt;col1&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;. This has a benefit of adding &lt;code&gt;a&lt;/code&gt; as a column.&lt;/li&gt;
&lt;li&gt;Then I use &lt;code&gt;group_split&lt;/code&gt; to group the crossed data frame based on values of &lt;code&gt;a&lt;/code&gt;. This produces a tibble which are essentially &lt;code&gt;tidyverse&lt;/code&gt; lists. &lt;code&gt;split&lt;/code&gt; is a base equivalent.&lt;/li&gt;
&lt;li&gt;Then I apply the actual function over the list and specify that I want the output to be a single data frame (the &lt;code&gt;_dfr&lt;/code&gt; suffix). This is the equivalent of doing &lt;code&gt;lapply&lt;/code&gt; and &lt;code&gt;do.call&lt;/code&gt; in the same function.&lt;/li&gt;
&lt;li&gt;Finally I use the base &lt;code&gt;R&lt;/code&gt; function &lt;code&gt;summary&lt;/code&gt; to show the summary statistics of the result to check it works. There isn’t a &lt;code&gt;tidyverse&lt;/code&gt; equivalent of &lt;code&gt;summary&lt;/code&gt; so we must use the dot within the function.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The end result is exactly the same as the original &lt;code&gt;lapply&lt;/code&gt; code. Here is the &lt;code&gt;lapply&lt;/code&gt; function from the previous post to compare:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Prepare the answer list
lapply_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)

# add a column using mapply
lapply_ans &amp;lt;- mapply(FUN = cbind, lapply_ans, &amp;quot;a&amp;quot; = a, SIMPLIFY = FALSE)

# apply function
lapply_ans &amp;lt;- lapply(lapply_ans, FUN = lapply_function)

# merge to single data frame
lapply_ans &amp;lt;- do.call(rbind, lapply_ans)

# view the data
summary(lapply_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Side note:
&lt;code&gt;rerun(length(a), loop_data)&lt;/code&gt; behaves exactly the same as &lt;code&gt;replicate(length(a), loop_data, simplify = FALSE)&lt;/code&gt; and is the &lt;code&gt;tidyverse&lt;/code&gt; equivalent (unclear for how long according to the dev notes). Then you’ll need to add &lt;code&gt;a&lt;/code&gt; as a column, matching the order of the tibble and set the column names, e.g. &lt;code&gt;rerun(length(a), loop_data) %&amp;gt;% map2(a, bind_cols) %&amp;gt;% map(a=...3, rename)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I’ve taken a slightly different approach. I define all possible combinations I want to use in the calculations then creating grouped lists.&lt;/li&gt;
&lt;li&gt;I specified the function within the pipe rather than named in the global environment like in the original post. It’s better to name the function if you’re using it multiple times but in this post I’m only using it once, so I’ll get away with it.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt; also allows formulas which for simple functions (like adding a constant to all values) will simplify the code and let
you use anonymous functions. I’m not used to the formula method of writing functions.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Instead of 5 separate lines of code with the base version, in &lt;code&gt;tidyverse&lt;/code&gt; we can do it in a pipe with 4 steps. But you notice that it’s not a huge difference between what the two approaches are doing. Still better than a for loop.
&lt;ul&gt;
&lt;li&gt;We skipped &lt;code&gt;do.call&lt;/code&gt; by using &lt;code&gt;map_dfr&lt;/code&gt; directly to return a data frame. I could also use &lt;code&gt;map&lt;/code&gt; and transform the list into a
data frame separately.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;and-another-thing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;And another thing…&lt;/h2&gt;
&lt;p&gt;We need to prepare the input data so that it is crossed; which mean replicating our list across all combinations of &lt;code&gt;col1&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;. &lt;code&gt;expand_grid&lt;/code&gt; or similar as used above could be helpful for this, and the data frame could be split into nested lists for applying the function.&lt;/p&gt;
&lt;p&gt;To contrast, this will only add matching rows of &lt;code&gt;col1&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; together rather than all combinations:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(loop_data$col1, a) %&amp;gt;%
  pmap_dfr(function(x, a) {
  df &amp;lt;- data.frame(col1 = x,
                   a = a,
                   col1a = x + a) # add answer to a new column
  return(df)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   col1   a col1a
## 1   11 0.2  11.2
## 2   12 0.4  12.4
## 3   13 0.6  13.6
## 4   14 0.8  14.8
## 5   15 1.0  16.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;map&lt;/code&gt; is the equivalent of &lt;code&gt;lapply&lt;/code&gt;, then it also doesn’t take multiple inputs, which is why we added &lt;code&gt;a&lt;/code&gt; as a column to &lt;code&gt;loop_data&lt;/code&gt;. So we turn to &lt;code&gt;mapply&lt;/code&gt; and its &lt;code&gt;purrr&lt;/code&gt; equivalent.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;mapply&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;mapply&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;purrr&lt;/code&gt; equivalent of &lt;code&gt;mapply&lt;/code&gt; is &lt;code&gt;pmap&lt;/code&gt;. Specifically, &lt;code&gt;pmap&lt;/code&gt; allows for any number of arguments for the function. There is another function, &lt;code&gt;map2&lt;/code&gt; that accepts exactly two arguments but &lt;code&gt;pmap&lt;/code&gt; is generalised to allow for more than two. As with &lt;code&gt;map&lt;/code&gt;, there are variants with suffixes that specify what output format you want, such as a data frame (&lt;code&gt;pmap_dfr&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;tidyverse&lt;/code&gt; website goes into the syntax differences between &lt;code&gt;mapply&lt;/code&gt; and &lt;code&gt;pmap&lt;/code&gt; in more &lt;a href=&#34;https://design.tidyverse.org/cs-mapply-pmap.html&#34;&gt;detail&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s jump to the example using the same &lt;code&gt;loop_function&lt;/code&gt; as the original post.&lt;/p&gt;
&lt;div id=&#34;pmap&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;pmap&lt;/code&gt;&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A function to add a value a to a data frame x
loop_function &amp;lt;- function(x, a) {
  x$col1a &amp;lt;- x$col1 + a # add answer to a new column
  x$a &amp;lt;-  a
  return(x)
}

loop_data %&amp;gt;% 
  rerun(length(a), .) %&amp;gt;% # replicate the list to populate
  list(a) %&amp;gt;% # define all variables for loop_function within a list
  pmap_dfr(loop_function) %&amp;gt;% # apply the function to the list and return a data frame
  map_dfc(summary) # show the summary&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   col1    col2    col1a   a      
##   &amp;lt;table&amp;gt; &amp;lt;table&amp;gt; &amp;lt;table&amp;gt; &amp;lt;table&amp;gt;
## 1 11      20      11.2    0.2    
## 2 12      21      12.4    0.4    
## 3 13      22      13.6    0.6    
## 4 13      22      13.6    0.6    
## 5 14      23      14.8    0.8    
## 6 15      24      16.0    1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we don’t have to add &lt;code&gt;a&lt;/code&gt; as a column to &lt;code&gt;loop_data&lt;/code&gt;, we can specify &lt;code&gt;a&lt;/code&gt; for the function. &lt;code&gt;pmap&lt;/code&gt; takes a list of arguments for the function, hence we need a list containing both &lt;code&gt;loop_data&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;. Don’t make &lt;code&gt;a&lt;/code&gt; list before adding it to the list of function arguments (i.e. double list) because it won’t match the nth &lt;code&gt;a&lt;/code&gt; variable with the nth element in the loop_data list, and match by rows within lists. For variety, I’ve used &lt;code&gt;map_dfc&lt;/code&gt; to call the function &lt;code&gt;summary&lt;/code&gt; on the data, rather than &lt;code&gt;summary(.)&lt;/code&gt;. &lt;code&gt;map_dfc&lt;/code&gt; will apply the function by columns instead of rows and produce a data frame.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;map2&lt;/code&gt; equivalent is more concise than &lt;code&gt;pmap&lt;/code&gt; for this simple example!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;loop_data %&amp;gt;% 
  rerun(length(a), .) %&amp;gt;% 
  map2_dfr(a, loop_function)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the original &lt;code&gt;mapply&lt;/code&gt; example to compare:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Prepare the answer list
mapply_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)
# mapply function
mapply_ans &amp;lt;- mapply(mapply_ans, FUN = loop_function, a = a, SIMPLIFY = FALSE)
# merge to single data frame
mapply_ans &amp;lt;- do.call(rbind, mapply_ans)
# view the data
summary(mapply_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could also define &lt;code&gt;loop_function&lt;/code&gt; as an anonymous function within &lt;code&gt;pmap&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure the variables are used in the correct order. e.g. &lt;code&gt;loop_data %&amp;gt;% rerun(length(a), .) %&amp;gt;% map_dfr(loop_function, a)&lt;/code&gt; will run because you are passing &lt;code&gt;a&lt;/code&gt; as a variable into &lt;code&gt;loop_function&lt;/code&gt;, but it’s adding &lt;code&gt;a&lt;/code&gt; by row within individual data frame rather than matching the nth element of the list. So it’s effectively replicating the data frame 5 times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;That’s it. There are many ways of doing the same thing with simple examples. Hope it helps you create &lt;code&gt;purrr&lt;/code&gt;fectly sensible code to replace for loops and apply functions to lists.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to add a Phylopic icon to your graph in R</title>
      <link>https://jacintak.github.io/post/2021-08-01-rphylopic/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-08-01-rphylopic/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-08-01-rphylopic/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;phylopic.org&#34;&gt;Phylopic&lt;/a&gt; is an online database of silhouettes of species. Most are freely available, with various copyright licences. It’s a great resource for scientific illustration or making cool presentations.&lt;/p&gt;
&lt;p&gt;One way I wanted to use Phylopic was to add a silhouette of an animal directly to an &lt;code&gt;R&lt;/code&gt; figure. You could search Phylopic yourself and copy the image id to add the icon to the graph but where’s the fun in that?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/rphylopic/readme/README.html&#34;&gt;rphylopic&lt;/a&gt; is an &lt;code&gt;R&lt;/code&gt; package that can search and retrieve icons directly from Phylopic. You can use &lt;code&gt;rphylopic&lt;/code&gt; with &lt;code&gt;ggplot2&lt;/code&gt; or base graphics.&lt;/p&gt;
&lt;p&gt;The process of searching Phylopic and pulling out the image id is not straightforward, and I didn’t find a step-by-step guide I liked for doing so, so here is a reproducible example using the built in dataset &lt;code&gt;beaver1&lt;/code&gt; - a time series of a beaver’s body temperature.&lt;/p&gt;
&lt;p&gt;The data looks like this and we want to add a beaver icon to the top left corner:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beaver_plot &amp;lt;- qplot(beaver1$temp,x = seq_along(beaver1$temp), geom = &amp;quot;line&amp;quot;, xlab = &amp;quot;Time&amp;quot;, ylab = &amp;quot;Temperature&amp;quot;)
beaver_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/2021-08-01-rphylopic/index_files/figure-html/beaver-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;step-by-step-guide-to-adding-a-phylopic-icon&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Step-by-step guide to adding a Phylopic icon&lt;/h1&gt;
&lt;div id=&#34;getting-the-right-species&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Getting the right species&lt;/h2&gt;
&lt;p&gt;You can search Phylopic by species using &lt;code&gt;name_search&lt;/code&gt;. You might get multiple hits because there may be multiple matches in the databases. It’s worth cross-referencing the NameBank ID with the website. The NameBank ID is located at the top right of the webpage. In this case we want the first option - 109179.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(rphylopic)
beaver &amp;lt;- name_search(text = &amp;quot;Castor canadensis&amp;quot;, options = &amp;quot;namebankID&amp;quot;)[[1]] # find names
beaver&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extracting-the-id-of-the-icon-you-want&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. Extracting the id of the icon you want&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;name_images&lt;/code&gt; to list all the beaver icons available. In this case, there are two versions of the beaver icon we can use - listed as &lt;code&gt;$same[[1]]&lt;/code&gt; and &lt;code&gt;$same[[2]]&lt;/code&gt; with unique &lt;code&gt;uid&lt;/code&gt;. The &lt;code&gt;uid&lt;/code&gt; is the unique id of the icon. Again, it’s handy to check the &lt;code&gt;uid&lt;/code&gt; with the website. You can find the &lt;code&gt;uid&lt;/code&gt; on the website by clicking the actual icon you want to use and copying from the address bar.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_id_all &amp;lt;- name_images(uuid = beaver$uid[1])  # list images
beaver_id_all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s use the second icon and extract only that &lt;code&gt;uid&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_id &amp;lt;- name_images(uuid = beaver$uid[1])$same[[2]]$uid  # get individual image id
beaver_id&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-the-icon-itself&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Getting the icon itself&lt;/h2&gt;
&lt;p&gt;Now we can get the actual image using &lt;code&gt;image_data&lt;/code&gt;. Each icon is available in different sizes, from a thumbnail (64 px) to large icons (1042 px). We will get a 256 px icon so that the resolution is high enough to avoid pixelation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_pic &amp;lt;- image_data(beaver_id, size = 256)[[1]] # get actual icon, define size. Don&amp;#39;t run this alone&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-the-beaver-icon-to-the-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;4. Adding the beaver icon to the plot&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;add_phylopic&lt;/code&gt; to add the icon to a &lt;code&gt;ggplot2&lt;/code&gt; graph. You need to specify the x and y axis co-ordinates for the graph. Use &lt;code&gt;ysize&lt;/code&gt; to change the size of the icon. Use &lt;code&gt;alpha&lt;/code&gt; to control the transparency. &lt;code&gt;colour&lt;/code&gt; will change the colour.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_plot + add_phylopic(beaver_pic, alpha = 1, x = 10, y = 37.4, ysize = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;featured.png&#34; style=&#34;width:70.0%&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;The final plot&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And that’s it! 🦫&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-uses-of-rphylopic&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other uses of &lt;code&gt;rphylopic&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;You can add the icon as a background image but I would question why that would be a good idea from a graphic design perspective. To do so, you don’t need to specify any other variables in &lt;code&gt;add_phylopic&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can also use icons as data points by plotting each icon in place of the regular point within a for loop. You can see an example in the &lt;code&gt;rphylopic&lt;/code&gt; documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Society for Experimental Biology Annual Meeting</title>
      <link>https://jacintak.github.io/talk/SEB2021/</link>
      <pubDate>Thu, 08 Jul 2021 14:05:00 +0000</pubDate>
      <guid>https://jacintak.github.io/talk/SEB2021/</guid>
      <description>&lt;p&gt;Insect life cycles are adapted to a seasonal climate by expressing alternative voltinism phenotypes—the number of generations in a year. The problem is to understand how this phenotypic variation along latitudinal gradients is generated through the interactions between environmental factors, like temperature, and the traits of organisms, like development rate and dormancy. However, our current understanding is limited by how thermal responses are characterised, competing theories of thermal adaptation and an incomplete understanding of complex life cycles. Using the widely distributed grasshopper genus &lt;em&gt;Warramaba&lt;/em&gt; as a model, we aimed to reconcile theories of thermal adaptation and tested their respective predictions. We hypothesised that the egg stage was a critical life stage for generating latitudinal patterns of voltinism in &lt;em&gt;Warramaba&lt;/em&gt;. We described patterns of voltinism and thermal response of egg development rate within and among species of &lt;em&gt;Warramaba&lt;/em&gt; along a latitudinal temperature gradient. We found a latitudinal pattern of univoltinism at high latitudes and multivoltinism at low latitudes that corresponded with remarkably strong divergence in egg dormancy patterns and thermal responses of egg development. We argue that the switch in voltinism along the latitudinal gradient was generated by the combined predictions of the evolution of voltinism and of thermal adaptation. We conclude that analyses of latitudinal patterns in thermal responses and corresponding life histories need to consider the evolution of thermal response curves within the context of seasonal temperature cycles rather than based solely on optimality and trade-offs in performance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BES Macro 2021</title>
      <link>https://jacintak.github.io/talk/BESMacro2021/</link>
      <pubDate>Wed, 07 Jul 2021 11:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/talk/BESMacro2021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>OSM in R</title>
      <link>https://jacintak.github.io/post/2021-07-01-OSM-in-R/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-07-01-OSM-in-R/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-07-01-OSM-in-R/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This tutorial was originally presented to NERD club on 4/2/2020.&lt;/p&gt;
&lt;div id=&#34;city-maps&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;City maps&lt;/h1&gt;
&lt;p&gt;Consider yourself a hipster?&lt;br /&gt;
Do the clean lines and natural materials of modern scandi make you feel at home?&lt;br /&gt;
Is your basic coffee order a flat white? ☕&lt;/p&gt;
&lt;p&gt;If the answer to all the above is YES, then here’s a present for you!&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/61-dKVczbXL._SL1000_.jpg&#34; title=&#34;fig:&#34; width=&#34;250&#34; alt=&#34;A map of Dublin&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;em&gt;But wait!&lt;/em&gt; This poster costs €30 (thereabouts) online!
&lt;a href=&#34;https://www.etsy.com/ie/listing/561937898/dublin-print-dublin-city-map-dublin&#34;&gt;See example&lt;/a&gt;.&lt;br /&gt;
That’s approximately 9 flat whites you could have had.&lt;br /&gt;
☕☕☕☕☕☕☕☕☕&lt;br /&gt;
Can you make this in R?, you ask, asking for a friend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fear not&lt;/strong&gt;. You can make this yourself in R!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;maps-in-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Maps in R&lt;/h1&gt;
&lt;p&gt;In this tutorial we will replicate a poster like this. We will need R and powerpoint to put in the final touches. You could do it fully in R but powerpoint will make our lives a bit easier. In summary, it requires a bit of GIS wrangling to code in what you want to display.&lt;/p&gt;
&lt;p&gt;The data is freely available from &lt;a href=&#34;https://www.openstreetmap.org&#34;&gt;Openstreetmap&lt;/a&gt;, for proprietary haters out there. I will refer to it as OSM.&lt;/p&gt;
&lt;p&gt;We will be following &lt;a href=&#34;https://ggplot2tutor.com/streetmaps/streetmaps/&#34;&gt;this&lt;/a&gt; tutorial.&lt;/p&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;You will need to install the relevant packages: &lt;code&gt;osmdata&lt;/code&gt;, &lt;code&gt;tidyverse&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#install.packages(&amp;quot;osmdata&amp;quot;, &amp;quot;tidyverse&amp;quot;, &amp;quot;sf&amp;quot;)
library(osmdata)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see this will use tidyverse and I will be using piping. Don’t worry if you are not a master at piping. The code is written.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a nutshell, instead of function2(function1(X)) to apply function 1 &lt;em&gt;then&lt;/em&gt; function 2 to X, you type x %&amp;gt;% function1() %&amp;gt;% function2(). I.E. take X, apply function 1, then apply function 2 to the resulting output. Overall it’s easier to read, hence it’s ‘tidy’.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;osm-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;OSM data&lt;/h2&gt;
&lt;p&gt;OSM stores various features you can explore under &lt;code&gt;available_features()&lt;/code&gt;. You can see what is under each feature with &lt;code&gt;available_tags(&#34;&amp;lt;insert feature name here&amp;gt;&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;get-city-co-ordinates&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. Get city co-ordinates&lt;/h1&gt;
&lt;p&gt;For this example we will make a map of Dublin. First we need the latitude and longitude of Dublin. If you want to modify the extent of your map, this is where you change the co-ordinates.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;city_coords &amp;lt;- getbb(&amp;quot;Dublin Ireland&amp;quot;)
#city_coords &amp;lt;- c(-6.391,53.2644,-6.114883, 53.416) # to get all the M50&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-map-features&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. Get map features&lt;/h1&gt;
&lt;div id=&#34;roads&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Roads&lt;/h2&gt;
&lt;p&gt;We can get roads by querying OSM for the GPS co-ordinates for Dublin and saving it to a variable called &lt;em&gt;roads&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;roads &amp;lt;- city_coords %&amp;gt;% #pipe!
  opq() %&amp;gt;% # create query for OSM database
  add_osm_feature(key = &amp;quot;highway&amp;quot;, 
                  value = c(&amp;quot;motorway&amp;quot;, &amp;quot;primary&amp;quot;, 
                            &amp;quot;secondary&amp;quot;, &amp;quot;tertiary&amp;quot;)) %&amp;gt;%
  osmdata_sf() # save it as an simple features format
roads&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;streets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Streets&lt;/h2&gt;
&lt;p&gt;We can do the same for streets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;streets &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;highway&amp;quot;, 
                  value = c(&amp;quot;residential&amp;quot;, &amp;quot;living_street&amp;quot;,
                            &amp;quot;unclassified&amp;quot;,
                            &amp;quot;service&amp;quot;, &amp;quot;footway&amp;quot;)) %&amp;gt;%
  osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;water&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Water&lt;/h2&gt;
&lt;p&gt;Can’t forget the Liffey and the canals. Sadly the ocean cannot be mapped.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;water &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;waterway&amp;quot;, value = c(&amp;quot;canal&amp;quot;, &amp;quot;river&amp;quot;)) %&amp;gt;%
  osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;3. Plotting&lt;/h1&gt;
&lt;p&gt;Time to call &lt;code&gt;ggplot2&lt;/code&gt; and plot our map.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map &amp;lt;- ggplot() +
  # roads
  geom_sf(data = roads$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;grey&amp;quot;, # colour of feature
          size = 0.8,       # Size on map
          alpha = 0.8) +    # transparency
  # streets
  geom_sf(data = streets$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;#ffbe7f&amp;quot;,
          size = 0.2,
          alpha = 0.6) +
  # water
  geom_sf(data = water$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;steelblue&amp;quot;,
          size = 0.8,
          alpha = 0.5) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE) +
  # remove axes
  theme_void()

map&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;labels&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;4. Labels&lt;/h1&gt;
&lt;p&gt;At this point it is easier to save the file and add text in powerpoint but if you want to try your hand at ggplot’s annotation features go ahead.&lt;/p&gt;
&lt;p&gt;Here I’ve done one in a dark colour scheme.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme_colour &amp;lt;- &amp;quot;#282828&amp;quot; # dark theme

dark_map &amp;lt;- map +
  labs(caption = &amp;quot;Dublin, Ireland&amp;quot;) +
  theme(axis.text = element_blank(),
        plot.margin=unit(c(1,1,1,1),&amp;quot;cm&amp;quot;),
        panel.grid.major = element_line(colour = theme_colour),
        panel.grid.minor = element_line(colour = theme_colour),
        plot.background = element_rect(fill = theme_colour),
        panel.background = element_rect(fill = theme_colour),
        plot.caption = element_text(size = 24, colour = &amp;quot;white&amp;quot;, hjust = 0.5, vjust = -2, family = &amp;quot;mono&amp;quot;),
        panel.border = element_rect(colour = &amp;quot;white&amp;quot;, fill=NA, size=2),
        axis.ticks = element_blank())

dark_map&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;saving-our-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Saving our map&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ggsave(plot = dark_map, filename = &amp;quot;NERD/dark_dublin.pdf&amp;quot;, width = 11, height = 8.5, device = &amp;quot;pdf&amp;quot;, dpi = 300)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;If all of that was too much, there’s an R package for it. &lt;a href=&#34;https://github.com/lina2497/Giftmap&#34; class=&#34;uri&#34;&gt;https://github.com/lina2497/Giftmap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is also a &lt;a href=&#34;https://anvaka.github.io/city-roads/&#34;&gt;website&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;extra-details&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Extra details&lt;/h1&gt;
&lt;p&gt;Less is more but if you really want to put more features:&lt;/p&gt;
&lt;div id=&#34;other-water-bodies&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other water bodies&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;extra_water &amp;lt;- city_coords %&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;natural&amp;quot;, value = c(&amp;quot;water&amp;quot;)) %&amp;gt;%
  osmdata_sf()

dark_map +
   geom_sf(data = extra_water$osm_polygons,
          inherit.aes = FALSE,
          fill = &amp;quot;steelblue&amp;quot;,
          colour = NA,
          alpha = 0.5) +
  geom_sf(data = extra_water$osm_multipolygons,
          inherit.aes = FALSE,
          fill = &amp;quot;steelblue&amp;quot;,
          colour = NA,
          alpha = 0.5) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;parks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Parks&lt;/h2&gt;
&lt;p&gt;Nature reserves including Dublin Bay&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;park &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;leisure&amp;quot;, value = c(&amp;quot;park&amp;quot;)) %&amp;gt;%
  osmdata_sf()

dark_map +
   geom_sf(data = park$osm_polygons,
          inherit.aes = FALSE,
          fill = &amp;quot;darkgreen&amp;quot;,
          colour = NA,
          alpha = 0.3) +
  geom_sf(data = park$osm_multipolygons,
          inherit.aes = FALSE,
          fill = &amp;quot;darkgreen&amp;quot;,
          colour = NA,
          alpha = 0.3) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;end&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;End&lt;/h1&gt;
&lt;p&gt;That’s the gist of using OSM in &lt;code&gt;R&lt;/code&gt;. You can use the same code to make any map, e.g. for a paper.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>colRoz - A colour package for the land down under</title>
      <link>https://jacintak.github.io/project/colRoz/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/project/colRoz/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/project/colRoz/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#list-of-palettes&#34;&gt;1. List of palettes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#understanding-the-structure-of-the-palette&#34;&gt;Understanding the structure of the palette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#defining-and-using-a-palette&#34;&gt;2. Defining and using a palette&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visualise-a-palette&#34;&gt;3. Visualise a palette&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#palettes&#34;&gt;Palettes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#palette-by-categories&#34;&gt;Palette by categories&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#birds&#34;&gt;Birds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fish&#34;&gt;Fish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#frogs&#34;&gt;Frogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#inverts&#34;&gt;Inverts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#landscapes&#34;&gt;Landscapes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lizards&#34;&gt;Lizards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mammals&#34;&gt;Mammals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plants&#34;&gt;Plants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#snakes&#34;&gt;Snakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#warramaba-grasshoppers&#34;&gt;&lt;em&gt;Warramaba&lt;/em&gt; grasshoppers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;colRoz&lt;/code&gt; is a themed colour palette package by Jacinta Kong &amp;amp; Nicholas Wu.&lt;br /&gt;
The palettes are based on the colour schemes of Australia.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;colRoz&lt;/code&gt; can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate a palette of discrete colours of a specified number&lt;/li&gt;
&lt;li&gt;Generate a gradient continuous colours of a specified number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this, there are three functions described below. Before that, let’s set up this introduction.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;devtools::install_github(&amp;quot;jacintak/colRoz&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;colRoz&lt;/code&gt; works with base &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;ggplot2&lt;/code&gt; because it is a palette generator and doesn’t have a built in &lt;code&gt;ggplot&lt;/code&gt; palette function.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;list-of-palettes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. List of palettes&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;oz_palettes&lt;/code&gt; function contains the list of palettes available. Individual palettes are gouped by theme in a list. The &lt;code&gt;oz_palettes&lt;/code&gt; variable is a list of these collated lists.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(oz_palettes) # See all palette themes
 [1] &amp;quot;warramaba&amp;quot;  &amp;quot;lizards&amp;quot;    &amp;quot;landscapes&amp;quot; &amp;quot;birds&amp;quot;      &amp;quot;frogs&amp;quot;     
 [6] &amp;quot;snakes&amp;quot;     &amp;quot;plants&amp;quot;     &amp;quot;fish&amp;quot;       &amp;quot;inverts&amp;quot;    &amp;quot;mammals&amp;quot;   
names(oz_palettes$lizards) # See all lizard palettes
 [1] &amp;quot;c.decresii&amp;quot;    &amp;quot;c.kingii&amp;quot;      &amp;quot;e.leuraensis&amp;quot;  &amp;quot;i.lesueurii&amp;quot;  
 [5] &amp;quot;l.boydii&amp;quot;      &amp;quot;m.horridus&amp;quot;    &amp;quot;m.horridus2&amp;quot;   &amp;quot;t.nigrolutea&amp;quot; 
 [9] &amp;quot;v.acanthurus&amp;quot;  &amp;quot;v.pilbarensis&amp;quot; &amp;quot;n.levis&amp;quot;       &amp;quot;s.spinigerus&amp;quot; 
[13] &amp;quot;e.kingii&amp;quot;     &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can call a specific list using subsetting rules for lists.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oz_palettes[[&amp;quot;warramaba&amp;quot;]][[&amp;quot;whitei&amp;quot;]] # Subset the palette for Warramaba whitei, format: [[theme list]][[palette list]]
     [,1]      [,2]      [,3]      [,4]      [,5]      [,6]     
[1,] &amp;quot;#E5A430&amp;quot; &amp;quot;#9C7210&amp;quot; &amp;quot;#D7A8B8&amp;quot; &amp;quot;#BAB24F&amp;quot; &amp;quot;#392821&amp;quot; &amp;quot;#9B391B&amp;quot;
[2,] &amp;quot;1&amp;quot;       &amp;quot;3&amp;quot;       &amp;quot;6&amp;quot;       &amp;quot;5&amp;quot;       &amp;quot;4&amp;quot;       &amp;quot;2&amp;quot;      
oz_palettes$warramaba$whitei # does the same as above but using list names
     [,1]      [,2]      [,3]      [,4]      [,5]      [,6]     
[1,] &amp;quot;#E5A430&amp;quot; &amp;quot;#9C7210&amp;quot; &amp;quot;#D7A8B8&amp;quot; &amp;quot;#BAB24F&amp;quot; &amp;quot;#392821&amp;quot; &amp;quot;#9B391B&amp;quot;
[2,] &amp;quot;1&amp;quot;       &amp;quot;3&amp;quot;       &amp;quot;6&amp;quot;       &amp;quot;5&amp;quot;       &amp;quot;4&amp;quot;       &amp;quot;2&amp;quot;      &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;understanding-the-structure-of-the-palette&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Understanding the structure of the palette&lt;/h2&gt;
&lt;p&gt;Lists within lists may seem daunting but you’d rarely need to access the palettes individually. It is also easy enough to add your own palettes if you are comfortable with manually editing package functions in R.&lt;/p&gt;
&lt;p&gt;We are happy to accept community contributions. Adding pre-chosen hex codes is easy to do. It may take longer to make a palette if we need to chose hex colours from an image.&lt;/p&gt;
&lt;p&gt;The general structure for a set of palettes is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;palette &amp;lt;- list(
pal1 = rbind(c(&amp;lt;hex codes&amp;gt;), c(&amp;lt;order of discrete colours&amp;gt;))
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Two things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The hex codes are stored as a vector in the first row of the list&lt;/li&gt;
&lt;li&gt;The second row of the list is a vector of the order colours are used when plotting discrete colours&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;defining-and-using-a-palette&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. Defining and using a palette&lt;/h1&gt;
&lt;p&gt;The palettes in this package are set as above. The main function is the palette generator. It acts as a housekeeping function to allow R to interpret the desired palette for plotting. The behaviour of this function depends on whether a discrete or continuous palette is desired and the number of colours requested.&lt;/p&gt;
&lt;p&gt;If a discrete palette of 3 colours is desired, then the function will chose the subset of 3 colours to be included from the full option of colours in a palette. The chosen order of these colours is hard coded in the list of palette.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; there is no need to tell &lt;code&gt;colRoz&lt;/code&gt; what theme the palette you want is in. Type in the palette name and &lt;code&gt;colRoz&lt;/code&gt; will search the entire &lt;code&gt;oz_palette&lt;/code&gt; list&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pal &amp;lt;- colRoz_pal(name = &amp;quot;ngadju&amp;quot;, n = 3, type = &amp;quot;discrete&amp;quot;)
# a palette of only 3 colours

library(ggplot2)
ggplot(iris, aes(Petal.Width, Petal.Length , colour=Species)) +
geom_point() +
scale_colour_manual(values = pal) +
theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/project/colRoz/index_files/figure-html/discrete-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If a continuous palette is desired, then the function will use the function &lt;code&gt;colorRampPalette&lt;/code&gt; in the &lt;code&gt;grDevices&lt;/code&gt; package (included in &lt;code&gt;R&lt;/code&gt;) to generate a gradient of colours between the first and last colour in the desired palette.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#34;continuous&#34;&lt;/code&gt; palettes are generated by default if the type argument is left blank. In &lt;code&gt;ggplot2&lt;/code&gt;, use the function &lt;code&gt;scale_colour_gradientn&lt;/code&gt; to set the continuous scale.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pal &amp;lt;- colRoz_pal(name = &amp;quot;ngadju&amp;quot;, n = 50, type = &amp;quot;continuous&amp;quot;)

ggplot(iris, aes(Petal.Width, Sepal.Length , colour=Petal.Length)) +
geom_point() +
scale_colour_gradientn(colours = pal) +
theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/project/colRoz/index_files/figure-html/cont-1.png&#34; width=&#34;672&#34; /&gt;
***&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualise-a-palette&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;3. Visualise a palette&lt;/h1&gt;
&lt;p&gt;The function to plot the palette is only for graphing. Information is taken about the number of colours to plot from the desired palette and the palette is plotted. The name of the palette is shown.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print_palette(colRoz_pal(&amp;quot;c.decresii&amp;quot;))# if empty, all colours are shown&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/project/colRoz/index_files/figure-html/print-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print_palette(colRoz_pal(&amp;quot;c.decresii&amp;quot;, type = &amp;quot;discrete&amp;quot;, n = 4))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/project/colRoz/index_files/figure-html/print-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print_palette(colRoz_pal(&amp;quot;c.decresii&amp;quot;, type = &amp;quot;continuous&amp;quot;, n = 30))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/project/colRoz/index_files/figure-html/print-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;palettes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Palettes&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;colRoz&lt;/code&gt; has a number of palettes sorted by categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Birds&lt;/li&gt;
&lt;li&gt;Fish&lt;/li&gt;
&lt;li&gt;Frogs&lt;/li&gt;
&lt;li&gt;Inverts&lt;/li&gt;
&lt;li&gt;Landscapes&lt;/li&gt;
&lt;li&gt;Lizards&lt;/li&gt;
&lt;li&gt;Mammals&lt;/li&gt;
&lt;li&gt;Plants&lt;/li&gt;
&lt;li&gt;Snakes&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Warramaba&lt;/em&gt; grasshoppers&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;palette-by-categories&#34; class=&#34;section level1 tabset&#34;&gt;
&lt;h1&gt;Palette by categories&lt;/h1&gt;
&lt;div id=&#34;birds&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Birds&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(oz_palettes$birds)
[1] &amp;quot;p.cincta&amp;quot;  &amp;quot;c.azureus&amp;quot; &amp;quot;m.cyaneus&amp;quot; &amp;quot;d.novae&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;images/p.cincta.png&#34; height=&#34;200&#34; /&gt; Black-throated finch. Australia’s 2019 Bird of the Year!&lt;/p&gt;
&lt;p&gt;Azure kingfisher photo by Brenton von Takach&lt;br /&gt;
&lt;img src=&#34;images/c.azureus.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/EJS2kIUUwAAbnrJ?format=jpg&#34; height=&#34;200&#34; alt=&#34;Azure kingfisher photo by Brenton von Takach&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Superb fairywren photo by Jessica McLachlan&lt;br /&gt;
&lt;img src=&#34;images/m.cyaneus.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/EJTPlMeU4AAz2hM?format=jpg&#34; height=&#34;200&#34; alt=&#34;Superb fairywren photo by Jessica McLachlan&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Emu&lt;br /&gt;
&lt;img src=&#34;images/d.novae.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DByGzv_UMAAQEaf?format=jpg&#34; height=&#34;200&#34; alt=&#34;Emus&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;fish&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fish&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(oz_palettes$fish)
[1] &amp;quot;r.aculeatus&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Picasso triggerfish photo by Brenton von Takach. Also called humuhumunukunukuapuaa in Hawaiian (see also the Octonauts episode)&lt;br /&gt;
&lt;img src=&#34;images/r.aculeatus.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/EJS2knkUUAUrIOf?format=jpg&#34; height=&#34;200&#34; alt=&#34;Picasso triggerfish photo by Brenton von Takach&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;frogs&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Frogs&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(oz_palettes$frogs)
NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are no frog palettes yet! Send us some and have your name here.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;inverts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inverts&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(oz_palettes$inverts)
 [1] &amp;quot;p.mitchelli&amp;quot;    &amp;quot;k.tristis&amp;quot;      &amp;quot;m.oscellata&amp;quot;    &amp;quot;a.conica&amp;quot;      
 [5] &amp;quot;v.viatica&amp;quot;      &amp;quot;c.brevi&amp;quot;        &amp;quot;a.westwoodi&amp;quot;    &amp;quot;a.plagiata&amp;quot;    
 [9] &amp;quot;physalia&amp;quot;       &amp;quot;c.australasiae&amp;quot; &amp;quot;k.scurra&amp;quot;       &amp;quot;l.vestiens&amp;quot;    
[13] &amp;quot;t.australis&amp;quot;   &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mitchell’s diurnal cockroach photo by Craig White&lt;br /&gt;
&lt;img src=&#34;images/p.mitchelli.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/EJPDtK9U8AAI2Fj?format=jpg&#34; height=&#34;200&#34; alt=&#34;Mitchell’s diurnal cockroach photo by Craig White&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Chameleon grasshopper photo by Kate Umbers&lt;br /&gt;
&lt;img src=&#34;images/k.tristis.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/EJP7PsOVUAAmZ6F?format=jpg&#34; height=&#34;200&#34; alt=&#34;Chameleon grasshopper photo by Kate Umbers&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Gaudy acacia grasshopper&lt;br /&gt;
&lt;img src=&#34;images/m.oscellata.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DDYNz6eUAAA4aVn?format=jpg&#34; height=&#34;200&#34; alt=&#34;Gaudy acacia grasshopper&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Giant green slant-face&lt;br /&gt;
&lt;img src=&#34;images/a.conica.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DDYK1S9V0AQG_5o?format=jpg&#34; height=&#34;200&#34; alt=&#34;Giant green slant-face&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Matchstick grasshopper, VIC. See &lt;a href=&#34;https://jacintakongresearch.wordpress.com/matchstick-grasshoppers/vandiemenella-grasshoppers/&#34;&gt;Vandiemenella grasshoppers&lt;/a&gt;&lt;br /&gt;
&lt;img src=&#34;images/v.viatica.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/D4t79BqVUAAsk7p?format=jpg&#34; height=&#34;200&#34; alt=&#34;Matchstick grasshopper&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Short-tailed nudibranch, Port Philip Bay, VIC&lt;br /&gt;
&lt;img src=&#34;images/c.brevi.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DyoaIvSUcAAB4v1?format=jpg&#34; height=&#34;200&#34; alt=&#34;Short-tailed nudibranch&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Tortoise beetle&lt;br /&gt;
&lt;img src=&#34;images/a.westwoodi.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/Dw1KlEEV4AACNUv?format=jpg&#34; height=&#34;200&#34; alt=&#34;Tortoise beetle&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Two-spots tiger moth&lt;br /&gt;
&lt;img src=&#34;images/a.plagiata.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/Dv9eUKSUwAESOXO?format=jpg&#34; height=&#34;200&#34; alt=&#34;Two-spots tiger moth&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Bluebottle. Undescribed species&lt;br /&gt;
&lt;img src=&#34;images/physalia.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DvtLJTpUYAEFvP6?format=jpg&#34; height=&#34;200&#34; alt=&#34;Bluebottle&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Green grocer cicada&lt;br /&gt;
&lt;img src=&#34;images/c.australasiae.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/Cz9NxjMUsAAIwEO?format=jpg&#34; height=&#34;200&#34; alt=&#34;Green grocer cicada&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Key’s matchstick grasshopper. See more info about &lt;a href=&#34;https://camelunimelb.wordpress.com/2019/09/17/a-grave-situation-for-keys-matchstick-grasshopper/&#34;&gt;&lt;em&gt;K. scurra&lt;/em&gt;&lt;/a&gt;&lt;br /&gt;
&lt;img src=&#34;images/k.scurra.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DVePWCYU8AEd6ML?format=jpg&#34; height=&#34;200&#34; alt=&#34;Key’s matchstick grasshopper&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Sea cucumber, intertidal VIC&lt;br /&gt;
&lt;img src=&#34;images/l.vestiens.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DTt5cQ-VoAEUB2l?format=jpg&#34; height=&#34;200&#34; alt=&#34;Sea cucumber&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Biscuit star, Port Phillip Bay, VIC&lt;br /&gt;
&lt;img src=&#34;images/t.australis.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DAVSdXkV0AAWtTN?format=jpg&#34; height=&#34;200&#34; alt=&#34;starfish&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;landscapes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Landscapes&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(oz_palettes$landscapes)
 [1] &amp;quot;uluru&amp;quot;         &amp;quot;shark_bay&amp;quot;     &amp;quot;sky&amp;quot;           &amp;quot;desert_sunset&amp;quot;
 [5] &amp;quot;desert_dusk&amp;quot;   &amp;quot;desert_flood&amp;quot;  &amp;quot;salt_lake&amp;quot;     &amp;quot;daintree&amp;quot;     
 [9] &amp;quot;spinifex&amp;quot;      &amp;quot;nq_stream&amp;quot;     &amp;quot;kimberley&amp;quot;     &amp;quot;capricorn&amp;quot;    &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;images/desert_sunset.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://jacintakongresearch.files.wordpress.com/2016/04/banner8.jpg?resize=438%2C438&#34; height=&#34;200&#34; alt=&#34;desert sunset&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/shark_bay.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/CZ31lRQXEAI4uXk?format=jpg&#34; height=&#34;200&#34; alt=&#34;shark bay&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Photo from Jordan Iles&lt;br /&gt;
&lt;img src=&#34;images/nq_stream.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/EJSHoZTUEAA-r0w?format=jpg&#34; height=&#34;200&#34; alt=&#34;Photo from Jordan Iles&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/capricorn.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DQbVslaVwAAJyV1?format=jpg&#34; height=&#34;200&#34; alt=&#34;Tropic of Capricorn&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/sky.png&#34; height=&#34;200&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;images/desert_dusk.png&#34; height=&#34;200&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;images/desert_flood.png&#34; height=&#34;200&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;images/salt_lake.png&#34; height=&#34;200&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;images/daintree.png&#34; height=&#34;200&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;images/kimberley.png&#34; height=&#34;200&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;images/uluru.png&#34; height=&#34;200&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;images/spinifex.png&#34; height=&#34;200&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;lizards&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Lizards&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(oz_palettes$lizards)
 [1] &amp;quot;c.decresii&amp;quot;    &amp;quot;c.kingii&amp;quot;      &amp;quot;e.leuraensis&amp;quot;  &amp;quot;i.lesueurii&amp;quot;  
 [5] &amp;quot;l.boydii&amp;quot;      &amp;quot;m.horridus&amp;quot;    &amp;quot;m.horridus2&amp;quot;   &amp;quot;t.nigrolutea&amp;quot; 
 [9] &amp;quot;v.acanthurus&amp;quot;  &amp;quot;v.pilbarensis&amp;quot; &amp;quot;n.levis&amp;quot;       &amp;quot;s.spinigerus&amp;quot; 
[13] &amp;quot;e.kingii&amp;quot;     &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tawny dragon&lt;br /&gt;
&lt;img src=&#34;images/c.decresii.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/jacintak/colRoz/gh-pages/raw_images/c.decresii.jpg&#34; height=&#34;200&#34; alt=&#34;Tawny dragon&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Blue Mountains water skink&lt;br /&gt;
&lt;img src=&#34;images/e.leuraensis.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/jacintak/colRoz/gh-pages/raw_images/e.leuraensis_P.Soltys.jpg&#34; height=&#34;200&#34; alt=&#34;Blue Mountains water skink&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Thorny devil&lt;br /&gt;
&lt;img src=&#34;images/m.horridus.png&#34; height=&#34;200&#34; /&gt; &lt;img src=&#34;images/m.horridus2.png&#34; height=&#34;200&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/jacintak/colRoz/gh-pages/raw_images/m.horridus_R.Gibbon.jpg&#34; height=&#34;200&#34; alt=&#34;Thorny devil&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Blotched blue-tongued skink&lt;br /&gt;
&lt;img src=&#34;images/t.nigrolutea.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/jacintak/colRoz/gh-pages/raw_images/T.nigrolutea_P.Soltys.jpg&#34; height=&#34;200&#34; alt=&#34;Blotched blue-tongued skink&#34; /&gt;&lt;/p&gt;
&lt;p&gt;South-western spiny tailed gecko&lt;br /&gt;
&lt;img src=&#34;images/s.spinigerus.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/CaChB8NVAAAcFfv?format=jpg&#34; height=&#34;200&#34; alt=&#34;South-western spiny tailed gecko&#34; /&gt;&lt;/p&gt;
&lt;p&gt;King’s skink&lt;br /&gt;
&lt;img src=&#34;images/e.kingii.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DWPbO5jVAAA4A88?format=jpg&#34; height=&#34;200&#34; alt=&#34;King’s skink&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Three-lined knobtail gecko&lt;br /&gt;
&lt;img src=&#34;images/n.levis.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/EKKspz0XkAE5H4-.jpg&#34; height=&#34;200&#34; alt=&#34;Three-lined knobtail gecko&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/c.kingii.png&#34; height=&#34;200&#34; /&gt; Frilled-neck lizard&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/i.lesueurii.png&#34; height=&#34;200&#34; /&gt; Eastern water dragon&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/l.boydii.png&#34; height=&#34;200&#34; /&gt; Boyd’s forest dragon&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/v.acanthurus.png&#34; height=&#34;200&#34; /&gt; Spiny-tailed monitor&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/v.pilbarensis.png&#34; height=&#34;200&#34; /&gt; Pilbara rock monitor&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;mammals&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mammals&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(oz_palettes$mammals)
[1] &amp;quot;p.breviceps&amp;quot; &amp;quot;thylacine&amp;quot;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sugar glider&lt;br /&gt;
&lt;img src=&#34;images/p.breviceps.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DkKQD_0V4AA35P6?format=jpg&#34; height=&#34;200&#34; alt=&#34;Sugar glider&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Thylacine (&lt;em&gt;T. cynocephalus&lt;/em&gt;)&lt;br /&gt;
&lt;img src=&#34;images/thylacine.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/Cy6PuK7UsAEdY6M?format=jpg&#34; height=&#34;200&#34; alt=&#34;Thylacine&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;plants&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plants&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(oz_palettes$plants)
[1] &amp;quot;n.violacea&amp;quot; &amp;quot;xantho&amp;quot;    &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Blue lily photo by Emma Dalziell&lt;br /&gt;
&lt;img src=&#34;images/n.violacea.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/EJPQuZgU8AAOlsm?format=jpg&#34; height=&#34;200&#34; alt=&#34;Blue lily photo by Emma Dalziell&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Xanthorrhoea&lt;/em&gt; grasstree photo by Sarah Mulhall&lt;br /&gt;
&lt;img src=&#34;images/xantho.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/EJQBJywUcAEkxDN?format=jpg&#34; height=&#34;200&#34; alt=&#34;grasstree photo by Sarah Mulhall&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;snakes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Snakes&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(oz_palettes$snakes)
[1] &amp;quot;a.ramsayi&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;images/a.ramsayi.png&#34; height=&#34;200&#34; /&gt; Woma python&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;warramaba-grasshoppers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;em&gt;Warramaba&lt;/em&gt; grasshoppers&lt;/h2&gt;
&lt;p&gt;These are palettes based on the colours of matchstick grasshoppers in the genus Warramaba.
You can read more about matchstick grasshoppers on &lt;a href=&#34;https://jacintakongresearch.wordpress.com/matchstick-grasshoppers/warramaba/&#34;&gt;Jacinta’s website&lt;/a&gt;.&lt;br /&gt;
There are other matchstick grasshopper palettes in the &lt;code&gt;inverts&lt;/code&gt; palette.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(oz_palettes$warramaba)
[1] &amp;quot;grandis&amp;quot;      &amp;quot;flavolineata&amp;quot; &amp;quot;whitei&amp;quot;       &amp;quot;picta&amp;quot;        &amp;quot;virgo&amp;quot;       
[6] &amp;quot;ngadju&amp;quot;      &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;images/whitei.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/DdZBdwdUwAEOGdV?format=jpg&#34; height=&#34;200&#34; alt=&#34;whitei&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/grandis.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/C4IX6U_WYAEdRMl?format=jpg&#34; height=&#34;200&#34; alt=&#34;grandis&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/picta.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/C4VvvltUoAAnw_q?format=jpg&#34; height=&#34;200&#34; alt=&#34;picta&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/flavolineata.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://jacintakongresearch.files.wordpress.com/2019/11/grasshoppers-jpegs20160510154548-2.jpg?resize=438%2C438&#34; height=&#34;200&#34; alt=&#34;flavolineata&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/ngadju.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://jacintakongresearch.files.wordpress.com/2015/03/file_000.jpeg&#34; height=&#34;200&#34; alt=&#34;ngadju&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/virgo.png&#34; height=&#34;200&#34; /&gt;
&lt;img src=&#34;https://pbs.twimg.com/media/ChI_71tUYAAMu5H?format=jpg&#34; height=&#34;200&#34; alt=&#34;virgo&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>NERD club tutorials</title>
      <link>https://jacintak.github.io/project/NERD-club/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/project/NERD-club/</guid>
      <description>


&lt;p&gt;NERD club is a student-led peer-learning and discussion group for staff and postgraduate students in the Departments of Zoology and Botany at Trinity College Dublin. The group meets weekly for topical discussions about science or academia. There are also sub-groups that are dedicated towards specific topics such as R coding and spatial analysis. These sub-groups are focused towards peer-learning where, postgraduates in particular, are encouraged to share their learning experience and expertise in relevant topics.&lt;/p&gt;
&lt;p&gt;I have been an active contributor to NERD club and its sub-groups: R club for R programming and Space Lunch for GIS and spatial analysis. This page documents some of the outputs I have produced for peer-learning activities.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;tutorials&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tutorials&lt;/h1&gt;
&lt;div id=&#34;introduction-to-blogdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction to &lt;code&gt;blogdown&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A short workshop giving an introduction to the &lt;code&gt;blogdown&lt;/code&gt; workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;advanced-r-markdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Advanced R markdown&lt;/h2&gt;
&lt;p&gt;This is a short presentation showing some of the more advanced features of R Markdown using the &lt;code&gt;R&lt;/code&gt; package &lt;code&gt;bookdown&lt;/code&gt; including: numbered sections, cross-referencing, bibliographies, CSS and making a website with the static HTML builder.&lt;/p&gt;
&lt;p&gt;PDF: &lt;a class=&#34;fas fa-file-pdf&#34; href=&#34;https://jacintak.github.io/files/24March2021_Advanced_R_Markdown.pdf&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;interactive-functions-and-loops-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Interactive functions and loops in &lt;code&gt;R&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This &lt;a href=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/&#34;&gt;tutorial&lt;/a&gt; describes how to make an &lt;code&gt;R&lt;/code&gt; function that asks the user to input values for the function, and how to run a function within a simple for loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;osm-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;OSM in R&lt;/h2&gt;
&lt;p&gt;This &lt;a href=&#34;https://jacintak.github.io/post/2021-07-01-OSM-in-R/&#34;&gt;tutorial&lt;/a&gt; describes how to interface with Open Street Maps in &lt;code&gt;R&lt;/code&gt; to make a fancy map you can print and give to someone but the same code can be used to make maps for any purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction-to-spatial-points-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction to spatial points in R&lt;/h2&gt;
&lt;p&gt;This is a walkthrough of a basic workflow for working with spatial data and rasters in R. Specifically loading a raster, plotting a raster and extracting information from rasters. I use &lt;code&gt;rgbif&lt;/code&gt; to get species occurrence records from GBIF and extract temperature data from a raster of global temperatures. A blog post version is &lt;a href=&#34;https://jacintak.github.io/post/spatial-data/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;HTML: &lt;a class=&#34;fas fa-file&#34; href=&#34;https://jacintak.github.io/Rasters_SpaceClub_06102021&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fundamental-linear-regression-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fundamental linear regression in &lt;code&gt;R&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is a short presentation showing some of the basic features of linear regression in &lt;code&gt;R&lt;/code&gt; using &lt;code&gt;lm&lt;/code&gt; including: ANOVA tables, &lt;code&gt;summary&lt;/code&gt; and residual plots.&lt;/p&gt;
&lt;p&gt;PDF: &lt;a class=&#34;fas fa-file-pdf&#34; href=&#34;https://jacintak.github.io/files/20Oct2021_linear_models.pdf&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;model-selection-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Model selection in &lt;code&gt;R&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;An introduction to model parsimony and basic ways of selecting linear models and predictor variables.&lt;/p&gt;
&lt;p&gt;PDF: &lt;a class=&#34;fas fa-file-pdf&#34; href=&#34;https://jacintak.github.io/files/16Feb2022_Model_Selection.pdf&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fundamental-linear-regression-assumptions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fundamental linear regression assumptions&lt;/h2&gt;
&lt;p&gt;A run through the fundamental assumptions linear regression in &lt;code&gt;R&lt;/code&gt; using &lt;code&gt;lm&lt;/code&gt; based on residual plots.&lt;/p&gt;
&lt;p&gt;PDF: &lt;a class=&#34;fas fa-file-pdf&#34; href=&#34;https://jacintak.github.io/files/16Mar2021_Stats_Assumptions.pdf&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R Club: Functions &amp; Loops</title>
      <link>https://jacintak.github.io/post/2021-06-01-r-function-loops/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-06-01-r-function-loops/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This tutorial was originally presented to NERD club on 18/11/2020.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This document contains two examples of functions and an example of how functions can be integrated with loops.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;User defined functions take the general form of &lt;code&gt;function(inputs){processing inputs; return(output)}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;predator-prey-interactions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Predator-Prey interactions&lt;/h1&gt;
&lt;p&gt;We will use a simulation of predator-prey interactions as an example. Predator-prey interactions simulate how many prey a predator can capture after a specific amount of time and for a given density of prey. We use this example with undergraduate biology students to demonstrate statistical modelling, experimental design and collecting data.&lt;/p&gt;
&lt;p&gt;Normally we would get students to do this laboratory practical in class by picking up counters and putting them in jars while blindfolded. We can also see whether the use of different types of jars affects the efficiency of the predator. This is the experimental design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Response variable - Number of prey caught (&lt;code&gt;Ha&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Total foraging time - 1 minute, a constant (&lt;code&gt;T&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Predictor variables:
&lt;ul&gt;
&lt;li&gt;Prey density - user defined treatments (&lt;code&gt;H&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Type of jar used - jar with a lid or no lid (&lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normally the students will collect data to parameterise the functional response. Instead I’ve created a function that will predict new values of prey captured using a functional response formula that is already parameterised.&lt;/p&gt;
&lt;p&gt;Let’s look at the function:&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;an-interactive-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An interactive function&lt;/h2&gt;
&lt;p&gt;R has some capacity to be interactive. It can ask a user to input variables.
The function &lt;code&gt;functional_response&lt;/code&gt; will return the number of prey captured for a given prey density and type of jar used. The function will ask for these two inputs each time the function is run. Look at the code below and try to understand the different components. Then try running the code yourself with different inputs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#### Interactive function
# Simulation of the predator-prey functional response - DO NOT CHANGE
# To run: click Source (cmd or ctrl+shift+S) or Run All (ctrl+alt+r)
# Or source(&amp;quot;&amp;lt;insert file location here&amp;gt;&amp;quot;, echo = FALSE)

functional_response &amp;lt;- function(){
  
  # Introduce the simulation to the user - prints a message
  cat(paste(
    &amp;quot;&amp;quot;,
    &amp;quot;You have some counters (prey), a piece of A4 paper &amp;amp; a jar.&amp;quot;,
    &amp;quot;You spread the counters randomly on the A4 sheet.&amp;quot;,
    sep=&amp;quot;\n&amp;quot;))
  
  # Ask the user for the prey density for the functional response
  prey_density  &amp;lt;- readline(&amp;quot;How many prey counters are used? &amp;quot;) # ask for prey density
  
  # Check the user has inputted a number properly
  if(!grepl(&amp;quot;^[0-9]+$&amp;quot;, prey_density)){ # check whether the input contains numeric characters between 0-9 using regex (regular expressions)
    message(&amp;quot;Please enter an integer&amp;quot;) # If the input is not a number, tell them to do it again
    return(functional_response()) # Return to the beginning of the function and start again
  }
  prey_density &amp;lt;- as.integer(prey_density) # If the prey density input is a number, turn it into an interger
  
  # Ask the user for the type of jar used
  cat(paste(
    &amp;quot;&amp;quot;,
    &amp;quot;Every second you (the predator) tap the sheet to find and pick up a prey counter while blindfolded.&amp;quot;,
    &amp;quot;You have 1 minute to put as many prey counters as you can in the jar.&amp;quot;,
    &amp;quot;There are two types of jars you can use while handling prey.&amp;quot;,
    &amp;quot;Enter 1 to use a jar with a lid that you have to open and close.&amp;quot;,
    &amp;quot;Enter 2 to use a jar without a lid.&amp;quot;,
    &amp;quot;&amp;quot;,
    &amp;quot;What type of jar is used?&amp;quot;,
    sep=&amp;quot;\n&amp;quot;))
  lid_used &amp;lt;- menu(c(&amp;quot;Lid&amp;quot;, &amp;quot;No Lid&amp;quot;))
  
  # Calculate the number of prey caught (the functional response) based on the user defined input above
  if(lid_used != 0){ # Check that the use has chosen the jar used properly (1 or 2)
    
    # Use this model if using a jar with a lid
    if(lid_used == 1){
      Ha &amp;lt;- (0.2 * prey_density)/(1 + 0.2 * 0.03 * prey_density) 
    }
    
    # Use this model if using a jar without a lid
    if(lid_used == 2){
      Ha &amp;lt;- (0.7 * prey_density)/(1 + 0.7 * 0.05 * prey_density) 
    }
    
    # Add in some variation around the predicted value so that users don&amp;#39;t get the exact parameterised functional response
    Ha &amp;lt;- Ha + sample(seq(-3,3), 1) 
    
    # Make sure there are no negative prey items caught!
    if(Ha &amp;lt; 0){
      Ha &amp;lt;- 0 # Make prey caught 0 if less than 0
    }
    
    # Make sure the number of prey caught doesn&amp;#39;t exceed the number of prey available!
    if(Ha &amp;gt; prey_density){
      Ha &amp;lt;- prey_density # If prey caught is greater than the number of prey available, make it the maximum possible
    }
    
    # Print a message showing the results
    message(&amp;quot;The number of prey caught is &amp;quot;, floor(Ha), &amp;quot;. Well done!&amp;quot;) 
  }
}

# Actually run the function and tell R that it&amp;#39;s interactive 
if(interactive()) functional_response()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The function doesn’t have any inputs in &lt;code&gt;function()&lt;/code&gt; because it will ask the user for them each time&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readline&lt;/code&gt; is the function to ask for a single user input&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menu&lt;/code&gt; is the function to ask the user to chose from a number of options
&lt;ul&gt;
&lt;li&gt;Here the option is press 1 to use a jar with a lid or press 2 to use a jar without a lid&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;There are two parameterised functional responses - one for a jar with a lid and one for a jar without a lid&lt;/li&gt;
&lt;li&gt;&lt;code&gt;floor&lt;/code&gt; is a function to round the number of prey caught to the lowest whole number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the practical, students will need to run the above function for 10 prey densities, repeated 3 times, for both jar treatments - so 60 times in total. But we don’t have to do that manually - that is what loops are for!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;functions-and-loops&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Functions and loops&lt;/h2&gt;
&lt;p&gt;Here is a non-interactive version of the function above. It doesn’t have the printed messages asking for user input. This time, the function needs 3 inputs as indicated by &lt;code&gt;function(prey_density, lid_used, total_time)&lt;/code&gt;: the prey density used, the type of jar used and the total foraging time, respectively.&lt;/p&gt;
&lt;p&gt;Run the code chunk to load the function into the R environment:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Functional response function
functional_response &amp;lt;- function(prey_density, lid_used, total_time){
  
  # Check jar type is inputted correctly
  if (!lid_used %in% c(&amp;quot;yes&amp;quot;, &amp;quot;no&amp;quot;)) {
    stop(&amp;quot;Lid used is not inputted correctly. Use &amp;#39;yes&amp;#39; or &amp;#39;no&amp;#39; in all lowercase&amp;quot;)
  }
  if(lid_used == &amp;quot;yes&amp;quot;){
    Ha &amp;lt;- (0.2 * prey_density * total_time)/(1 + 0.2 * 0.03 * prey_density)
  }
  if(lid_used == &amp;quot;no&amp;quot;){
    Ha &amp;lt;- (0.7 * prey_density * total_time)/(1 + 0.7 * 0.05 * prey_density)
  }
  Ha &amp;lt;- Ha + sample(seq(-3,3), 1)
  if(Ha &amp;lt; 0){
    Ha &amp;lt;- 0
  }
  if(Ha &amp;gt; prey_density){
    Ha &amp;lt;- prey_density
  }
  # message(&amp;quot;The number of prey caught is &amp;quot;, floor(Ha))
return(floor(Ha))
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function will check that the character vector indicating the type of jar to be used is correct because R is case sensitive. The function will return the number of prey caught &lt;code&gt;Ha&lt;/code&gt; as indicated by &lt;code&gt;return(Ha)&lt;/code&gt;. The function &lt;code&gt;return&lt;/code&gt; specifically tells R to tell us the output, otherwise R will keep it to itself! Only one output is allowed (unless extra steps are taken).
The rest of the function is the same.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;using-the-functional-response-function-in-a-loop&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using the functional response function in a loop&lt;/h3&gt;
&lt;p&gt;Now let’s use a loop to do our entire experiment in one go! No manual inputs for us. In fact we can do as many treatments or replicates as we want. Let’s do prey densities between 5 and 100 in increments of 5 and 3 replicates. Since the function inputs are required we can set them up in the environment for the function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set parameters for the function
total_time &amp;lt;- 1 # total foraging time in minutes
no_treatments &amp;lt;- seq(from = 5, to = 100, by = 5) # prey density treatments between 5 and 100
replications &amp;lt;- 3 # number of replications

# a numeric vector of prey densities for all treatments, jar types and replications 
prey_density &amp;lt;- rep(rep(no_treatments, replications),2) # repeated twice for each jar type

# a character vector of the jar type
lid_used &amp;lt;- sort(rep(c(&amp;quot;no&amp;quot;, &amp;quot;yes&amp;quot;), length(prey_density)/2)) # &amp;quot;yes&amp;quot; or &amp;quot;no&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By setting up the parameters outside the function or loop, we can easily modify the parameters of the function and feed the new values into the loop. This helps us debug and is cleaner and easier to read.&lt;/p&gt;
&lt;p&gt;Now for the actual loop itself. We need to be able to store the output of the looped function.
Lists are the fastest way to do so in R because R is designed for lists and matrices.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create an empty list called prey_caught to populate 
prey_caught &amp;lt;- list()

for(i in seq_along(prey_density)){
  # Run the functional response for the nth observation in the vector prey_density representing all our observations and save it to the list
  prey_caught[[i]] &amp;lt;- functional_response(prey_density = prey_density[i],
                                         lid_used = lid_used[i],
                                         total_time = total_time)
  
  # Prepare the list for further analysis
  prey_caught[[i]] &amp;lt;-  cbind(prey_caught[[i]], prey_density[i]) # add a column for the prey density used to calculate the number of prey caught for that observation (row)
  prey_caught[[i]] &amp;lt;-  cbind(prey_caught[[i]], 1/prey_caught[[i]]) # add a column for the inverse of the number of prey caught - for statiscally parameterising the functional response
  prey_caught[[i]][,3] &amp;lt;-  ifelse(prey_caught[[i]][,3] == Inf, 0, prey_caught[[i]][,3]) # Housekeeping - turn undefined values of prey caught (from calculating 1 divided by 0) into 0. If the number of prey caught was 0
}

# Turn our list into a data frame
prey_caught &amp;lt;- data.frame(do.call(&amp;quot;rbind&amp;quot;, prey_caught))

# Label the columns
colnames(prey_caught) &amp;lt;- c(&amp;quot;Ha&amp;quot;, &amp;quot;H&amp;quot;,&amp;quot;Ha.1&amp;quot;, &amp;quot;HT.1&amp;quot;) # &amp;quot;.1 is inversed columns&amp;quot;

# Add type of lid used to our data frame
prey_caught$lid_used &amp;lt;- lid_used&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Here we are using a &lt;code&gt;for&lt;/code&gt; loop with the n&lt;sup&gt;th&lt;/sup&gt; observation denoted &lt;code&gt;i&lt;/code&gt;. This can be called anything you want but &lt;code&gt;i&lt;/code&gt; is from mathematical notation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seq_along&lt;/code&gt; is a useful function for telling which observation you are at for a vector - try it out on its own.&lt;/li&gt;
&lt;li&gt;Lists can only contain one variable type, unlike a data frame, but that’s why they are fast and memory efficient for high performance computing
&lt;ul&gt;
&lt;li&gt;If we were to add the jar type (a character vector) to the list within the loop, then all our numeric output will be converted to characters (default R behaviour) - not what we want!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do.call&lt;/code&gt; is a handy function for lists. It collapses multidimensional lists into one dimension, here appending them by rows (i.e. adding new observations by rows at the end)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;visualising-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visualising the data&lt;/h3&gt;
&lt;p&gt;Now we can plot our results and conduct our linear regression:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

prey_caught %&amp;gt;% # Absolute values
  ggplot(aes(H, Ha, colour = lid_used)) +
  geom_point() +
  geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, fullrange=TRUE) +
  labs(x = expression(paste(&amp;quot;Prey density  (H)&amp;quot;)),
       y = expression(paste(&amp;quot;Prey captured  (Ha)&amp;quot;)),
       colour = &amp;quot;Jar used&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/index_files/figure-html/plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Linear model
summary(lm(Ha.1 ~ HT.1 * lid_used, prey_caught))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Call:
lm(formula = Ha.1 ~ HT.1 * lid_used, data = prey_caught)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.27245 -0.05371 -0.01596  0.00899  0.84476 

Coefficients:
                 Estimate Std. Error t value Pr(&amp;gt;|t|)   
(Intercept)       0.07136    0.02262   3.155  0.00204 **
HT.1              1.00548    0.40029   2.512  0.01338 * 
lid_usedyes       0.09517    0.03198   2.976  0.00356 **
HT.1:lid_usedyes -1.11833    0.56609  -1.976  0.05058 . 
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

Residual standard error: 0.1351 on 116 degrees of freedom
Multiple R-squared:  0.08913,   Adjusted R-squared:  0.06558 
F-statistic: 3.784 on 3 and 116 DF,  p-value: 0.01242&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That has saved us from running the code 120 times! Now we can do it in one!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Formatting P values</title>
      <link>https://jacintak.github.io/post/2021-05-01-formatting-p-values/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-05-01-formatting-p-values/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-05-01-formatting-p-values/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This &lt;a href=&#34;https://www.r-bloggers.com/2016/03/correctly-reporting-p-values-in-summary-tables-reported-with-xtable/&#34;&gt;post&lt;/a&gt; on R bloggers describes a handy function for formatting really small P values in ANOVA tables (more than 3 decimal places) with &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;0.001\)&lt;/span&gt;. I find this easier to read when I need to present a formatted table, e.g. in teaching.&lt;/p&gt;
&lt;p&gt;The original function doesn’t cover all ways of creating ANOVA tables in &lt;code&gt;R&lt;/code&gt; so I have extended the function to cover more cases. The &lt;code&gt;fixp&lt;/code&gt; function below will work for ANOVA tables (&lt;code&gt;x&lt;/code&gt;) generated by &lt;code&gt;anova(lm(...))&lt;/code&gt; and &lt;code&gt;summary(aov(lm(...)))&lt;/code&gt;, as well as the model coefficients table generated by &lt;code&gt;coef(summary(lm(...)))&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;a-function-to-format-p-values&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A function to format P values&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;fixp &amp;lt;- function(x, dig=3){

# Convert to a data frame
  if(is.data.frame(x) | is.matrix(x)){
  x &amp;lt;- as.data.frame(x)
  } else {
  x &amp;lt;- as.data.frame(x[[1]])
  }

# Check column order  
  if(substr(names(x)[ncol(x)],1,2) != &amp;quot;Pr&amp;quot;){
    warning(&amp;quot;The name of the last column didn&amp;#39;t start with Pr. This may indicate that p-values weren&amp;#39;t in the last row, and thus, that this function is inappropriate.&amp;quot;)
    }
    
# Round P values to &amp;quot;dig&amp;quot; decimal places, default 3     
  x[,ncol(x)] &amp;lt;- round(x[,ncol(x)], dig)

#  
  for(i in 1:nrow(x)){
    if(x[i,ncol(x)] == 0 &amp;amp; !is.na(x[i,ncol(x)])){
      x[i,ncol(x)] &amp;lt;- paste0(&amp;quot;&amp;lt;0.&amp;quot;, paste0(rep(0,dig-1), collapse=&amp;quot;&amp;quot;), &amp;quot;1&amp;quot;)
      }
  }
  x
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main modification to the original function is to expand the conversion of &lt;code&gt;x&lt;/code&gt; to a data frame to accept lists and matrices. &lt;code&gt;summary(aov(lm(...)))&lt;/code&gt; creates an object with class &lt;code&gt;summary.aov&lt;/code&gt; which is a list and the coefficients table is a matrix. Although &lt;code&gt;anova(lm(...))&lt;/code&gt; creates a data frame that will work with the function without a fatal error, the function &lt;code&gt;anova&lt;/code&gt; has its own way of “pretty” printing [to quote the help file] which is not compatible with the character vector in the P value column and thus will show a P value of 1. So forcing to a data frame is necessary. A minor modification is to ignore the NAs in the Residual row created by the data frame which would otherwise give an error.&lt;/p&gt;
&lt;p&gt;The three decimal places for P values is coded into the function by default and can be changed by the &lt;code&gt;dig&lt;/code&gt; option. For example, &lt;code&gt;dig = 1&lt;/code&gt; will give you &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;0.1\)&lt;/span&gt;. You can then call your ANOVA table and the &lt;code&gt;fixp&lt;/code&gt; function through &lt;code&gt;knitr::kable()&lt;/code&gt; or your favourite HTML/LaTeX table formatter. e.g. &lt;code&gt;kable(fixp(anova(lm(...))), digits = ...)&lt;/code&gt;. If you don’t want to print NAs, it’s probably better to use the options in your chosen formatting function - e.g. the &lt;code&gt;knitr.kable.NA&lt;/code&gt; option in &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/kable.html&#34;&gt;&lt;code&gt;kable&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The socio-economic theory of animal abundance</title>
      <link>https://jacintak.github.io/post/2021-04-01-the-socio-economic-theory-of-animal-abundance/</link>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-04-01-the-socio-economic-theory-of-animal-abundance/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-04-01-the-socio-economic-theory-of-animal-abundance/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Where do animals live and why? These are some of the questions that ecologists are interested in. Sure, we can talk about patterns of abundance in an area in terms of abiotic or biotic factors or niche variation. But what if there’s more to animals than that?&lt;/p&gt;
&lt;p&gt;What if a young animal is concerned not just about eating, being eaten and living to reproduce but also with their finances, housing, commute and social mobility? What if a larger or older individual lives where they live not because they can outcompete smaller individuals for limited resources, but because they have accrued greater capital over time and thus have higher purchasing power?&lt;/p&gt;
&lt;p&gt;None of these questions are answered by current ecological theory. We need an alternative explanation for animal distributions and abundances. Here, I present to you the &lt;strong&gt;socio-economic theory of animal abundance&lt;/strong&gt;. I illustrate this theory using the Australian ghost crab (&lt;em&gt;Ocypode cordimana&lt;/em&gt;) as a case study.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;a-case-study-on-ghost-crabs&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;A case study on ghost crabs&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Ghost_crab&#34;&gt;Ghost crabs&lt;/a&gt; are a common intertidal species in tropical sandy beaches. Forget beach front digs with a sea view. They have literal digs on the beach. What’s more, &lt;em&gt;Ocypode cordimana&lt;/em&gt; is a species of ghost crab that lives on K’garri (Fraser Island), Australia, so they have prime access to the largest sand island in the world in the luckiest country in the world.&lt;/p&gt;
&lt;p&gt;On K’garri, &lt;em&gt;O. cordimana&lt;/em&gt; burrows are distributed from the low tide mark to the high sand dunes. The size of the burrows are indicative of the size of the home owner. Larger holes and thus larger crabs are found further up the beach from the shore. Higher densities of smaller holes are found closer to the low tide mark and lower densities of larger holes are found further away from the shore.&lt;/p&gt;
&lt;p&gt;A boring ecologist might hypothesise that this size-abundance gradient is explained by intraspecific competition or gradients of vegetation cover. But here is the socio-economic explanation:&lt;/p&gt;
&lt;p&gt;Ghost crabs are nocturnal (hence, ghosty; not because they are terrible friends – or are they?). At night they head down to the low tide line and forage among the detritus. This is the Central Business District (CBD) where crabs do their biz and partay. Ghost crabs need to commute every day and, like all reasonable beings, they want to avoid the rush hour traffic least they succumb to road rage. And it would not do to be seen participating in such vulgar behaviour in this day and age. Contests are better left to the dishonest fiddler crabs – the cheaters. Rather, all crabs openly carry weapons (claws) as a deterrent via mutually assured destruction.&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;crab.png&#34; title=&#34;fig:&#34; alt=&#34;A schematic of a ghost crab. Not to scale.&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;A schematic of a ghost crab. Not to scale.&lt;/p&gt;
&lt;p&gt;Crabs could minimise their commute and live close to the CBD. But living here is dangerous. The sand is fine – poor digging quality so only small houses can be built. The close proximity to the CBD and the ocean means the area gets inundated at high tide, which makes insurance premiums go through the roof. Housing density is high and competition for space is fierce. No-one enjoys hearing their neighbours through the fine grain sand. The only crabs that can live here are small, young crabs (including grad students) who can only afford to live in these inner city slums and dream of living further away from the gangland crime.&lt;/p&gt;
&lt;p&gt;In more recent times, the inner city has been undergoing gentrification. Young working professional crabs (Yuppies) and two-crab social groups with double incomes and no kids (DINKs) have been attracted by the convenience of the commute and short distance to local amenities. These crabs are larger than the typical inner city crab, have the income to create quality residences, and think the incoming tide adds character and charm to their property. These crabs enjoy an overpriced flat white with their avo on toast. You’ll often find them scurrying about to their barber appointments for their frothy bubble beards (plaid not included).&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;diagram.png&#34; title=&#34;fig:&#34; alt=&#34;The socio-economic theory of ghost crab abundance on K’garri&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;The socio-economic theory of ghost crab abundance on K’garri&lt;/p&gt;
&lt;p&gt;Beyond the inner city transition zone lies the urban sprawl known as suburbia. Suburbia is where the hopes and dreams of the young go to die and are replaced with a well manicured lawn. Here, the sand is not as wet, infrequently gets inundated, and one could afford to build a large home. The commute to the CBD is a little longer than the inner city but there’s the best of both worlds as access to the world class foredunes is equidistant away. Perfect for the weekend escape from the mediocrity.&lt;/p&gt;
&lt;p&gt;Finally, at the base of the dunes are the largest houses. The coarse sand and the roots of the foredune vegetation permit the largest burrows worthy of the largest and wealthiest crabs. Their commute is the longest but they don’t care about that, if they even need to commute at all. Their elevated position on the dune slope gives them the greatest vistas of the population and they live on the urban-rural fringe with easy access to silver-green, xerophytic spaces.&lt;/p&gt;
&lt;p&gt;Beyond the dune crest lies The Sticks as the dune transitions to woodland containing, you guessed it, sticks. Not the kind of place for crabs so few crabs are found there.&lt;/p&gt;
&lt;p&gt;And that is the socio-economic theory of animal abundance applied to ghost crabs.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Happy April Fools. There is no intellectual basis for applying the concentric zone model of cities to explain real ecological patterns. I initially conceptualised this during my undergrad ecology field trip to K’garri many years ago. This post is dedicated to Prof. Gimmie Walter, who heard it first – Happy retirement!&lt;/p&gt;
&lt;p&gt;This post was originally published on &lt;a href=&#34;http://www.ecoevoblog.com/2021/04/01/the-socio-economic-theory-of-animal-abundance/&#34;&gt;EcoEvo@TCD&lt;/a&gt; on 1st April 2021.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Leaving the valley of intermediate competence</title>
      <link>https://jacintak.github.io/post/using-mapply/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/using-mapply/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/using-mapply/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;if-it-aint-broke-dont-fix-it&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;If it ain’t broke, don’t fix it?&lt;/h1&gt;
&lt;p&gt;So you’ve spent a lot of time learning and practising &lt;code&gt;R&lt;/code&gt; and you’re pretty comfortable with using functions, if else statements and loops like they teach at introductory programming. What more is there to improve?&lt;/p&gt;
&lt;p&gt;If the answer is no or you subscribe to the quote above, then turn back now. If yes, continue.&lt;/p&gt;
&lt;p&gt;I think that even if one has the skills to do fundamental programming competently, there’s always room for improvement or something new to learn. Or you know that there’s a better, more efficient, way to do it but something is holding you back. For me, it’s usually the latter.&lt;/p&gt;
&lt;p&gt;In a milestone of using &lt;code&gt;R&lt;/code&gt; I think I have wrapped my head around replacing for loops with the &lt;code&gt;apply&lt;/code&gt; family, specifically &lt;code&gt;mapply&lt;/code&gt;. The last hurdle in delving into functional programming.&lt;/p&gt;
&lt;p&gt;I’ve used iterative coding quite a bit over the years and I’ve been using for loops to do so. As I’ve gotten more competent with applying basic concepts (like loops and functions), I’ve been moving towards optimising my code with more advanced &lt;code&gt;R&lt;/code&gt; methods. I started with using more manual functions and sourcing functions from external scripts but I was still relying on loops to apply those functions iteratively.&lt;/p&gt;
&lt;p&gt;I know loops are inefficient. I’ve waited &lt;em&gt;days&lt;/em&gt; for computationally intensive loops on large datasets to finish. I know that &lt;code&gt;apply&lt;/code&gt; and co. can be more computationally efficient but in your typical learning something new way, they hadn’t really clicked for me…until now.&lt;/p&gt;
&lt;p&gt;I’ve been trying to use &lt;code&gt;apply&lt;/code&gt; family functions where appropriate for years but I’ve never felt comfortable with using them to use them from the start. So, I default back to loops to save time and frustration.&lt;/p&gt;
&lt;p&gt;I think the slow uptake is because the syntax is different to the logic of loops that are taught, even if &lt;code&gt;apply&lt;/code&gt;’s logic is better from a computing perspective. The syntax and the logic is also inconsistent within the &lt;code&gt;apply&lt;/code&gt; family; a known disadvantage over similar functions (like &lt;code&gt;purrr::map&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;But let’s focus on a specific case before this becomes a cooking blog: replacing for loops. I’m going to assume that you are competent with manual functions, for loops and lists, and that you want to improve your code. I’m going to focus on lists because they are an efficient way of storing lots of similarly structured data in &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here are two ways to replace a for loop.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;an-example-loop&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;An example loop&lt;/h1&gt;
&lt;p&gt;Let’s create an example scenario and data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# some data to use
loop_data &amp;lt;- data.frame(col1 = c(11:15), col2 = c(20:24))

# define variable to change
a &amp;lt;- seq(0.2, 1, 0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loop_data&lt;/code&gt; is a data frame with two numeric columns (&lt;code&gt;col1&lt;/code&gt; &amp;amp; &lt;code&gt;col2&lt;/code&gt;). We technically won’t use &lt;code&gt;loop_data$col2&lt;/code&gt; but it’s there to create a 5x2 data frame.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; is a variable that we need for our function. There are 5 values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We want to add each element of &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;loop_data$col1&lt;/code&gt; and save that in a new column &lt;code&gt;loop_data$col1a&lt;/code&gt;. We will also add &lt;code&gt;a&lt;/code&gt; as a column in &lt;code&gt;loop_data&lt;/code&gt; just so we can keep track of which value was used to calculate &lt;code&gt;col1a&lt;/code&gt;. So the final output should have 25 rows (5 observations in &lt;code&gt;loop_data&lt;/code&gt; x 5 values of &lt;code&gt;a&lt;/code&gt;) and 4 columns (&lt;code&gt;col1&lt;/code&gt;, &lt;code&gt;col2&lt;/code&gt;, &lt;code&gt;col1a&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We will be storing our data in lists in all our scenarios. Note that I create the list to hold the answers (&lt;code&gt;loop_ans&lt;/code&gt;) before the function rather than to append newly calculated answers sequentially to the list within the function. I use the same &lt;code&gt;replicate&lt;/code&gt; function before all the examples. You could also start with an empty list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# data sets stored as a list - must not simplify or it will reduce to a matrix!
loop_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)

# A function to add a value a to a data frame x
loop_function &amp;lt;- function(x, a) {
  x$col1a &amp;lt;- x$col1 + a # add answer to a new column 
  x$a &amp;lt;- a # add a to a new column
  return(x) # give us the updated data frame
}

# Let&amp;#39;s loop
for(i in seq_along(a)){
  loop_ans[[i]] &amp;lt;- loop_function(loop_ans[[i]], a = a[i]) 
}

# merge to single data frame
loop_ans &amp;lt;- do.call(rbind, loop_ans)

# view the data
summary(loop_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       col1         col2        col1a            a      
##  Min.   :11   Min.   :20   Min.   :11.2   Min.   :0.2  
##  1st Qu.:12   1st Qu.:21   1st Qu.:12.4   1st Qu.:0.4  
##  Median :13   Median :22   Median :13.6   Median :0.6  
##  Mean   :13   Mean   :22   Mean   :13.6   Mean   :0.6  
##  3rd Qu.:14   3rd Qu.:23   3rd Qu.:14.8   3rd Qu.:0.8  
##  Max.   :15   Max.   :24   Max.   :16.0   Max.   :1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s the loop - should be familiar to you. Merging into a single data frame is optional if you want to keep using lists. Now let’s look at &lt;code&gt;lapply&lt;/code&gt; for a less elegant solution (!).&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;lapply&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. &lt;code&gt;lapply&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;lapply&lt;/code&gt; takes a list as input, does stuff and gives a list as output. Hence, the l in &lt;code&gt;lapply&lt;/code&gt; stands for list. The difference with loops and &lt;code&gt;lapply&lt;/code&gt; is that &lt;code&gt;lapply&lt;/code&gt; can only take one input - your data frame (or element in list). This means that we need to add the corresponding value of &lt;code&gt;a&lt;/code&gt; as a column in each element of &lt;code&gt;lapply&lt;/code&gt; - in other words to do part of what &lt;code&gt;loop_function&lt;/code&gt; did but outside the loop/&lt;code&gt;lapply&lt;/code&gt;. Thus, each data frame in the input list should have three columns: &lt;code&gt;col1&lt;/code&gt;, &lt;code&gt;col2&lt;/code&gt; &amp;amp; &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Incidentally, we can add the corresponding &lt;code&gt;a&lt;/code&gt; value as a column using &lt;code&gt;mapply&lt;/code&gt; and &lt;code&gt;cbind&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# the function only accepts one element: x
lapply_function &amp;lt;- function(x){
  x$col1a &amp;lt;- x$col1 + x$a
  return(x)
}

# Prepare the answer list
lapply_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)

# add a column using mapply
lapply_ans &amp;lt;- mapply(FUN = cbind, lapply_ans, &amp;quot;a&amp;quot; = a, SIMPLIFY = FALSE)

# apply function
lapply_ans &amp;lt;- lapply(lapply_ans, FUN = lapply_function)

# merge to single data frame
lapply_ans &amp;lt;- do.call(rbind, lapply_ans)

# view the data
summary(lapply_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       col1         col2          a           col1a     
##  Min.   :11   Min.   :20   Min.   :0.2   Min.   :11.2  
##  1st Qu.:12   1st Qu.:21   1st Qu.:0.4   1st Qu.:12.4  
##  Median :13   Median :22   Median :0.6   Median :13.6  
##  Mean   :13   Mean   :22   Mean   :0.6   Mean   :13.6  
##  3rd Qu.:14   3rd Qu.:23   3rd Qu.:0.8   3rd Qu.:14.8  
##  Max.   :15   Max.   :24   Max.   :1.0   Max.   :16.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you see it’s not as simple as the loop or &lt;code&gt;mapply&lt;/code&gt; and requires &lt;code&gt;mapply&lt;/code&gt; anyway 🤷&lt;br /&gt;
So we can do better…&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;mapply&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. &lt;code&gt;mapply&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The m in &lt;code&gt;mapply&lt;/code&gt; stands for multiple because it takes multiple arguments and applies them to the data. There are some key differences in the structure of the data and the function compared to &lt;code&gt;lapply&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can use the original loop function with two variables!
&lt;ul&gt;
&lt;li&gt;The additional variables (&lt;code&gt;a&lt;/code&gt; in this example) are written after the function &lt;code&gt;FUN&lt;/code&gt; is defined in &lt;code&gt;mapply&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We can also use the original list (&lt;code&gt;loop_data&lt;/code&gt;) without further modification!&lt;/li&gt;
&lt;li&gt;We need to tell &lt;code&gt;mapply&lt;/code&gt; not to simplify the output into a matrix by default. Note the use of upper case in &lt;code&gt;SIMPLIFY&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Prepare the answer list
mapply_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)
# mapply function
mapply_ans &amp;lt;- mapply(mapply_ans, FUN = loop_function, a = a, SIMPLIFY = FALSE)
# merge to single data frame
mapply_ans &amp;lt;- do.call(rbind, mapply_ans)
# view the data
summary(mapply_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       col1         col2        col1a            a      
##  Min.   :11   Min.   :20   Min.   :11.2   Min.   :0.2  
##  1st Qu.:12   1st Qu.:21   1st Qu.:12.4   1st Qu.:0.4  
##  Median :13   Median :22   Median :13.6   Median :0.6  
##  Mean   :13   Mean   :22   Mean   :13.6   Mean   :0.6  
##  3rd Qu.:14   3rd Qu.:23   3rd Qu.:14.8   3rd Qu.:0.8  
##  Max.   :15   Max.   :24   Max.   :16.0   Max.   :1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What &lt;code&gt;mapply&lt;/code&gt; is doing is using the n&lt;sup&gt;th&lt;/sup&gt; element of &lt;code&gt;a&lt;/code&gt; with the corresponding n&lt;sup&gt;th&lt;/sup&gt; element in the list &lt;code&gt;loop_data&lt;/code&gt;. So the fifth value of &lt;code&gt;a&lt;/code&gt; (1.0) is used in the calculations on the 5th data frame in &lt;code&gt;loop_data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’ve replace the for loop with a &lt;code&gt;mapply&lt;/code&gt; function! 👏&lt;br /&gt;
Here’s to functional programming. Next up is &lt;code&gt;purrr::map&lt;/code&gt;…&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Quick guide to R/exams</title>
      <link>https://jacintak.github.io/teaching/rexams/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/teaching/rexams/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/teaching/rexams/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;http://www.r-exams.org&#34;&gt;&lt;code&gt;R/exams&lt;/code&gt;&lt;/a&gt; is an R package that generates a reproducible workflow for designing, producing and marking exams.&lt;br /&gt;
Here, I provide a short walkthough for generating an online test for Blackboard - see the &lt;a href=&#34;http://www.r-exams.org/tutorials/exams2blackboard/&#34;&gt;R/exams website&lt;/a&gt; for some tutorials.&lt;/p&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;Install R/exams via CRAN with &lt;code&gt;install.packages(&#34;exams&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;running-the-package-for-the-first-time&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Running the package for the first time&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;exams&lt;/code&gt; uses &lt;code&gt;rtools&lt;/code&gt; to create zip files. Make sure the proper &lt;code&gt;rtools&lt;/code&gt; is installed. An error message will appear if &lt;code&gt;rtools&lt;/code&gt; does not have permission to create zip files.&lt;br /&gt;
To give permission for creating .zip for windows:
Control Panel &amp;gt; System and Security &amp;gt; System &amp;gt; Advanced System Settings &amp;gt; Environmental Variables &amp;gt; add “C:/RTools/bin”&lt;br /&gt;
You may also need to install dependent packages like &lt;code&gt;tth&lt;/code&gt; for math notation.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;types-of-questions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Types of questions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Single correct answer MCQ (schoice)&lt;/li&gt;
&lt;li&gt;Multiple correct answer MCQ (mchoice)&lt;/li&gt;
&lt;li&gt;Numeric answer (num)&lt;/li&gt;
&lt;li&gt;String (string)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cloze is another option but is not supported by blackboard, this permits a combination of the above for the MCQ answer list&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;building-an-exam-question&#34; class=&#34;section level1 tabset&#34;&gt;
&lt;h1&gt;Building an exam question&lt;/h1&gt;
&lt;p&gt;There are several file types that are supported when writing your question but I have stuck with ‘.Rmd’. There are four parts of a question file:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The question&lt;/li&gt;
&lt;li&gt;The answer list&lt;/li&gt;
&lt;li&gt;The solution list for giving feedback&lt;/li&gt;
&lt;li&gt;The meta-information&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of these sections are defined by a header tag marked by =====. # does not work as a tag.&lt;/p&gt;
&lt;div id=&#34;question&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question&lt;/h2&gt;
&lt;p&gt;The tag for defining the question is:&lt;/p&gt;
&lt;p&gt;Question&lt;br /&gt;
========&lt;/p&gt;
&lt;p&gt;The various random number generators in R will be your friend.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sample() # pick n random number(s) from a vector of discrete numbers
runif() # generate a vector of continuous numbers, can set min and max
rnorm() # generate a vector of continuous numbers from a normal distribution with a defined mean and standard deviation&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;things-to-note&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Things to note&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Code chunk options are in effect. By default figures will have captions, turn it of with &lt;code&gt;fig.caption = &#34;&#34;&lt;/code&gt;. Other useful figure options are figure sizes. Figure options can also be defined when compiling the exam&lt;/li&gt;
&lt;li&gt;You can show code with &lt;code&gt;echo  = TRUE&lt;/code&gt;, turn off R formatting with &lt;code&gt;results = &#34;asis&#34;&lt;/code&gt; &amp;amp; hide results with &lt;code&gt;results = &#34;hide&#34;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;LaTeX formatting is fine in markdown and outside code chunks&lt;/li&gt;
&lt;li&gt;To allow for randomised questions within a question file I had to escape the R code chunk to render the output as html, else the randomised question would be rendered as R output&lt;/li&gt;
&lt;li&gt;You can generate a file to go with the question using any R write to file function. Include the file in the question as normal for Rmarkdown - [filename](filelink). Leave this as default or &lt;code&gt;exams&lt;/code&gt; will not be able to find the file&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-answer-list&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The answer list&lt;/h2&gt;
&lt;p&gt;The answer subheading is defined by the tag:&lt;/p&gt;
&lt;p&gt;Answer&lt;br /&gt;
========&lt;/p&gt;
&lt;p&gt;Bulleted markdown after this tag will be considered the options for an MCQ answer list.&lt;/p&gt;
&lt;div id=&#34;things-to-note-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Things to note&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exams&lt;/code&gt; contains several helper functions to make it easy to generate lists of answers.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;answerlist&lt;/code&gt; accepts a vector of answers. It also generates the answer subheading so there is no need to type it in.&lt;/li&gt;
&lt;li&gt;Recommend using html in case LaTeX does not render properly, particularly when called as a string in an R code chunk.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Do not randomise the answer list here, use the metadata, else an incorrect answer will be assigned to be the correct one.&lt;br /&gt;
&lt;code&gt;comment = NA&lt;/code&gt; in the code chunk options will remove the # from the R output.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;There are also helper functions for various things. &lt;code&gt;mchoice2string()&lt;/code&gt; turns the solutions vector above into binary responses for the meta-information section. &lt;code&gt;num_to_choice&lt;/code&gt; generates a MCQ list of numbers for a numeric answer.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;solution&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;You can provide feedback via the solution header, including which answers are correct&lt;/p&gt;
&lt;p&gt;Solution&lt;br /&gt;
========&lt;br /&gt;
Your solution here or correct answer: &lt;code&gt;code for answer&lt;/code&gt; (or &lt;code&gt;answer[]&lt;/code&gt;)&lt;br /&gt;
Answerlist&lt;br /&gt;
-———&lt;br /&gt;
* True&lt;br /&gt;
* False&lt;br /&gt;
* etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; There should be no spaces after the header tag title, i.e. markdown formatting&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;question-metainformation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question metainformation&lt;/h2&gt;
&lt;p&gt;This is an important section of the question because it defines the correct answer. Metainformation is defined by the tag:&lt;/p&gt;
&lt;p&gt;Meta-information&lt;br /&gt;
================&lt;/p&gt;
&lt;p&gt;Useful variables are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exname = title of question, becomes name of the pool in blackboard&lt;/li&gt;
&lt;li&gt;extype = type of question (num/schoice/mchoice)&lt;/li&gt;
&lt;li&gt;exsolution: order of correct answers in binary (e.g. 01010) for MCQ or R code for numeric output - e.g. &lt;/li&gt;
&lt;li&gt;extol = the tolerance range for numeric questions&lt;/li&gt;
&lt;li&gt;exshuffle = Whether to shuffle the answers or not. This can be used to randomly select a subset of answers from an answer list. Provide a number of answers for non-numeric questions (e.g. 4 for 4 answers). &lt;code&gt;TRUE/FALSE&lt;/code&gt; is also accepted.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;an-example-question&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;An example question&lt;/h1&gt;
&lt;p&gt;This example displays the correct answer and 3 randomly chosen option out of 6 possible answers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Question
========
What is your name?

\```{r question, results = &amp;quot;hide&amp;quot;, echo=F}
# list of possible answer as a character vector
knights_of_camelot &amp;lt;- c(&amp;quot;Arthur, King of the Britons&amp;quot;, 
                        &amp;quot;Sir Lancelot the Brave&amp;quot;,
                        &amp;quot;Sir Robin the Not-Quite-So-Brave-as-Sir-Lancelot&amp;quot;,
                        &amp;quot;Sir Galahad the Pure&amp;quot;,
                        &amp;quot;Sir Bedevere the Wise&amp;quot;,
                        &amp;quot;Patsy&amp;quot;)

# solution to the vector above                        
solutions &amp;lt;- c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)

# explanations (feedback for students)
explanations &amp;lt;- c(&amp;quot;I didn&amp;#39;t vote for him&amp;quot;,
        &amp;quot;His favourite colour is blue&amp;quot;,
        &amp;quot;He doesn&amp;#39;t know the capital of Assyria&amp;quot;,
        &amp;quot;His favourite colour is blue. No, yel...&amp;quot;,
        &amp;quot;Knows nothing about swallows&amp;quot;,
        &amp;quot;Clip Clop&amp;quot;)
\```
        
\```{r answerlist, echo=F, results = &amp;quot;asis&amp;quot;}
# helper function to format the list of possible answers
answerlist(knights_of_camelot, markup = &amp;quot;markdown&amp;quot;)
\```


Solution
========
\```{r solutionlist, echo = FALSE, results = &amp;quot;asis&amp;quot;}
answerlist(ifelse(solultions, &amp;quot;True&amp;quot;, &amp;quot;False&amp;quot;), explanations, markup = &amp;quot;markdown&amp;quot;)
\```

Meta-information
================
exname: Bridgekeeper
extype: schoice
exsolution: `\r mchoice2string(solutions)`
exshuffle: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This renders like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Exam 1

    Question

    What is your name?

        Sir Bedevere the Wise
        Arthur, King of the Britons
        Sir Galahad the Pure
        Sir Lancelot the Brave

    Solution
        False. Knows nothing about swallows
        False. I didn&amp;#39;t vote for him
        False. His favourite colour is blue. No, yel.
        True. His favourite colour is blue&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could also skip the solutions vector and include it in the explanations vector like &lt;code&gt;c(&#34;False. I didn&#39;t vote for him&#34;)&lt;/code&gt;. Of course, the solution does not appear immediately in blackboard but make sure the option for solutions and feedback to appear is checked.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;compiling-the-exam&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Compiling the exam&lt;/h1&gt;
&lt;p&gt;I have written a script to compile the exam.
The compiling function (&lt;code&gt;exams2blackboard&lt;/code&gt;) requires a &lt;em&gt;list&lt;/em&gt; of file names to generate the exam. Each file represents a question. Versions of a question (&lt;code&gt;n&lt;/code&gt;) generate a pool of questions. The list should not contain subdirectories or files not to be included in the exam. &lt;code&gt;exams2html&lt;/code&gt; is a means of checking a file/list of exam questions renders properly in html (or &lt;code&gt;exams2pdf&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;There are several means of customising the metadata of the exam. Here I have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;turned off partial marks - is TRUE by default&lt;/li&gt;
&lt;li&gt;used custom directories to search for the questions and save the output zip.&lt;/li&gt;
&lt;li&gt;set 10 copies for each question using the variable &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the name of the zip file using the variable &lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the number of points for each question to 1, default = 10&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;exams&amp;quot;)
options(device.ask.default = FALSE)

## content and output directory
mydir &amp;lt;- &amp;quot;C:/Users/kongj/OneDrive - TCDUD.onmicrosoft.com/Teaching/Biostats/Midsem MCQ&amp;quot;

## define exam questions (each item in list is a pool)
myexam &amp;lt;- list.files(paste0(mydir,&amp;quot;/questions&amp;quot;), pattern = &amp;quot;.Rmd&amp;quot;)

# render single question
#exams2html(list(&amp;quot;question3.Rmd&amp;quot;), edir = paste0(mydir,&amp;quot;/questions&amp;quot;))

## generate .zip with Blackboard exam with n replicates
exams2blackboard(file = myexam, n = 10, name = &amp;#39;Jacinta&amp;#39;, dir = mydir,
                 edir = paste0(mydir,&amp;quot;/questions&amp;quot;),
                 eval = list(partial = FALSE, negative = FALSE),
                 points = 1
                 )

&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;things-to-note-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Things to note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You can create a mix of questions in the exam by defining it in the list of questions but it is not recommended for generating pools of questions&lt;/li&gt;
&lt;li&gt;If the exam is complied with no partial marks, then the blackboard exam will have no partial marks even if the option is checked within blackboard&lt;/li&gt;
&lt;li&gt;You can generate a pool of questions by compiling a single question and uploading that zip file to Blackboard under “Import Pool”. This is useful for creating random block tests in Blackboard if the compiled zip file is not suitable as an test right away&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Transparent graphing for dark backgrounds</title>
      <link>https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I’m not usually a dark background person but I’m open to the dark side. I wanted to make a solid coloured graph with a transparent background that would show up nicely but &lt;code&gt;ggplot2&lt;/code&gt; doesn’t have a set theme for that. A clean solid fill and transparency requires some specific customisation so here is a reproducible example for you using the built-in &lt;code&gt;trees&lt;/code&gt; dataset:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tree_graph &amp;lt;- ggplot(data = trees, 
       mapping = aes(x = Height, 
                     y = Girth)) + 
    geom_point(size = 0.5, colour = &amp;quot;#B8DE29FF&amp;quot;) + 
    geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, col = &amp;quot;#B8DE29FF&amp;quot;) + 
    geom_abline(intercept = 0, slope = 1, col = &amp;quot;white&amp;quot;, lwd = 0.5, lty = 2) + 
    theme_classic() +
    theme(plot.background = element_rect(fill = &amp;quot;transparent&amp;quot;, color = NA),
          panel.background = element_rect(fill = &amp;quot;transparent&amp;quot;),
          axis.text = element_text(colour = &amp;quot;#B8DE29FF&amp;quot;, size = 8),
          axis.title = element_text(colour = &amp;quot;#B8DE29FF&amp;quot;, size = 8),
          axis.line = element_line(colour = &amp;quot;#B8DE29FF&amp;quot;),
          axis.ticks = element_line(colour = &amp;quot;#B8DE29FF&amp;quot;))

ggsave(tree_graph, filename = &amp;quot;tree_graph.png&amp;quot;, bg = &amp;quot;transparent&amp;quot;, type = &amp;quot;cairo&amp;quot;, width = 10, height = 10, dpi = 300)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a couple of generally useful elements added on purpose:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geom_smooth&lt;/code&gt; creates an automatically fitted linear model (defined using &lt;code&gt;method = &#34;lm&#34;&lt;/code&gt;). I have turned off plotting the standard errors (on by default) and manually set the colour.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geom_abline&lt;/code&gt; is your standard straight line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt; is where the customisation begins:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plot.background&lt;/code&gt; &amp;amp; &lt;code&gt;panel.background&lt;/code&gt; are set to transparent&lt;/li&gt;
&lt;li&gt;The various axis elements are set to the fill colour (a nice &lt;code&gt;viridis&lt;/code&gt; green) and desired text size&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggsave&lt;/code&gt; specifies that the background is transparent and to save it using the Cairo engine (&lt;code&gt;type = &#34;cairo&#34;&lt;/code&gt;). Cairo will create a vector based image so resizing the png isn’t an issue since the small font size is already defined.
&lt;ul&gt;
&lt;li&gt;You can also use &lt;code&gt;cairo-png&lt;/code&gt; but the graph height and width options appear to be ignored.&lt;/li&gt;
&lt;li&gt;If you don’t save it as a Cairo png, then the text will still have a white outline and won’t be a clean solid fill&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>IEA2021</title>
      <link>https://jacintak.github.io/talk/IEA2021/</link>
      <pubDate>Thu, 07 Jan 2021 09:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/talk/IEA2021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A toolbox for trait-based forecasting</title>
      <link>https://jacintak.github.io/project/toolbox/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/project/toolbox/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/project/toolbox/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tools-for-forcasting-or-predicting&#34;&gt;Tools for forcasting or predicting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#resources-for-forcasting&#34;&gt;Resources for forcasting&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#macroclimate&#34;&gt;Macroclimate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#microclimate&#34;&gt;Microclimate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#microclimate-simulation-packages-for-r&#34;&gt;Microclimate simulation packages for &lt;code&gt;R&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#things-to-consider&#34;&gt;Things to consider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#traits&#34;&gt;Traits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r-packages-for-modelling&#34;&gt;R packages for modelling&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#nichemapr-deb-biophysical-ecology&#34;&gt;NicheMapR, DEB &amp;amp; biophysical ecology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#international-symposium-and-thematic-school-on-deb-theory-for-metabolic-organisation&#34;&gt;International Symposium and Thematic School on DEB Theory for Metabolic Organisation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;tools-for-forcasting-or-predicting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tools for forcasting or predicting&lt;/h1&gt;
&lt;p&gt;I am interested in developing a toolbox for biologists to make trait-based predictions or forecasts about how ectotherms respond to environmental change that are grounded in theory. Fostering stronger links between our understanding of terrestrial ectotherm thermal biology and the aquatic realm is important to identify general patterns.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;resources-for-forcasting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Resources for forcasting&lt;/h1&gt;
&lt;p&gt;A good model needs good input data!&lt;br /&gt;
A pretty important component of modelling species responses to environmental variables are the environmental variables themselves. In fact, it’s already half the data. Ideally, you would have climatic data at the scale of the target organism, which I will generally refer to as &lt;strong&gt;microclimate&lt;/strong&gt;, but this is often a challenge to acquire. But if you have access to climate data, e.g. gridded weather stations which I will refer to as &lt;strong&gt;macroclimate&lt;/strong&gt;, then there are some solutions for generating microclimate data.&lt;/p&gt;
&lt;p&gt;Most experimental biologists will have access to plenty of data on organism traits but may not have the right environmental data for a model. The good news is with the increasing ease of generating and storing big data, data is now more accessible than ever before!&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;macroclimate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Macroclimate&lt;/h2&gt;
&lt;p&gt;If you don’t have access to gridded weather station data for your area of interest, there are some publicly available datasets online for various environmental variables at various scales and resolutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.worldclim.org/&#34;&gt;WorldClim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.climond.org/&#34;&gt;CliMond&lt;/a&gt; with CLIMEX and Bioclim datasets&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cru.uea.ac.uk/&#34;&gt;Climatic Research Unit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;microclimate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Microclimate&lt;/h2&gt;
&lt;p&gt;There are currently a few publicly available datasets of pre-calculated microclimate grids. All these examples were made using &lt;code&gt;NicheMapR&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nature.com/articles/sdata20146&#34;&gt;microlim&lt;/a&gt; for global scale&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://knb.ecoinformatics.org/knb/d1/mn/v2/object/knb.92484.39&#34;&gt;MicroclimOz&lt;/a&gt; for Australia only (the lucky country)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://knb.ecoinformatics.org/view/urn:uuid:b8a6dbfd-3a97-4a24-91d5-1648fdba1648&#34;&gt;MicroclimUS&lt;/a&gt; for USA&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;microclimate-simulation-packages-for-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Microclimate simulation packages for &lt;code&gt;R&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;There are a few packages for &lt;code&gt;R&lt;/code&gt; to simulate microclimates from gridded macroclimate data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mrke.github.io&#34;&gt;NicheMapR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://besjournals.onlinelibrary.wiley.com/doi/10.1111/2041-210X.13093&#34;&gt;Microclima&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trenchproject.github.io/tools/TrenchR/&#34;&gt;TrenchR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The one I used in my work is &lt;code&gt;NicheMapR&lt;/code&gt;. The default function to generate microclimate in &lt;code&gt;NicheMapR&lt;/code&gt; uses the Climatic Research Unit dataset to generate default microclimate output. I used input data at a higher spatial and temporal resolution than the default setting, in addition to querying gridded soil type data. Although the input data to run my scripts is not available, &lt;code&gt;NicheMapR&lt;/code&gt; was used to generate the microclim and MicroclimOz datasets which are publicly available under certain soil type parameters.&lt;/p&gt;
&lt;div id=&#34;things-to-consider&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Things to consider&lt;/h3&gt;
&lt;p&gt;Check if the environmental datasets are at the resolution and scale appropriate for your intended purposes. If you want to simulate microclimate, you need to make sure you have all the environmental variables needed for the microclimate package: temperature, precipitation, soil type, topography, wind speed, solar radiation etc. You may have to collate input data from multiple sources.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;traits&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Traits&lt;/h2&gt;
&lt;p&gt;There are even a few databases for organism trait data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Insect Developmental Database (&lt;a href=&#34;https://nucleus.iaea.org/sites/naipc/twd/Lists/News/DispForm.aspx?ID=291&amp;amp;ContentTypeId=0x0100E051773707C04949A2F50750BBDBE134&#34;&gt;IDD&lt;/a&gt;) contains temperature-rate data for mostly insect species of agricultural interest&lt;/li&gt;
&lt;li&gt;For physiological limits &lt;a href=&#34;https://datadryad.org/resource/doi:10.5061/dryad.1cv08/7&#34;&gt;GlobTherm&lt;/a&gt; is a great initiative but covers CtMax and CtMin only.&lt;/li&gt;
&lt;li&gt;A few recent metaanalyses have combed through the thermal biology literature so you don’t have to! Then you can extract the information you want. Isn’t open, reproducible science great? Here’s a recent &lt;a href=&#34;https://datadryad.org/resource/doi:10.5061/dryad.56s5d84&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dell et al. 2013 complied a &lt;a href=&#34;https://esajournals.onlinelibrary.wiley.com/doi/10.1890/12-2060.1&#34;&gt;dataset&lt;/a&gt; on various biological/ecological traits measured at different tempertures for species from all habitats.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;r-packages-for-modelling&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R packages for modelling&lt;/h1&gt;
&lt;p&gt;In my PhD I wrote a custom function for my code to calculate development rate. But there is also a package for that!&lt;br /&gt;
&lt;a href=&#34;https://cran.r-project.org/web/packages/devRate/index.html&#34;&gt;&lt;code&gt;devRate&lt;/code&gt;&lt;/a&gt; is a package with commonly used temperature-rate functions, from statistical functions to biophysical ones. You can get it from CRAN.&lt;/p&gt;
&lt;p&gt;There is a similar package called &lt;a href=&#34;https://github.com/padpadpadpad/rTPC&#34;&gt;&lt;code&gt;rTPC&lt;/code&gt;&lt;/a&gt;. It’s not on CRAN but is available on GitHub.&lt;/p&gt;
&lt;div id=&#34;nichemapr-deb-biophysical-ecology&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;NicheMapR, DEB &amp;amp; biophysical ecology&lt;/h2&gt;
&lt;p&gt;Fortunately, the NicheMapR package is a pretty complete toolkit to model the biology of an organism based on its environment and available resources. Not only does it have a microclimate model but it also has an implementation of the standard DEB model and a biophysical heat and water budget model for ecotherms and endotherms. All that is missing are the correct input parameters.&lt;/p&gt;
&lt;p&gt;Heat and/or water budget equations are useful for calculating the body temperature of an organism but don’t measure growth or development. You could use the estimates of body temperture for calculating development/growth rates but for most small ectotherms that are isothermic, this seems a bit excessive.&lt;/p&gt;
&lt;div id=&#34;deb-parameters-and-add-my-pet&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;DEB parameters and Add-My-Pet&lt;/h4&gt;
&lt;p&gt;You can find standard DEB parameters at &lt;a href=&#34;https://www.bio.vu.nl/thb/deb/deblab/add_my_pet/&#34;&gt;Add-My-Pet&lt;/a&gt; and there is a vignette in NicheMapR which goes through the ectotherm model, the DEB model and how to use the DEB parameters from Add-My-Pet in NicheMapR.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;international-symposium-and-thematic-school-on-deb-theory-for-metabolic-organisation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;International Symposium and Thematic School on DEB Theory for Metabolic Organisation&lt;/h1&gt;
&lt;p&gt;Interested in learning Dynamic Energy Budget modelling? There is an international symposium, tele-course and school/workshop that is an intensive course in DEB and its applications. The symposium is held every two years. The most recent one was &lt;a href=&#34;https://deb2019.sciencesconf.org/&#34;&gt;April 2019&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the resources available you can pretty much develop a mechanistic model without collecting your own data.&lt;br /&gt;
If there are other useful datasets or links not listed here, let me know!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Biostatistics tutorials</title>
      <link>https://jacintak.github.io/project/biostats-tutorials/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/project/biostats-tutorials/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;biostats.tutorials&lt;/code&gt; is an &lt;code&gt;R&lt;/code&gt; package of &lt;code&gt;learnr&lt;/code&gt; tutorials for introductory biostatistics and &lt;code&gt;R&lt;/code&gt; at an undergraduate level.&lt;/p&gt;
&lt;p&gt;The package is still in development so stay tuned for updates.&lt;/p&gt;
&lt;p&gt;You can check out a &lt;code&gt;learnr&lt;/code&gt; package for practicals on statistical modelling and functional responses &lt;a href=&#34;https://jacintak.github.io/project/statistical-modelling/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can check out various tutorials about using R for NERD club (postgraduates and staff) at Trinity College Dublin &lt;a href=&#34;https://jacintak.github.io/project/NERD-club/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>New Year, New Look!</title>
      <link>https://jacintak.github.io/post/2021-01-01-new-year-new-look/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-01-01-new-year-new-look/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-01-01-new-year-new-look/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;welcome-to-my-revamped-website&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Welcome to my revamped website!&lt;/h1&gt;
&lt;p&gt;After banging my head against &lt;code&gt;blogdown&lt;/code&gt; and Hugo on and off for several months (years), I think I understand enough about it to refresh my site. This has been my weekend coding hobby. It’s taken so long that the under-workings of Hugo and the Academic theme used here have changed in the meantime.&lt;/p&gt;
&lt;p&gt;Setting up a site is simple enough if you follow the instructions online. The template builds a skeleton of the website and all you need to do is replace the placeholder text with your information. Simple right?&lt;/p&gt;
&lt;p&gt;Not quite. The underlying file structure takes some getting used to and you’ll have to trust the magic as your site gets compiled. But once you pass that hurdle, the system is quite powerful and the results are neat.&lt;/p&gt;
&lt;p&gt;There are many features to take advantage of. My interest was in having one site for code documentation and blogging as I was not satisfied with having a “regular” website (WordPress) with a blog and my code documentation separately on GitHub Pages.&lt;/p&gt;
&lt;p&gt;My code documentation was also messing up my GitHub. I’m not a big fan of having documentation (e.g. a static website) lumped together with package files. I also didn’t like having an orphan branch for my documentation (no winners here). I can take advantage of the features of Hugo to move my static sites off their respective repositories and into one central one. It’s better this way as some of the static pages weren’t even relevant to the rest of the repo.&lt;/p&gt;
&lt;p&gt;There are some features that are missing/not easily implemented compared to WordPress that I will miss. You can’t comment (without third party systems) or “follow” people, you can’t schedule posts and you can’t track views unless you set up Google Analytics or similar. The workflow is a bit tedious for fixing minor things (like spelling mistakes).&lt;/p&gt;
&lt;p&gt;I will keep blog posts on the &lt;a href=&#34;https://jacintakongresearch.wordpress.com&#34;&gt;WordPress site&lt;/a&gt; as an archive. I have linked to relevant blog posts in this site.&lt;/p&gt;
&lt;p&gt;There are some peculiarities that require things to be done a certain way:&lt;/p&gt;
&lt;div id=&#34;things-i-noted&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Things I noted&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I changed the name of the “Public” folder to “docs” so that my site can be built from the “docs” folder on GitHub. This seems the simplest way to organise this. The alternative is to have the “Public” folder on a different branch.&lt;/li&gt;
&lt;li&gt;Sometimes it’s a challenge to troubleshoot why things aren’t working they way you want. E.g. I couldn’t work out why the country wouldn’t show up in the document when including an address in YAML&lt;/li&gt;
&lt;li&gt;A header image/thumbnail can be included in the same folder as the content &lt;em&gt;but&lt;/em&gt; it must be called “featured” or it won’t be recognised. File names are case-sensitive&lt;/li&gt;
&lt;li&gt;You can have as many folders as you want called whatever but the (r)markdown file of the page must be called “index”
&lt;ul&gt;
&lt;li&gt;In the “Courses” feature the parent page must be called &#34;_index&#34; or it won’t work. 🤷&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rmd and the “Courses” feature don’t play nicely. Defining a table of contents via &lt;code&gt;bookdown&lt;/code&gt; outputs in the YAML doesn’t work and calling &lt;code&gt;toc: true&lt;/code&gt; directly in the YAML (following the guide) doesn’t work either.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bookdown&lt;/code&gt; and &lt;code&gt;blogdown&lt;/code&gt; don’t play nicely together in the same project either. &lt;code&gt;blogdown&lt;/code&gt; will try to render the &lt;code&gt;bookdown&lt;/code&gt; pages as a site rather than letting &lt;code&gt;bookdown&lt;/code&gt; do its thing and make a nice gitbook.
&lt;ul&gt;
&lt;li&gt;To allow this behaviour, you need to make use of the static file builder (See &lt;a href=&#34;#gitbook&#34;&gt;below&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Despite the template saying “Upcoming talks” Hugo doesn’t render things in the future (incl blog posts). You need &lt;code&gt;publishDate&lt;/code&gt; in the YAML&lt;/li&gt;
&lt;li&gt;emojis are a nice feature 😄&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;gitbook&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using the static folder to render a gitbook&lt;/h2&gt;
&lt;p&gt;To render rmd files into another output than &lt;code&gt;blogdown::html_page&lt;/code&gt; you can put the rmd in the “static” folder then write a script that compiles the site in a specific order. To permit a gitbook page within the site:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Save the &lt;code&gt;bookdown&lt;/code&gt; files in the “static” folder
&lt;ul&gt;
&lt;li&gt;It doesn’t work with files in the “content” folder, these will get the usual treatment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create a folder called “R” in the root directory&lt;/li&gt;
&lt;li&gt;Create an R script called “build.R” in the “R” folder&lt;/li&gt;
&lt;li&gt;Add the render functions you need.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blogdown::build_dir(&#34;static&#34;)&lt;/code&gt; is a wrapper for plain &lt;code&gt;rmarkdown::render()&lt;/code&gt; as is so it works best with simple files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build_dir&lt;/code&gt; doesn’t work for our gitbook example because we want a gitbook that knits with &lt;code&gt;bookdown::render_book&lt;/code&gt;, otherwise you will get a bunch of HTML files from the standard render function&lt;/li&gt;
&lt;li&gt;There’s something funny going on with the working directories. Running &lt;code&gt;render_book(&#34;static/index.rmd&#34;)&lt;/code&gt; doesn’t work, neither does the full address. Instead I had to change the working directory for the function to find the right files. I’m not sure where the function is looking as the project working directory is the root directory.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above means that all the rmd files for the gitbook also get copied into the “docs” folder. I don’t think it’s avoidable. It’s also s l o w e r to build the site because the gitbook gets rendered every time (unless you “comment it off” in the &lt;code&gt;build.R&lt;/code&gt; script.&lt;/p&gt;
&lt;p&gt;I also have a line to render my CV rmd into a PDF saved into the static folder. That PDF is then copied to the “docs” folder so I have an updated CV without needing to manually create one every time I update the original rmd. I think this is pretty handy.&lt;/p&gt;
&lt;p&gt;Here’s what my &lt;code&gt;build.R&lt;/code&gt; file contains:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Make CV PDF
rmarkdown::render(&amp;#39;content/cv/index.Rmd&amp;#39;, output_format = rmarkdown::pdf_document(keep_tex = FALSE), output_dir = &amp;quot;static/files/&amp;quot;, output_file = &amp;quot;Kong_JD_CV.pdf&amp;quot;)

# make gitbook
# blogdown::build_dir(&amp;quot;static&amp;quot;) doesn&amp;#39;t work because we want a gitbook that knits with render_book
# whereas build_dir uses rmakrdown::render() thus giving html files
old &amp;lt;- getwd()
setwd(&amp;quot;static/teaching/GLM/&amp;quot;)
bookdown::clean_book(clean = TRUE)
bookdown::render_book(input = &amp;quot;index.Rmd&amp;quot;)
setwd(old)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;having-a-drafts-folder&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Having a drafts folder&lt;/h2&gt;
&lt;p&gt;Hugo will not render draft blog posts by default but &lt;code&gt;blogdown&lt;/code&gt; will still render the files for your local site and these files get pushed to GitHub. If you don’t want your repo to contain spoilers, then you need to separate your draft posts from the published posts.&lt;/p&gt;
&lt;p&gt;One solution to stop &lt;code&gt;blogdown&lt;/code&gt; from rendering &lt;code&gt;.rmd&lt;/code&gt; files is to keep them in the “static” folder but Hugo will copy these files to the “public” (or “docs” folder in my case). I could not find an option to tell Hugo to ignore some files in the “static” folder. This does not solve our spoiler problem.&lt;/p&gt;
&lt;p&gt;We can have a “draft” folder under “content” and tell Hugo to ignore it in the &lt;code&gt;config.toml&lt;/code&gt; file (ignorefile) but that doesn’t stop &lt;code&gt;blogdown&lt;/code&gt; from rendering the file.&lt;/p&gt;
&lt;p&gt;I haven’t found a solution to stop &lt;code&gt;blogdown&lt;/code&gt; from rendering and Hugo from copying the file but Hugo doesn’t add every folder from the root directory to “Public”, only folders that match the template. So I have a folder called “drafts” which contains my drafts. &lt;code&gt;blogdown&lt;/code&gt; will still render the files every time they are saved while using &lt;code&gt;serve_site&lt;/code&gt; but they won’t interfere with the site itself. When I’m ready to publish them I can copy them to the “content/post” folder. I also added the “drafts” folder to my &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;blogdown&lt;/code&gt; has a handy function to generate a new blog post. By default it will add the new files to “content/post” but I changed this to write directly to the “drafts” folder via the variable &lt;code&gt;subdir&lt;/code&gt; and with a custom date that is used to name the folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blogdown::new_post(ext = &amp;quot;.Rmd&amp;quot;, title = &amp;quot;test&amp;quot;, subdir = &amp;quot;../drafts/&amp;quot;, date = &amp;quot;2021-01-01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;blogdown-does-theoretically-have-a-means-of-excluding-files&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;blogdown&lt;/code&gt; does theoretically have a means of excluding files…&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;blogdown::build_site&lt;/code&gt; there is a function (&lt;code&gt;list_rmds&lt;/code&gt;) that lists files in the “content” folder and excludes files beginning with &lt;code&gt;_&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;files = files[!grepl(&amp;quot;^_&amp;quot;, basename(files)) | grepl(&amp;quot;^_index[.]&amp;quot;, basename(files))]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you’ll notice it doesn’t exclude files called &lt;code&gt;_index&lt;/code&gt; without another &lt;code&gt;!&lt;/code&gt; in front of &lt;code&gt;grepl&lt;/code&gt;. For example, if I have an file called &lt;code&gt;_drafts.Rmd&lt;/code&gt;, then &lt;code&gt;build_site&lt;/code&gt; will ignore it. But if I have a file called &lt;code&gt;_index.Rmd&lt;/code&gt;, then &lt;code&gt;build_site&lt;/code&gt; will render it. I don’t know what the behaviour of this is supposed to be so I’m not sure if it is a mistake.&lt;/p&gt;
&lt;p&gt;This function is not present in &lt;code&gt;preview_site&lt;/code&gt; which means that the live preview is going to build all your &lt;code&gt;.Rmd&lt;/code&gt; files regardless and it will show up on the live preview.&lt;/p&gt;
&lt;p&gt;Either way, your drafts will still get pushed to GitHub unless you specify the files in &lt;code&gt;.gitignore&lt;/code&gt; (e.g. &lt;code&gt;**/_*.Rmd&lt;/code&gt;) so I wouldn’t say using &lt;code&gt;_&lt;/code&gt; in your file names is an easier option.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-customisations-via-layoutspartials-templates&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other customisations via “layouts/partials” templates&lt;/h2&gt;
&lt;p&gt;Because Hugo copies any folder in the root directory into “docs” which matches the theme template, it will override any files in the “themes” folder that matches the name of the folder in the root directory. This means that you can create custom templates without modifying the original template. Thus, having a folder called “layouts/partials” will override any “partials” templates within the “theme” folder.&lt;/p&gt;
&lt;p&gt;I have added some minor customisations to reflect personal preference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added markdown to the author list in &lt;code&gt;page_metadata_authors.html&lt;/code&gt; so that I can customise my name and bold it in the list of authors under publications&lt;/li&gt;
&lt;li&gt;Changed the site footer to include &lt;code&gt;blogdown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Changed &lt;code&gt;page_metadata.html&lt;/code&gt; to show both the last modified and published date. Last modified date is default.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m not saying goodbye to the grasshoppers so my flavicon is a grasshopper emoji 🦗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Predicting ectotherm life cycles</title>
      <link>https://jacintak.github.io/project/life-cycles/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/project/life-cycles/</guid>
      <description>&lt;p&gt;Move. Adapt. Die. Ectotherms have adapted their entire life cycle to the rhythm of the seasons. The egg stage is a critical part of insect life cycles that must resist or tolerate environmental fluctuations. How immobile eggs do so and how these mechanisms change in their function or importance over geographical gradients is a complex story.&lt;/p&gt;
&lt;p&gt;My past and ongoing research focuses on disentangling the effects of microclimatic variation and inter- and intra-specific variation in physiological traits on life history phenotypes and phenology. 
The relative effects of environmental and individual variation on phenology.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thermal dependence of biological rates</title>
      <link>https://jacintak.github.io/project/temperature-dependence/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/project/temperature-dependence/</guid>
      <description>&lt;p&gt;Temperature affects biological processes on many levels of biological organisation yet many temperature-dependent traits show great diversity within and among species with direct consequences for how organisms respond to a warming climate.&lt;/p&gt;
&lt;p&gt;To understand the effect of the temperature-dependence of biological rates shapes trends in physiological trait diversity, my colleages and I take a comparative approach on a macroecological scale using the non-linear relationship between biological rates and temperature as a null hypothesis.&lt;/p&gt;
&lt;p&gt;We find that much variation in widely characterised critical temperature limits in ectotherms can be explained by the non-linear relationship between biological rates and temperature, acclimation temperature, and rates of heating. Theses results suggest that rising temperatures are not as detrimental to ectotherms as previously suggested and that ectotherms have unappreciated capabilities of responding to thermal variability, at least based on laboratory derived measures of thermal tolerance.&lt;/p&gt;
&lt;p&gt;This is an Science Foundation Ireland funded position with Nicholas Payne&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jacinta @ Humans of BioSciences</title>
      <link>https://jacintak.github.io/post/2020-12-17-jacinta-humans-of-biosciences/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2020-12-17-jacinta-humans-of-biosciences/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2020-12-17-jacinta-humans-of-biosciences/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I was recently featured on Humans of BioSciences, a series about the people of the &lt;a href=&#34;https://biosciences.unimelb.edu.au/&#34;&gt;School of Biosciences&lt;/a&gt; at the University of Melbourne (my alma mater).&lt;/p&gt;
&lt;p&gt;You can read the Twitter &lt;a href=&#34;https://twitter.com/BioSci_UniMelb/status/1339375265961582592&#34;&gt;thread&lt;/a&gt; and the full interview &lt;a href=&#34;https://biosciences.unimelb.edu.au/news/hbos/jacinta-kong-humans-of-biosciences&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linking thermal adaptation and life-history theory explains latitudinal patterns of voltinism</title>
      <link>https://jacintak.github.io/publication/2019-PTRSB/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/publication/2019-PTRSB/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;Insect life cycles are adapted to a seasonal climate by expressing alternative voltinism phenotypes—the number of generations in a year. Variation in voltinism phenotypes along latitudinal gradients may be generated by developmental traits at critical life stages, such as eggs. Both voltinism and egg development are thermally determined traits, yet independently derived models of voltinism and thermal adaptation refer to the evolution of dormancy and thermal sensitivity of development rate, respectively, as independent influences on life history. To reconcile these models and test their respective predictions, we characterized patterns of voltinism and thermal response of egg development rate along a latitudinal temperature gradient using the matchstick grasshopper genus &lt;em&gt;Warramaba&lt;/em&gt;. We found remarkably strong variation in voltinism patterns, as well as corresponding egg dormancy patterns and thermal responses of egg development. Our results show that the switch in voltinism along the latitudinal gradient was explained by the combined predictions of the evolution of voltinism and of thermal adaptation. We suggest that latitudinal patterns in thermal responses and corresponding life histories need to consider the evolution of thermal response curves within the context of seasonal temperature cycles rather than based solely on optimality and trade-offs in performance. This article is part of the theme issue ‘Physiological diversity, biodiversity patterns and global climate change: testing key hypotheses involving temperature and oxygen’.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Summer egg diapause in a matchstick grasshopper synchronises the life cycle and buffers thermal extremes</title>
      <link>https://jacintak.github.io/publication/2018-inte-zool/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/publication/2018-inte-zool/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;The phenological response is among the most important traits affecting a species&#39; sensitivity to climate. In insects, strongly seasonal environments often select for a univoltine life-cycle such that one seasonal extreme is avoided as an inactive stage. Through understanding the underlying mechanisms for univoltinism, and the consequences of its failure, we can better predict insect responses to climate change. Here we combine empirical data and simulation studies to investigate the consequences of an unusual diapause mechanism in a parthenogenetic matchstick grasshopper, &lt;em&gt;Warramaba virgo&lt;/em&gt;, from arid southern Australia. Our field body temperature measurements indicate that this species is a thermoconformer and our laboratory studies of the thermal response of feeding rate imply strong constraints on winter activity. However, the species exhibits no obligate winter diapause, and eggs can develop in one month under constant temperatures approximating the mean soil temperature at the time of oviposition (summer). We show that diurnal temperature cycles exceeding a peak of 36 degrees C inhibit egg development in summer, and that this is sufficient to prevent autumnal hatching of eggs. Development is also strongly retarded below 24 degrees C. Microclimate-driven simulation studies of egg development show that these thermal responses provide robust maintenance of a univoltine life cycle, thereby resulting in survival of heat stress as an egg (due to limited developmental state) and avoidance of cold stress as a nymph and adult (due to overwintering in the soil as an egg). This article is protected by copyright. All rights reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mechanistic models for predicting insect responses to climate change</title>
      <link>https://jacintak.github.io/publication/2016-COIS/</link>
      <pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/publication/2016-COIS/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;Mechanistic models of the impacts of climate change on insects can be seen as very specific hypotheses about the connections between microclimate, ecophysiology and vital rates. These models must adequately capture stage-specific responses, carry-over effects between successive stages, and the evolutionary potential of the functional traits involved in complex insect life-cycles. Here we highlight key considerations for current approaches to mechanistic modelling of insect responses to climate change. We illustrate these considerations within a general mechanistic framework incorporating the thermodynamic linkages between microclimate and heat, water and nutrient exchange throughout the life-cycle under different climate scenarios. We emphasise how such a holistic perspective will provide increasingly robust insights into how insects adapt and respond to changing climates.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Novel applications of thermocyclers for phenotyping invertebrate thermal responses</title>
      <link>https://jacintak.github.io/publication/2016-MEE/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/publication/2016-MEE/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;High-throughput genomic methods are increasingly used to investigate invertebrate thermal responses with greater dimensionality and resolution than previously achieved. However, corresponding methods for characterizing invertebrate phenotypes are still lacking. To scale up the characterization of invertebrate thermal responses, we propose a novel use of thermocyclers as temperature-controlled incubators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here, we tested the performance of thermocyclers as incubators and demonstrated the application of this method to efficiently characterize the thermal responses of model and non-model invertebrates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We found the thermocyclers performed with high precision, accuracy and resolution under various and fluctuating ambient conditions. We were able to successfully characterize the temperature-dependent development of grasshopper eggs (&lt;em&gt;Warramaba virgo&lt;/em&gt;), as well as the effects of fluctuating temperature cycles on the survival of mosquito eggs (&lt;em&gt;Aedes aegypti&lt;/em&gt;) and developmental success of &lt;em&gt;Drosophila simulans&lt;/em&gt; larvae, all with similar survival rates to conventional methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thermocyclers are a general and transferrable means to scale up current methods of incubating small invertebrates. They permit rapid characterization of high-dimensional physiological responses to natural thermal regimes. When combined with existing approaches in thermal and evolutionary biology, these methods will advance our understanding of, and ability to predict, biological adaptations and responses to environmental changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jacintak.github.io/authors/admin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/authors/admin/</guid>
      <description>&lt;p&gt;I want to know where animals live and how they persist in their environment. My interests lie at the intersection between ecology, evolutionary biology and experimental biology.&lt;/p&gt;
&lt;p&gt;My research centers on characterising diversity in traits and understanding the consequences of this diversity for abundances and distributions of species. I answer these questions through an integrative combination of field and natural history observations, manipulative laboratory experiments, and quantitative analysis and modelling, grounded within conceptual frameworks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CV</title>
      <link>https://jacintak.github.io/CV/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/CV/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#research-and-teaching-appointments&#34; id=&#34;toc-research-and-teaching-appointments&#34;&gt;Research and teaching appointments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#qualifications&#34; id=&#34;toc-qualifications&#34;&gt;Qualifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#refereed-journal-articles&#34; id=&#34;toc-refereed-journal-articles&#34;&gt;Refereed journal articles&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#preprints&#34; id=&#34;toc-preprints&#34;&gt;Preprints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#research-highlights&#34; id=&#34;toc-research-highlights&#34;&gt;Research highlights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#research-grants-or-awards&#34; id=&#34;toc-research-grants-or-awards&#34;&gt;Research grants or awards&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#other-awards-and-scholarships&#34; id=&#34;toc-other-awards-and-scholarships&#34;&gt;Other Awards and Scholarships&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#teaching-contributions-and-course-development&#34; id=&#34;toc-teaching-contributions-and-course-development&#34;&gt;Teaching contributions and course development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conference-presentations-and-invited-talks&#34; id=&#34;toc-conference-presentations-and-invited-talks&#34;&gt;Conference presentations and invited talks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#professional-service-and-affiliations&#34; id=&#34;toc-professional-service-and-affiliations&#34;&gt;Professional service and affiliations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#professional-development-qualifications&#34; id=&#34;toc-professional-development-qualifications&#34;&gt;Professional development qualifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#community-outreach-and-communication&#34; id=&#34;toc-community-outreach-and-communication&#34;&gt;Community outreach and communication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Last updated 06 January 2023&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;research-and-teaching-appointments&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Research and teaching appointments&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Postdoctoral Fellow&lt;br /&gt;
Department of Biology, Carleton University, Canada&lt;br /&gt;
1.2023 – Present&lt;/li&gt;
&lt;li&gt;Teaching and Research Fellow&lt;br /&gt;
Department of Zoology, School of Natural Sciences.&lt;br /&gt;
Trinity College Dublin, Dublin, Ireland&lt;br /&gt;
5.2019 – 1.2023&lt;/li&gt;
&lt;li&gt;Research Assistant&lt;br /&gt;
Intraspecific variation in mechanistic species distribution modelling,&lt;br /&gt;
The University of Melbourne, Australia&lt;br /&gt;
5.2018 – 12.2018&lt;/li&gt;
&lt;li&gt;Comparative Animal Physiology tutor (Second Year undergraduate)&lt;br /&gt;
School of BioSciences, the University of Melbourne, Australia&lt;br /&gt;
2017– 2018&lt;/li&gt;
&lt;li&gt;Ecology in Changing Environments tutor (Third Year undergraduate)&lt;br /&gt;
School of BioSciences, the University of Melbourne, Australia&lt;br /&gt;
2016– 2018&lt;/li&gt;
&lt;li&gt;Comparative Animal Physiology residential tutor,&lt;br /&gt;
University College, the University of Melbourne, Australia&lt;br /&gt;
2017– 2018&lt;/li&gt;
&lt;li&gt;First Year Chemistry residential tutor&lt;br /&gt;
St John’s College, the University of Queensland Australia&lt;br /&gt;
8.2014 – 10.2014&lt;/li&gt;
&lt;li&gt;First Year Biology tutor (Science Learning Centre tutor),&lt;br /&gt;
the Faculty of Science, the University of Queensland, Australia&lt;br /&gt;
2012&lt;/li&gt;
&lt;li&gt;Peer Assisted Study Session leader: first year statistics&lt;br /&gt;
The Peer Assisted Study Session office and the School of Mathematics and Physics, the University of Queensland Australia&lt;br /&gt;
8.2012 – 10.2012&lt;/li&gt;
&lt;li&gt;Peer Assisted Study Session leader: first year ecology&lt;br /&gt;
The Peer Assisted Study Session office, the University of Queensland Australia&lt;br /&gt;
2011 – 2012&lt;/li&gt;
&lt;li&gt;Volunteer laboratory technician. Animal husbandry.&lt;br /&gt;
White Evolutionary Physiology Laboratory, the University of Queensland&lt;br /&gt;
3.2012 – 10.2012&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;qualifications&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Qualifications&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Doctor of Philosophy (Science)&lt;/strong&gt;&lt;br /&gt;
The University of Melbourne, Australia&lt;br /&gt;
&lt;em&gt;Title:&lt;/em&gt; Predicting ectotherm life cycles under a variable climate: Physiological diversity of matchstick grasshopper eggs and their ecological and evolutionary implications&lt;br /&gt;
Repository access: &lt;a href=&#34;http://hdl.handle.net/11343/225704&#34; class=&#34;uri&#34;&gt;http://hdl.handle.net/11343/225704&lt;/a&gt;&lt;br /&gt;
1.2015 – completed 14 Aug 2019, conferred 5.10.2020&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bachelor of Science (Honours Class I, University Medal)&lt;/strong&gt;&lt;br /&gt;
The University of Queensland, Australia&lt;br /&gt;
&lt;em&gt;Title:&lt;/em&gt; The effect of temperature on the relationship between metabolic rate and mass: Tests of the Metabolic Theory of Ecology&lt;br /&gt;
Conferred 6.12.2013&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bachelor of Science&lt;/strong&gt;&lt;br /&gt;
The University of Queensland, Australia&lt;br /&gt;
Conferred 17.12.2012&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;refereed-journal-articles&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Refereed journal articles&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Iosilevskii G&lt;sup&gt;+&lt;/sup&gt;, &lt;strong&gt;Kong JD&lt;/strong&gt;&lt;sup&gt;+&lt;/sup&gt;, Meyer CG, Watanabe YY, Papastamatiou YP, Royer MA, Nakamura I, Sato K, Doyle TK, Harman L, Houghton JDR, Barnett A, Semmens JM, Maoiléidigh NÓ, Drumm A, O’Neill R, Coffey DM, Payne NL (2022) A general swimming response in exhausted obligate swimming fish. Royal Society Open Science. 9: 211869. DOI: &lt;a href=&#34;https://doi.org/10.1098/rsos.211869&#34;&gt;10.1098/rsos.211869&lt;/a&gt;. &lt;sup&gt;+&lt;/sup&gt;Joint first author.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kearney MR, Jasper ME, White VL, Aitkenhead IJ, Blacket MJ, &lt;strong&gt;Kong JD&lt;/strong&gt;, Chown SL, Hoffmann AA. (2022) Parthenogenesis without costs in a grasshopper with hybrid origins. Science. 376: 1110 – 1114 DOI: &lt;a href=&#34;https://doi.org/10.1126/science.abm1072&#34;&gt;10.1126/science.abm1072&lt;/a&gt;. Altmetric score: 204&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Schwanz LE, Gunderson A, Iglesias-Carrasco M, Johnson MA, &lt;strong&gt;Kong JD&lt;/strong&gt;, Riley J, Wu NC. (2022) Best practices for building and curating databases for comparative analyses. Journal for Experimental Biology. 225: jeb243295. DOI: &lt;a href=&#34;https://doi.org/10.1242/jeb.243295&#34;&gt;10.1242/jeb.243295&lt;/a&gt;. Altmetric score: 12&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Kong JD&lt;/strong&gt;, Hoffmann AA, Kearney MR. (2019) Linking thermal adaptation and life-history theory explains latitudinal patterns of voltinism. Philosophical Transactions of the Royal Society B: Biological Sciences. 374(1778). DOI: &lt;a href=&#34;https://doi.org/10.1098/rstb.2018.0547&#34;&gt;10.1098/rstb.2018.0547&lt;/a&gt;. Altmetric score: 8&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kearney MR, Deutscher J, &lt;strong&gt;Kong JD&lt;/strong&gt;, Hoffmann AA. (2018) Summer egg diapause in a matchstick grasshopper synchronises the life cycle and buffers thermal extremes. Integrative Zoology. 13(4): 437–449. DOI: &lt;a href=&#34;https://doi.org/10.1111/1749-4877.12314&#34;&gt;10.1111/1749-4877.12314&lt;/a&gt;. Altmetric score: 2&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maino JL, &lt;strong&gt;Kong JD&lt;/strong&gt;, Hoffmann AA, Barton MG, Kearney MR. (2016) Mechanistic models for predicting insect responses to climate change. Current Opinion in Insect Science. 17: 81 – 86. DOI: &lt;a href=&#34;https://doi.org/10.1016/j.cois.2016.07.006&#34;&gt;10.1016/j.cois.2016.07.006&lt;/a&gt;. Altmetric score: 6&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Kong JD&lt;/strong&gt;, Axford JK, Hoffmann AA, Kearney MR. (2016) Novel applications of thermocyclers for phenotyping invertebrate thermal responses. Methods in Ecology and Evolution. 7(10): 1201 – 1208. 2016. DOI: &lt;a href=&#34;https://doi.org/10.1111/2041-210X.12589&#34;&gt;10.1111/2041-210X.12589&lt;/a&gt;. Altmetric score: 20&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;preprints&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preprints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Kong JD&lt;/strong&gt;, Wu NC. (2022) Can we improve our ability to identify climate vulnerability in ectotherm life cycles?. bioRxiv. DOI: &lt;a href=&#34;https://doi.org/10.1101/2022.12.14.520433&#34;&gt;10.1101/2022.12.14.520433&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Kong JD&lt;/strong&gt;&lt;sup&gt;+&lt;/sup&gt;, Arnoldi J-F&lt;sup&gt;+&lt;/sup&gt;, Jackson AL, Bates AE, Morley SA, Smith JA, Payne NL&lt;sup&gt;+&lt;/sup&gt;. (2022) Heating tolerance of ectotherms is explained by temperature’s non-linear influence on biological rates. bioRxiv. DOI: &lt;a href=&#34;https://doi.org/10.1101/2022.12.06.519315&#34;&gt;10.1101/2022.12.06.519315&lt;/a&gt;. &lt;sup&gt;+&lt;/sup&gt;Joint first author.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;research-highlights&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Research highlights&lt;/h1&gt;
&lt;p&gt;&lt;i class=&#34;fab fa-orcid&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://orcid.org/0000-0002-1085-8612&#34;&gt;ORCID&lt;/a&gt;&lt;br /&gt;
&lt;i class=&#34;ai ai-google-scholar&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://scholar.google.com/citations?user=637pv-sAAAAJ&amp;amp;hl&#34;&gt;Google scholar&lt;/a&gt;&lt;br /&gt;
H-index: 4 (GS)&lt;br /&gt;
Total citations: 101&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High attention papers in the top 5% of all research outputs scored by Altmetric:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Science&lt;/strong&gt;: 20 News outlets, 1 blog, 86 tweeters. Altmetric score: 212&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Royal Society Open Science&lt;/strong&gt;: 90 tweeters. Altmetric score: 61&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ecology/evolution studies in some of the best journals in their respective disciplines, and in the top 25% of all research outputs scored by Altmetric:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Journal of Experimental Biology&lt;/strong&gt;. Altmetric score: 12&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Philosophical Transactions of the Royal Society B&lt;/strong&gt;. Altmetric score: 8. Citations: 20&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Current Opinion in Insect Science&lt;/strong&gt;. Altmetric score: 6. Citations: 43&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have peer reviewed for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Global Change Biology&lt;/li&gt;
&lt;li&gt;Entomologia Experimentalis et Applicata&lt;/li&gt;
&lt;li&gt;Methods in Ecology and Evolution&lt;/li&gt;
&lt;li&gt;Nature Ecology and Evolution&lt;/li&gt;
&lt;li&gt;Ecological Entomology&lt;/li&gt;
&lt;li&gt;The Canadian Entomologist&lt;/li&gt;
&lt;li&gt;Environmental Entomology&lt;/li&gt;
&lt;li&gt;Journal of Fish Biology&lt;/li&gt;
&lt;li&gt;Current Zoology&lt;/li&gt;
&lt;li&gt;Scientific Reports&lt;/li&gt;
&lt;li&gt;Conservation Physiology&lt;/li&gt;
&lt;li&gt;American Naturalist&lt;/li&gt;
&lt;li&gt;Functional Ecology&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;research-grants-or-awards&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Research grants or awards&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;TOTAL: $13 750 AUD&lt;/strong&gt; 🇦🇺&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;$2 500 AUD&lt;/strong&gt;. 6.2018 Holsworth Wildlife Research Endowment&lt;br /&gt;
Equity Trustees Charitable Foundation &amp;amp; the Ecological Society of Australia&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$300 AUD&lt;/strong&gt;. 12.2018 2nd runner up student presentation&lt;br /&gt;
Australian and New Zealand Society for Comparative Physiology and Biochemistry, Australia&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$500 AUD&lt;/strong&gt;. 8.2018 Student Travel Grant&lt;br /&gt;
Australian Entomological Society, Australia&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$1 500 AUD&lt;/strong&gt;. 2018 Science Abroad Travelling Scholarship&lt;br /&gt;
Faculty of Science, the University of Melbourne, Australia&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$950 AUD&lt;/strong&gt;. 2018 FH Drummond Travel Award&lt;br /&gt;
School of BioSciences, the University of Melbourne, Australia&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$1 500 AUD&lt;/strong&gt;. 2018 School of BioSciences Travelling Scholarship&lt;br /&gt;
School of BioSciences, the University of Melbourne, Australia&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$6 000 AUD&lt;/strong&gt;. 6.2018 Holsworth Wildlife Research Endowment&lt;br /&gt;
Equity Trustees Charitable Foundation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$500 AUD&lt;/strong&gt;. 6.2018 Three Minute Thesis (3MT) People’s Choice Winner&lt;br /&gt;
The University of Queensland Undergraduate Research Conference&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;other-awards-and-scholarships&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other Awards and Scholarships&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;$13 541 AUD&lt;/strong&gt;. 2018 Research Training Program Scholarship, Australian Government&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$26 682 AUD&lt;/strong&gt;. 2017 Research Training Program Scholarship, Australian Government&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$200 AUD&lt;/strong&gt;. 2017 Runners-up in the Sustainability Prize photo competition, Graduate Student Association, the University of Melbourne&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$26 288 AUD&lt;/strong&gt;. 2016 Australian Postgraduate Award, Australian Government&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$25 849 AUD&lt;/strong&gt;. 2015 Australian Postgraduate Award, Australian Government&lt;/li&gt;
&lt;li&gt;2014 University Medal 2013, the University of Queensland, Australia&lt;/li&gt;
&lt;li&gt;2010 – 2013 Dean’s Commendation for Academic Excellence (formerly Dean’s Commendation for High Achievement), the Faculty of Science, the University of Queensland, Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;teaching-contributions-and-course-development&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Teaching contributions and course development&lt;/h1&gt;
&lt;p&gt;Trinity College Dublin implements a 4 year degree program with 2 years of general subjects (e.g. biological sciences stream, ~250 students) and 2 years towards a specific major (e.g. zoology, ~ 35 students). Total of 60 credits per year. Degree consists of mandatory core subjects and electives.&lt;/p&gt;
&lt;p&gt;2022&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lecturer &amp;amp; course development: Statistics and computation for biologists (BYU22S01). 2nd year undergraduate core subject, 5 credits. Trinity College Dublin. Developed course lectures and practical material, implemented novel R packages for interactive teaching within the R environment (learnr package). In-person lectures &amp;amp; practicals.&lt;/li&gt;
&lt;li&gt;Lecturer &amp;amp; course development: Animal Diversity I (ZOU33003). 3rd year undergraduate, core zoology major subject, 5 credits. Trinity College Dublin. Developed course lectures and practical material. In-person lectures &amp;amp; practicals.&lt;/li&gt;
&lt;li&gt;Lecturer &amp;amp; course development: Animal Diversity II (ZOU33004). 3rd year undergraduate, core zoology major subject, 5 credits. Trinity College Dublin. Developed course lectures and practical material. In-person lectures &amp;amp; practicals.&lt;/li&gt;
&lt;li&gt;Contributing staff: Marine Biology (ZOU33000). 3rd year undergraduate, core zoology major subject, 5 credits. Trinity College Dublin. Resident field course based in Killary Fjord, Ireland.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2021&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lecturer &amp;amp; course development: Statistics and computation for biologists (BYU22S01). 2nd year undergraduate core subject, 5 credits. Trinity College Dublin. Developed course lectures and practical material, implemented novel R packages for interactive teaching within the R environment (learnr package). Hybrid delivery: remote and in-person lectures &amp;amp; remote and in-person practicals.&lt;/li&gt;
&lt;li&gt;Lecturer &amp;amp; course development: Animal Diversity I (ZOU33003). 3rd year undergraduate, core zoology major subject, 5 credits. Trinity College Dublin. Developed course lectures and practical material. Hybrid delivery: remote lectures &amp;amp; in-person practicals.&lt;/li&gt;
&lt;li&gt;Lecturer &amp;amp; course development: Animal Diversity II (ZOU33004). 3rd year undergraduate, core zoology major subject, 5 credits. Trinity College Dublin. Developed course lectures and practical material. Hybrid delivery: remote lectures &amp;amp; in-person practicals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2020&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lecturer (Module co-ordinator) &amp;amp; course development: Statistics and computation for biologists (BYU22S01). 2nd year undergraduate. Trinity College Dublin. Developed course lectures and practical material, implemented reproducible workflow for online exams. Adapted for remote delivery.&lt;/li&gt;
&lt;li&gt;Lecturer &amp;amp; course development: Animal Diversity I (ZOU33003). 3rd year undergraduate. Trinity College Dublin. Developed course lectures and practical material. Module co-coordinator. Adapted for remote delivery.&lt;/li&gt;
&lt;li&gt;Lecturer &amp;amp; course development: Animal Diversity II (ZOU33004). 3rd year undergraduate. Trinity College Dublin. Developed course lectures and practical material. Adapted for remote delivery.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2019&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lecturer &amp;amp; course development: Statistics and computation for biologists (BYU22S01). 2nd year undergraduate. Trinity College Dublin. Developed course lectures and practical material, implemented reproducible workflow for online exams.&lt;/li&gt;
&lt;li&gt;Lecturer &amp;amp; course development: Animal Diversity I (ZOU33003). 3rd year undergraduate. Trinity College Dublin. Developed course lectures and practical material. Acting module co-coordinator.&lt;/li&gt;
&lt;li&gt;Lecturer &amp;amp; course development: Animal Diversity II (ZOU33004). 3rd year undergraduate. Trinity College Dublin. Developed course lectures and practical material.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2017&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Guest lecturer: 2nd year Comparative Animal Physiology, University of Melbourne&lt;/li&gt;
&lt;li&gt;Course development: 2nd year Biostatistics, University of Melbourne. Evaluated course context and provided feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2016&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Guest lecturer: 2nd year Comparative Animal Physiology, University of Melbourne&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;conference-presentations-and-invited-talks&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conference presentations and invited talks&lt;/h1&gt;
&lt;p&gt;2022&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can we improve our ability to understand ectotherm thermal tolerance? Society for Experimental Biology Animal Biology Early Career Researcher Symposium. 3-7th October. Tvärminne Zoological Station, Finland.&lt;/li&gt;
&lt;li&gt;Can we improve our ability to identify climate vulnerability in ectotherm life cycles? British Ecological Society Annual Meeting, Edinburgh, UK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2021&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Energetic turnover explains the inflexibility of upper thermal tolerances in ectotherms. Irish Ecological Association Meeting, University College Cork, Ireland (online)&lt;/li&gt;
&lt;li&gt;Ectotherm heat limits track biological rates. British Ecological Society Macroecology Special Interest Group meeting (online)&lt;/li&gt;
&lt;li&gt;Thermal adaptation and plasticity of egg development generates latitudinal patterns in insect life cycles under seasonal climates. Society for Experimental Biology Annual Meeting (online)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2019&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Detangling the complex problem of climate adaptation of insects living in a seasonal world. Victorian Biodiversity Conference, University of Melbourne, VIC, Australia&lt;/li&gt;
&lt;li&gt;Local adaptation of thermal responses generates voltinism patterns of matchstick grasshoppers, &lt;em&gt;Warramaba&lt;/em&gt; (Orthoptera: Morabidae), along a latitudinal gradient. British Ecological Society Annual Meeting, Belfast, N. Ireland, UK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2018&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Selection against overwintering shapes thermal performance curves for development. Australian and New Zealand Society for Comparative Physiology and Biochemistry Conference, Monash University, VIC, Australia&lt;/li&gt;
&lt;li&gt;Environmental and developmental drivers at the egg stage generate divergent life cycles in wingless arid zone grasshoppers (Orthoptera: &lt;em&gt;Warramaba&lt;/em&gt;). Australian Entomological Society Conference, Alice Springs, N.T., Australia&lt;/li&gt;
&lt;li&gt;The egg stage drives life cycle adaptation to climate in the widely distributed matchstick grasshoppers (&lt;em&gt;Vandiemenella&lt;/em&gt; and &lt;em&gt;Warramaba&lt;/em&gt;, Orthoptera: Morabidae). ‘The height, breadth and depth of physiological diversity: variation across latitudinal, altitudinal and depth gradients’ Animal Biology Satellite Meeting, Florence, Italy, Society for Experimental Biology&lt;/li&gt;
&lt;li&gt;Microclimate-driven mechanistic models to examine clinal adaptation at the egg stage in a parthenogenetic grasshopper. Society for Experimental Biology Annual Conference, Florence, Italy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2017&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does variation in egg developmental responses to temperature generate divergent life-cycles in a genus of flightless grasshoppers (&lt;em&gt;Warramaba&lt;/em&gt; spp.)? School of BioSciences Postgraduate Symposium, the University of Melbourne, Parkville, Australia&lt;/li&gt;
&lt;li&gt;Egg development drives life cycles in &lt;em&gt;Warramaba&lt;/em&gt; spp. grasshoppers. Australian and New Zealand Society for Comparative Physiology and Biochemistry Conference, Daintree Rainforest Observatory, QLD, Australia&lt;/li&gt;
&lt;li&gt;Mechanistic models for understanding and predicting insect responses to climate change. Australian Entomological Society Conference, Terrigal, N.S.W., Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2016&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Predicting insect egg development under variable climates. School of BioSciences Postgraduate Symposium, the University of Melbourne, Parkville, Australia&lt;/li&gt;
&lt;li&gt;Predicting egg development in the parthenogenetic grasshopper &lt;em&gt;Warramaba virgo&lt;/em&gt; (Orthoptera: Morabidae). Australian and New Zealand Society for Comparative Physiology and Biochemistry Conference, Western Sydney University, N.S.W., Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2015&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Novel applications of thermocyclers for high-throughput phenotyping of invertebrate thermal response. Australian and New Zealand Society for Comparative Physiology and Biochemistry Conference, Fowler’s Gap, N.S.W., Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2013&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every Breath You Take Links Metabolism and Ecology&lt;/li&gt;
&lt;li&gt;Three Minute Thesis, Undergraduate Research Conference, the University of Queensland, Australia The University of Queensland&lt;/li&gt;
&lt;li&gt;Every Breath You Take Links Metabolism and Ecology. Summer Research Introduction Session 2013, invited by the Office of Undergraduate Education, the University of Queensland, Australia&lt;/li&gt;
&lt;li&gt;Flying foxes and you: Exploring the exposure of society to so-called “rats with wings”&lt;/li&gt;
&lt;li&gt;Bachelor of Science Welcome Day, invited by the Faculty of Science, the University of Queensland, Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2012&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flying foxes and you: Exploring the exposure of society to so-called “rats with wings”&lt;/li&gt;
&lt;li&gt;Advanced Study Program in Science Student Conference, the University of Queensland, Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2011&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Female-biased dispersal in the Eastern Water Dragon (&lt;em&gt;Physignathus lesueurii lesueurii&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Advanced Study Program in Science Student Conference, the University of Queensland, Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;professional-service-and-affiliations&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Professional service and affiliations&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2015 – Present Member: Australian and New Zealand Society for Comparative Physiology and Biochemistry (ANZSCPB)&lt;/li&gt;
&lt;li&gt;2019 – Present Member: British Ecological Society (BES) &amp;amp; Irish Ecological Association (IEA)&lt;/li&gt;
&lt;li&gt;2018 Member: Royal Society of Victoria (RSV)&lt;/li&gt;
&lt;li&gt;2017 – Present Member: Society for Experimental Biology (SEB)&lt;/li&gt;
&lt;li&gt;2015 – 2020 Member: Australian Entomological Society (AES)&lt;/li&gt;
&lt;li&gt;2019 – 2020 Member: European Society for Evolutionary Biology (ESEB)&lt;/li&gt;
&lt;li&gt;2017 – 2018 President, BioSciences Postgraduate Society, the University of Melbourne&lt;/li&gt;
&lt;li&gt;2016 – 2017 Vice President, BioSciences Postgraduate Society, the University of Melbourne&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;professional-development-qualifications&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Professional development qualifications&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;26 Jan 2021 Epigeum Research Integrity Course&lt;/li&gt;
&lt;li&gt;19 Mar 2021 Dynamic Energy Budget Course&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;community-outreach-and-communication&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Community outreach and communication&lt;/h1&gt;
&lt;p&gt;2022&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kong JD&lt;/strong&gt;, Chown SL, Hoffmann AA and Kearney MR. (2022) Reply to Adamo: No Signs of Pathogen Susceptibility in Warramaba virgo. Science. eLetter. DOI: &lt;a href=&#34;https://doi.org/10.1126/science.abm1072&#34;&gt;10.1126/science.abm1072&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Conference Organiser. Society for Experimental Biology Animal Biology Early Career Researcher Symposium. 3-7th October. Tvärminne Zoological Station, Finland.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2021&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contributor to the Trinity Walton Club &lt;a href=&#34;mailto:STEM@Universi-TY&#34; class=&#34;email&#34;&gt;STEM@Universi-TY&lt;/a&gt; program, Trinity College Dublin (2021-present)&lt;/li&gt;
&lt;li&gt;Mentor for Irish Ecological Association mentoring meeting. 7th January&lt;/li&gt;
&lt;li&gt;The Socio-Economic Theory of Animal Abundance. April Fools blog post for &lt;a href=&#34;http://www.ecoevoblog.com/2021/04/01/the-socio-economic-theory-of-animal-abundance/&#34;&gt;EcoEvo@TCD&lt;/a&gt;. 1st April&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2020&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Profiled on Humans of BioSciences by the School of BioSciences, the University of Melbourne, Australia. &lt;a href=&#34;https://biosciences.unimelb.edu.au/news/hbos/jacinta-kong-humans-of-biosciences&#34;&gt;Website&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/BioSci_UniMelb/status/1339375265961582592&#34;&gt;Twitter&lt;/a&gt;. 17th December&lt;/li&gt;
&lt;li&gt;Guest interview with Newstalk radio, Ireland. 14th January&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2019&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mentor for BES Women in Science Mentoring Program&lt;/li&gt;
&lt;li&gt;Home and Away: 3 part blog series for &lt;a href=&#34;http://www.ecoevoblog.com&#34;&gt;EcoEvo@TCD&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Home and Away: Would a Rosella by any other name smell as sweet (online 1 Nov)&lt;/li&gt;
&lt;li&gt;Home and Away: Monotreme mistakes (online 22 Nov)&lt;/li&gt;
&lt;li&gt;Home and Away: Australian expats (online 12 Dec)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Victorian Biodiversity Conference Volunteer, Melbourne, Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2018&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Big Ideas in Macrophysiology. Report on the 2018 Animal Biology Satellite Meeting, Florence Italy. &lt;a href=&#34;https://www.sebiology.org/digital-magazine/autumn-2018/#p=18&#34;&gt;Society for Experimental Biology Magazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The University of Melbourne Open Day Volunteer, the University of Melbourne, Melbourne, Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2017&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The University of Melbourne Open Day Volunteer, the University of Melbourne, Melbourne, Australia&lt;/li&gt;
&lt;li&gt;Session Chair, BioSciences Postgrad Symposium, the University of Melbourne, Australia&lt;/li&gt;
&lt;li&gt;Victorian Biodiversity Conference Volunteer, Melbourne, Australia&lt;/li&gt;
&lt;li&gt;Blog post for Graduate Student Association, University of Melbourne on the biodiversity photo competition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2016&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Session Chair, BioSciences Postgrad Symposium, the University of Melbourne, Australia&lt;/li&gt;
&lt;li&gt;Novel applications of thermocyclers for characterising invertebrate thermal responses. &lt;a href=&#34;https://youtu.be/uXzEfvR_hoE&#34;&gt;Video for Methods in Ecology and Evolution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2015&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The University of Melbourne Open Day Volunteer, the University of Melbourne, Melbourne, Australia&lt;/li&gt;
&lt;li&gt;The Real Life of a Research Student. Science Undergraduate Research Journal (SURJ), Issue 2. The University of Queensland, Australia&lt;/li&gt;
&lt;li&gt;Jacinta on Zoology &amp;amp; Research. Interview with BITE BACK, Black Dog Institute, Australia. 31st August. &lt;a href=&#34;http://www.biteback.org.au/blogs/bite-back-team-blog/jacinta-on-zoology-research/&#34;&gt;Link likely broken&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2014&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Brisbane Open House Volunteer, Brisbane Open House, Brisbane, Australia&lt;/li&gt;
&lt;li&gt;Student Chaperone for the International Baccalaureate World Student Conference, the University of Queensland, Australia&lt;/li&gt;
&lt;li&gt;Moreton Bay Research Station Open Day Assistant, Moreton Bay Research Station, Brisbane, Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2013&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Science Mentor to Science Undergraduate Students, appointed by the Faculty of Science, the University of Queensland, Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2012&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Moreton Bay Research Station Open Day Assistant, Moreton Bay Research Station, Brisbane, Australia&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
