<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>teaching | Jacinta&#39;s Website</title>
    <link>https://jacintak.github.io/tags/teaching/</link>
      <atom:link href="https://jacintak.github.io/tags/teaching/index.xml" rel="self" type="application/rss+xml" />
    <description>teaching</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 01 Dec 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jacintak.github.io/img/icon-512.png</url>
      <title>teaching</title>
      <link>https://jacintak.github.io/tags/teaching/</link>
    </image>
    
    <item>
      <title>December update</title>
      <link>https://jacintak.github.io/post/2021-12-01-december-update/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-12-01-december-update/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-12-01-december-update/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;end-of-the-year&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;End of the year!&lt;/h1&gt;
&lt;p&gt;The work-from-home go-in-to-work and back again switching meant I didn’t have time to write the post I originally intended. But this month I’ve made some updates around the site plus some general end of year housekeeping here on GitHub.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;research&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Research&lt;/h1&gt;
&lt;p&gt;It’s been a busy year including many firsts or personal records. I “attended” three conferences, wrote my first independent collaborative paper, submitted many papers, got many rejections, applied for jobs and reviewed many papers. I was pleasantly surprised to see my research mentioned in people’s conference presentations. Thank you for reading!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;teaching&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Teaching&lt;/h1&gt;
&lt;p&gt;I’ve updated the teaching materials on the site.&lt;/p&gt;
&lt;p&gt;Over the course of the year, I’ve turned various tutorials I ran for NERD club into blog posts on this site and collated them on a &lt;a href=&#34;https://jacintak.github.io/project/NERD-club&#34;&gt;Project page&lt;/a&gt; with their original presentations. I’m glad that some people have found them useful.&lt;/p&gt;
&lt;p&gt;At the moment I’m not sure what I want to do with the &lt;a href=&#34;https://jacintak.github.io/teaching/GLM/lectures/index.html&#34;&gt;GLM course notes&lt;/a&gt; on the site. With an update, they may be useful to some, but I revamped my lectures this year, so these notes don’t follow the lectures. I’m still not sure what the best balance of teaching stats is. Too many additional resources seem overwhelming to students especially with remote learning so this year I went for the less is more approach. At the very least, creating the resource was a good opportunity to try out &lt;code&gt;bookdown&lt;/code&gt; and figure out how to integrate it within a &lt;code&gt;blogdown&lt;/code&gt; site.&lt;/p&gt;
&lt;p&gt;I’ve updated an &lt;a href=&#34;https://jacintak.github.io/teaching/introR/index.html&#34;&gt;Introduction to R&lt;/a&gt; with how to change the default library address because I noticed that the user library folder created in Documents was syncing to OneDrive for many students using Windows 10. This is a feature of using a Microsoft account but it means there are then issues between R accessing the user library and OneDrive syncing the folder. This becomes a prominent issue if you are running a session that depends on many packages.&lt;/p&gt;
&lt;p&gt;This feature is frustrating because I don’t expect students to need to delve into Control Panel and change their computer settings. I don’t expect them to &lt;em&gt;know&lt;/em&gt; how to do it and it only adds to their stress when they get package related errors during class. Does the younger generation even know what the Control Panel is and how to modify it? It defeats the point of Windows becoming more user friendly. In terms of user friendliness, it would be great if changing the default package folder was an option through the RStudio GUI.&lt;/p&gt;
&lt;p&gt;These issues came about because I wanted to try delivering practicals through &lt;code&gt;learnr&lt;/code&gt;. On paper, interactive tutorials are great and they are well integrated within the RStudio environment through the Tutorial pane. In practice, it complicates the process for the students because now they have to install all the dependencies - and there are a lot of them! Which is an additional learning curve of computer housekeeping. This is also not the kind of debugging I expect the demonstrators to know. The remote delivery makes troubleshooting difficult.&lt;/p&gt;
&lt;p&gt;Though &lt;code&gt;learnr&lt;/code&gt; has been around for a few years, it’s still in active development and there are some issues or features that cause headaches during class. Unfortunately, debugging these error messages is not straightforward and the general fix is to reinstall the package again. Two issues I’ve come across that are known, open issues on GitHub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trailing garbage error. Some students cannot open a tutorial a second time, or even a first time. The error is inconsistent across students which makes it hard to infer why it’s happening.&lt;/li&gt;
&lt;li&gt;Skipping coding exercises by pressing run code (even with no input). This defeats the point of not allowing skipping.
&lt;ul&gt;
&lt;li&gt;There is a great temptation among students to rush through and skip exercises to get to the “important bits” (it’s all important) or to jump to any in-class assessment and work in reverse (i.e. reading the assessment question then skim reading the relevant section without working through the theory first). Maybe this is a consequence of remote teaching and open book assessment that this cohort is now used to. Forcing students to slow down and engage with the material in order is one solution.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ve made the &lt;code&gt;learnr&lt;/code&gt; practicals available on GitHub and given it a &lt;a href=&#34;https://jacintak.github.io/project/statistical-modelling&#34;&gt;project page&lt;/a&gt;. It’s a set of practicals about learning statistical modelling through the context of functional responses (predator-prey interactions). Students collect data in the first practical and analyse the data in the second. I made a Type II functional response model in Scratch for remote students to participate in data collection.&lt;/p&gt;
&lt;p&gt;I moved the original &lt;code&gt;learnr&lt;/code&gt; tutorials about R to their own GitHub repository and &lt;a href=&#34;https://jacintak.github.io/project/biostats-tutorials&#34;&gt;project page&lt;/a&gt;. I’m not sure what to do with this too. My original intention was to provide it as an additional resource to students. Currently, I have revamped the tutorials based on material I’ve presented to NERD club.&lt;/p&gt;
&lt;p&gt;Overall, I’m satisfied with how &lt;code&gt;learnr&lt;/code&gt; worked in a large classroom. The loading error is annoying but mostly because of the remote delivery and it only affects a minor proportion of students.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here’s to hoping for more adventures in the new year.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Setup R</title>
      <link>https://jacintak.github.io/teaching/introR/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/teaching/introR/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/teaching/introR/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#welcome-to-statistics-and-computation-for-biologists&#34;&gt;Welcome to Statistics and Computation for Biologists&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#structure-of-drop-ins&#34;&gt;Structure of drop ins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#todays-drop-in&#34;&gt;Today’s drop in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-programming-and-computing&#34;&gt;1. Why programming and computing?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-computing-terms&#34;&gt;Basic computing terms&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#drives-folders-files&#34;&gt;Drives, Folders &amp;amp; Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#directories&#34;&gt;Directories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-r&#34;&gt;Why R?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-rstudio&#34;&gt;Why RStudio?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installing-r-and-rstudio&#34;&gt;2. Installing R and RStudio&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mac&#34;&gt;Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chromebook&#34;&gt;Chromebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#opening-r-and-rstudio-for-the-first-time&#34;&gt;3. Opening R and RStudio for the first time&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#updating-r-and-base-packages&#34;&gt;Updating R and base packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-a-script&#34;&gt;Creating a script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setting-up-packages&#34;&gt;Setting up packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installing-packages&#34;&gt;Installing packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r-structure-terminology&#34;&gt;4. R structure &amp;amp; terminology&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arrays&#34;&gt;Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-frames&#34;&gt;Data frames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-data-manipulation&#34;&gt;Other data manipulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rounding&#34;&gt;Rounding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#factors&#34;&gt;Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commenting&#34;&gt;Commenting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#working-directories-in-r&#34;&gt;5. Working directories in R&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#changing-working-directories&#34;&gt;Changing working directories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#loading-data&#34;&gt;6. Loading data&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#txt&#34;&gt;.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#csv&#34;&gt;.csv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clipboard&#34;&gt;Clipboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#checking-the-data&#34;&gt;7. Checking the data&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-structure&#34;&gt;Data structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#viewing-data&#34;&gt;Viewing data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summarising-data&#34;&gt;Summarising data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#missing-data&#34;&gt;Missing data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exporting-data&#34;&gt;8. Exporting data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plotting&#34;&gt;9. Plotting&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#exporting-a-figure&#34;&gt;Exporting a figure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#problem-solving&#34;&gt;Problem solving&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tips&#34;&gt;Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#finding-help&#34;&gt;Finding help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final-checklist&#34;&gt;Final checklist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;welcome-to-statistics-and-computation-for-biologists&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Welcome to Statistics and Computation for Biologists&lt;/h1&gt;
&lt;p&gt;Training to become a scientist can be broken down into two parts. First, there is content to learn - these are technical details or “how to” which come from textbooks, lectures or resources on the Internet.&lt;/p&gt;
&lt;p&gt;Second, is learning how to define problems and how to solve them. You will see this in action throughout your degree. For example, is your R code not working? Work out why, what’s wrong and what to change to make it work.&lt;/p&gt;
&lt;p&gt;In this module we aim to give you the tools and knowledge to solve your own data science problems. These skills will be important in your later studies or even your career.&lt;/p&gt;
&lt;div id=&#34;structure-of-drop-ins&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Structure of drop ins&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There is no fixed structure for drop ins. Ask us to clarify, explain, show, trouble-shoot etc. but it is up to you do direct your own learning under supervision in these sessions&lt;/li&gt;
&lt;li&gt;Not obligatory – there to help you either get up to speed with material already covered or if we have the time and capacity to take you beyond what you have covered, if you would like to be challenged&lt;/li&gt;
&lt;li&gt;Respect our facility to teach and your colleagues’ capacity to learn by not distracting&lt;/li&gt;
&lt;li&gt;No additional assessable material will be introduced in Drop-ins – their function is to consolidate your learning&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;todays-drop-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Today’s drop in&lt;/h2&gt;
&lt;p&gt;This worksheet is a HTML file - you can save it to your computer like any file and open it using a web browser like Firefox or Chrome.&lt;br /&gt;
There are two aims for this drop in worksheet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;To make sure you are prepared for the practicals which start next week. We want to make sure the practical will run as smoothly as possible as it may not be easy to problem solve issues remotely - worst case scenario you will have to fix it yourself.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Introduce fundamental concepts in computing and using R that you will need in this module - you can refer back to this in the future&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will be covering the following checklist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you know how to navigate computer directories and addresses to find files or folders?&lt;/li&gt;
&lt;li&gt;Do you have R and RStudio installed on your computer?&lt;/li&gt;
&lt;li&gt;Is R up to date? (version 4.0 or above)&lt;/li&gt;
&lt;li&gt;Do you know how to set up scripts and directories in RStudio?&lt;/li&gt;
&lt;li&gt;Do you know how to import and export data into R in various formats?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’ve answered no to any of the above questions, then continue on. Some of you may already have R and RStudio installed from previous modules - that’s great! Check that your version and packages are all up to date (Under the Packages tab, click Update). Even so, you can work through this document if you want to check everything works or you need a refresher.&lt;/p&gt;
&lt;p&gt;There are some test-yourself questions in each section.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;why-programming-and-computing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. Why programming and computing?&lt;/h1&gt;
&lt;p&gt;We care about teaching you programming and computing skills because they are important skills in the current workforce and are not to be taken for granted. Programming is not just code, it’s a way of thinking and requires problem solving skills that are applicable to other scenarios. You can apply these skills to a range of problems or examples beyond what we will cover in this module. We will be using R which is classified as a high-level programming language - it’s not the same thing as learning how to use Excel.&lt;/p&gt;
&lt;p&gt;Learning programming is like learning a language - there is grammar and syntax and it takes time and effort to learn and to practice. Don’t expect to pick it up like memorising content from a lecture - take it in small steps.&lt;/p&gt;
&lt;div id=&#34;basic-computing-terms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic computing terms&lt;/h2&gt;
&lt;p&gt;We don’t always formally learn computing terminology even if we’ve always been using computers. Here are some general computing concepts we will be using and that we expect you to be familiar with:&lt;/p&gt;
&lt;div id=&#34;drives-folders-files&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Drives, Folders &amp;amp; Files&lt;/h3&gt;
&lt;p&gt;In computer science, most commercial operating software are organised in to &lt;strong&gt;drives&lt;/strong&gt;, &lt;strong&gt;directories&lt;/strong&gt;, &lt;strong&gt;folders&lt;/strong&gt; &amp;amp; &lt;strong&gt;files&lt;/strong&gt;. Using Windows as example:
C:/ is a drive (a hard drive). Within the drive, information is sorted in folders (e.g. Documents). Within folders are groups of files which contain information (e.g. my_document.doc). Here, “.doc” is the file extension that tells the computer what kind of file it is and what program to use to read the information (a Word document). Folders within folders are sometimes called sub-folders.&lt;/p&gt;
&lt;p&gt;Commercial computers tend to have only one drive but you can have as many folders and files as you want. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C: (the hard drive)
  -&amp;gt; my documents (within drive C)
      -&amp;gt; file A (within my documents)
      -&amp;gt; folder 1 (within my documents)
          -&amp;gt; folder 2 (within folder 1)
              -&amp;gt; file B (within folder 2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;directories&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Directories&lt;/h3&gt;
&lt;p&gt;Directories are the cataloguing system describing where files and folders are stored; also called addresses. Directories take the form of an address like “C:/documents/folder/file” which tells a program to look in this location. The concept of folders and files comes from the days before computers where information was written on paper and stored in filing cabinets. Directories are not case sensitive.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We recommend that you organise your files in a structured way. For example, have a folder for the module and sub-folders for each of the practicals:&lt;br /&gt;
Documents (folder) -&amp;gt; Biostats (folder) -&amp;gt; Practical 1 (folder) -&amp;gt; Script (file)&lt;br /&gt;
We don’t recommend using a automatically selected “downloads” folder or your “desktop” because these are not permanent file locations and can be hard to find files later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice that the components of the address is separated using a forward slash &lt;code&gt;/&lt;/code&gt;. R can understand &lt;code&gt;/&lt;/code&gt; but does not understand back slash &lt;code&gt;\&lt;/code&gt; because back slashes have a specific meaning in programming. When typing addresses, make sure you use the correct slash.&lt;/p&gt;
&lt;p&gt;We navigate through our computer’s directories using Explorer in Windows or Finder in MacOS. You can see the address of a directory in the address bar. We will learn how to use directories in RStudio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Question.&lt;/strong&gt; Click &lt;code&gt;code&lt;/code&gt; to show the answer.&lt;br /&gt;
What is the file extension in the following address? &lt;code&gt;C:/users/admin/monday/dropin/worksheet.pdf&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r fold-hide&#34;&gt;&lt;code&gt;.pdf which stands for portable document format&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;why-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why R?&lt;/h2&gt;
&lt;p&gt;R is just one of &lt;em&gt;many&lt;/em&gt; high-level programming languages used professionally (e.g. C++, Java, Python) but R is specially designed for doing statistics and data handling. Hence R is widely taught in statistic classes. There are other statistics programs but these are normally “point-and-click” programs where you click a button and magic happens.&lt;/p&gt;
&lt;p&gt;R is an open source software and it is &lt;em&gt;transparent&lt;/em&gt;, meaning you can &lt;em&gt;see&lt;/em&gt; how your data is being manipulated. Transparency allows us to check whether the statistics is done correctly and is easier to see how statistical theory is being applied. R is also &lt;em&gt;reproducible&lt;/em&gt; because R allows you to document your code in &lt;em&gt;scripts&lt;/em&gt; that you can give another person to replicate your analysis.&lt;/p&gt;
&lt;p&gt;The traditional option to learning statistics is to learn these calculations by hand and use pre-calculated statistical reference tables but we would only expect that for very simple examples and doing calculations by hand is an arduous task for realistic biological problems.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;why-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why RStudio?&lt;/h2&gt;
&lt;p&gt;R and RStudio are different software. R is a computer programming language and statistical environment. RStudio is a user interface which has some useful features that makes using R easier. It is possible to use R by itself (you can try it) but RStudio makes everything a lot easier by providing some organisation. You cannot use RStudio without R. An analogy is that R is the engine of a car and RStudio is the steering wheel - you control the wheel but the engine is what makes the car go forward.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-r-and-rstudio&#34; class=&#34;section level1 tabset&#34;&gt;
&lt;h1&gt;2. Installing R and RStudio&lt;/h1&gt;
&lt;p&gt;You will need to install R AND RStudio &lt;strong&gt;in that order&lt;/strong&gt;. You only need to open RStudio when you want to use R - RStudio will open R for you in the background.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;CRANsite.png&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here’s a video about installing R &lt;a href=&#34;https://vimeo.com/203516510&#34; class=&#34;uri&#34;&gt;https://vimeo.com/203516510&lt;/a&gt; and RStudio &lt;a href=&#34;https://vimeo.com/203516968&#34; class=&#34;uri&#34;&gt;https://vimeo.com/203516968&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can follow the instructions below or try the interactive tutorial at &lt;a href=&#34;https://learnr-examples.shinyapps.io/ex-setup-r/#section-welcome&#34; class=&#34;uri&#34;&gt;https://learnr-examples.shinyapps.io/ex-setup-r/#section-welcome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are the instructions for various operating software (click the relevant tab):&lt;/p&gt;
&lt;div id=&#34;windows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Windows&lt;/h2&gt;
&lt;p&gt;For R:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://cran.r-project.org/bin/windows/base/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/bin/windows/base/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click “Download R” in the blue box. The version number is not important.&lt;/li&gt;
&lt;li&gt;Save the file, open it and follow the instructions. You can leave everything as the default option. Make sure you’ve installed the program somewhere sensible like the Programs folder in the C:/ drive.&lt;/li&gt;
&lt;li&gt;Open it and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For RStudio:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://rstudio.com/products/rstudio/download/&#34; class=&#34;uri&#34;&gt;https://rstudio.com/products/rstudio/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click download for &lt;strong&gt;RStudio Desktop Open Source Licence&lt;/strong&gt;. The FREE option.&lt;/li&gt;
&lt;li&gt;Install the program somewhere sensible&lt;/li&gt;
&lt;li&gt;Open it and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;mac&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mac&lt;/h2&gt;
&lt;p&gt;For R:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://cran.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click “Download R for (Mac) OS X”&lt;/li&gt;
&lt;li&gt;Save the latest release file (e.g. R-4.0.2.pkg), open it and follow the instructions. You can leave everything as the default option. Make sure you’ve installed the program somewhere sensible.&lt;/li&gt;
&lt;li&gt;Open it and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For RStudio:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://rstudio.com/products/rstudio/download/&#34; class=&#34;uri&#34;&gt;https://rstudio.com/products/rstudio/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click download for &lt;strong&gt;RStudio Desktop Open Source Licence&lt;/strong&gt;. The FREE option.&lt;/li&gt;
&lt;li&gt;Install the program somewhere sensible&lt;/li&gt;
&lt;li&gt;Open it and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;linux&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;p&gt;For R:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://cran.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click “Download R for Linux”&lt;/li&gt;
&lt;li&gt;Click your version of Linux&lt;/li&gt;
&lt;li&gt;Copy and paste the relevant installation code&lt;/li&gt;
&lt;li&gt;Open R and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For RStudio:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://rstudio.com/products/rstudio/download/&#34; class=&#34;uri&#34;&gt;https://rstudio.com/products/rstudio/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click download for &lt;strong&gt;RStudio Desktop Open Source Licence&lt;/strong&gt;. The FREE option.&lt;/li&gt;
&lt;li&gt;Run the relevant code&lt;/li&gt;
&lt;li&gt;Open it and check it installed properly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See &lt;a href=&#34;https://linuxconfig.org/rstudio-on-ubuntu-18-04-bionic-beaver-linux&#34; class=&#34;uri&#34;&gt;https://linuxconfig.org/rstudio-on-ubuntu-18-04-bionic-beaver-linux&lt;/a&gt; for a guide&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;chromebook&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chromebook&lt;/h2&gt;
&lt;p&gt;There are a few options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The easiest option is to run Linux on your computer, then you can install R and RStudio. Try the instructions on &lt;a href=&#34;https://blog.sellorm.com/2018/12/20/installing-r-and-rstudio-on-a-chromebook/&#34; class=&#34;uri&#34;&gt;https://blog.sellorm.com/2018/12/20/installing-r-and-rstudio-on-a-chromebook/&lt;/a&gt; or &lt;a href=&#34;https://github.com/jennybc/operation-chromebook#links-re-r-and-rstudio&#34; class=&#34;uri&#34;&gt;https://github.com/jennybc/operation-chromebook#links-re-r-and-rstudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use RStudio Server&lt;/li&gt;
&lt;li&gt;Use RStudio Cloud &lt;a href=&#34;https://rstudio.cloud/&#34; class=&#34;uri&#34;&gt;https://rstudio.cloud/&lt;/a&gt; (in beta so it may not work)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sorry chromebook users, if your chromebook version is very old then it may not be possible to install R.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Question.&lt;/strong&gt; Click &lt;code&gt;code&lt;/code&gt; to show the answer.&lt;br /&gt;
What do you think happens if you open RStudio without downloading R first?&lt;/p&gt;
&lt;pre class=&#34;r fold-hide&#34;&gt;&lt;code&gt;RStudio won&amp;#39;t work because it is looking for a program called R that doesn&amp;#39;t exist&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;opening-r-and-rstudio-for-the-first-time&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;3. Opening R and RStudio for the first time&lt;/h1&gt;
&lt;p&gt;If you open R itself you’ll see that it’s pretty bare bones. Most annoyingly you have to remember what information is stored in its memory. RStudio is a intermediate program that acts as a mediator between you and R:&lt;br /&gt;
user -&amp;gt; input -&amp;gt; RStudio -&amp;gt; R -&amp;gt; RStudio -&amp;gt; output -&amp;gt; user&lt;/p&gt;
&lt;p&gt;If you open RStudio you’ll see several windows that organise how information is passed to R and how output from R is presented:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RStudio-console.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Left: The big window is the &lt;strong&gt;console&lt;/strong&gt;. This is the interface with R and is the same as using R on its own. (don’t worry about “terminal”)&lt;/li&gt;
&lt;li&gt;Top right: This window has three tabs: “environment” - shows you what information is stored in R’s memory, “history” - shows your code history &amp;amp; “connections” - don’t worry about this one.&lt;/li&gt;
&lt;li&gt;Bottom right: This has several tabs. The most important being “files” - showing you where RStudio is looking at on your computer &amp;amp; “plot” - shows you any plots you make in R.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can customise the layout and colour scheme of RStudio in Options.&lt;br /&gt;
There are other user interfaces for R but RStudio has a lot of support and is commonly used.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We expect you to be familiar with the RStudio layout. There are a number of shortcuts and hotkeys as well. There are only minor differences between Windows and Mac shortcuts (e.g. using Cmd instead of Ctrl)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div id=&#34;updating-r-and-base-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Updating R and base packages&lt;/h2&gt;
&lt;p&gt;The last major update to R was version 4.0. If you have an older version we recommending updating R because many fundamental aspects of the language were changed and are not backwards compatible. You will see which R version is used in the information in the Console when you open RStudio. If your version is older than 4.0, install the latest version as above.&lt;/p&gt;
&lt;p&gt;R is a statistical environment that consist of &lt;strong&gt;packages&lt;/strong&gt;. Packages are a set of &lt;strong&gt;functions&lt;/strong&gt; that does something to input depending on the underlying code. All your packages are stored in your &lt;strong&gt;library&lt;/strong&gt;. When you download R it comes with a basic set of packages as default which works straight out of the box. This is called &lt;strong&gt;base R&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Once you’ve installed R you should check all your &lt;strong&gt;packages&lt;/strong&gt; are up to date as well. You can update your packages by clicking the Update button under the Packages tab.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-script&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating a script&lt;/h2&gt;
&lt;p&gt;The greatest advantage of RStudio is that it allows you to write &lt;strong&gt;scripts&lt;/strong&gt;. These are files ending in &lt;code&gt;.R&lt;/code&gt; that are created and opened by RStudio. R itself cannot open, read or create scripts. Scripts are text documents of code that you can save on your computer and open later. They provide a guide to what you want to enter to R and saves you from &lt;strong&gt;having to type out code over and over again&lt;/strong&gt;. Before RStudio, we had to save our code in notepad or similar then copy and paste it into R (believe me it was a pain). Now we can do the same but in one click. Importantly, scripts allow &lt;strong&gt;reproducibility&lt;/strong&gt; and helps with problem solving.&lt;/p&gt;
&lt;p&gt;You can create a new script under File -&amp;gt; New file -&amp;gt; Script (Ctrl+Shift+N) or click the white square with a green and white plus sign in the top left corner.&lt;br /&gt;
Save it and give it an informative name (e.g. “Dropin1.R”)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;open-script.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s add some code to this script by going through the basics of R! Copy and paste code from below into your script.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Run code from your script rather than directly from the console&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A script is a record of what you’ve done and it makes it easy to spot any mistakes you might have made (transparency &amp;amp; reproducibility). Put your cursor on the line you want to run then press Ctrl+Enter or click Run. You can run multiple lines by highlighting the relevant lines. You can run the entire script from beginning to end using the shortcut Ctrl+Alt+R.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Run.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;setting-up-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setting up packages&lt;/h2&gt;
&lt;p&gt;To use a package in R, you need to &lt;strong&gt;call&lt;/strong&gt; it from R’s library using the function &lt;code&gt;library()&lt;/code&gt;. A package we will see later in the module is &lt;code&gt;MASS&lt;/code&gt; which contains datasets you can use at home to practice the statistical tests covered in the lectures.&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;library(MASS)&lt;/code&gt; into your script then press Enter. You have just &lt;strong&gt;run&lt;/strong&gt; your first line of code. R will load the package &lt;code&gt;MASS&lt;/code&gt; in the background. You can check this in RStudio under the Packages tab where there will now be a tick in the box next to &lt;code&gt;MASS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;data()&lt;/code&gt; or &lt;code&gt;data(package = .packages(all.available = TRUE))&lt;/code&gt; to see the list of available built-in datasets. Some of these will be relevant to biological sciences, others are more general (e.g. the starwars dataset of Star Wars characters comes with the package &lt;code&gt;tidyverse&lt;/code&gt;). Entering the name of a dataset will display the entire dataset. Try calling one of the &lt;code&gt;MASS&lt;/code&gt; datasets, like &lt;code&gt;Rabbit&lt;/code&gt;. You can see the descriptions of each dataset by calling &lt;code&gt;help(&amp;lt;dataset name&amp;gt;)&lt;/code&gt;, e.g. &lt;code&gt;help(Rabbit)&lt;/code&gt; will tell you it describes the blood pressure of rabbits before and after a drug treatment.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installing packages&lt;/h2&gt;
&lt;p&gt;We can customise and expand the functionality of R by installing more packages, which are made by people and distributed freely. You can download packages from an online repository using the function &lt;code&gt;install.packages(&#34;&amp;lt;insert name of package&amp;gt;&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, I wrote this document in RStudio using an additional package called &lt;code&gt;rmarkdown&lt;/code&gt; which lets me make HTML, word or PDF files of text, code and figures or tables. We will tell you if you need to install a package but where possible we will be sticking to base R.&lt;/p&gt;
&lt;p&gt;But we should check that your packages folder is set up properly - especially if you use Windows 10 and sync with OneDrive. Packages should ideally be downloaded to your local computer and not saved on the cloud (e.g. through OneDrive). The constant syncing slows down communication and creates issues between the cloud and R and RStudio. You can see where your packages are saved using &lt;code&gt;.libPaths()&lt;/code&gt; in your console - meaning Library Paths, the address of your package libraries.&lt;/p&gt;
&lt;p&gt;There should be two addresses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One in your Program Files or wherever your computer installed R. E.g. &lt;code&gt;&#34;C:/Program Files/R/R-4.1.1/library&#34;&lt;/code&gt; - this is where all the base R packages are installed (the default packages that come with R)&lt;/li&gt;
&lt;li&gt;One somewhere else on your computer - this is your personal library. When you install new packages from the Internet, they will be saved here.
&lt;ul&gt;
&lt;li&gt;If the second address is on your local computer (e.g. Documents) and not in the cloud then you don’t have to do anything. E.g. &lt;code&gt;&#34;C:/Users/XXXX/Documents/R/win-library/4.1&#34;&lt;/code&gt; is fine&lt;/li&gt;
&lt;li&gt;If the address has OneDrive in the address, then we need to fix that - follow the steps below. E.g. &lt;code&gt;&#34;C:/Users/XXXX/OneDrive/Documents/R/win-library/4.1&#34;&lt;/code&gt; is problematic&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;To change the address of your personal library in Windows 10&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create an empty folder in your Documents folder called &lt;code&gt;R&lt;/code&gt;. Make sure it is not syncing with the cloud. E.g. with the address &lt;code&gt;C:\Users\XXXX\Documents\R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click Start (Windows icon). Type in “environmental variables” [without quotations], you should see “Edit environment variables for your account” in the search results - click that&lt;/li&gt;
&lt;li&gt;Under User variables (the top window) click New&lt;/li&gt;
&lt;li&gt;In the Variable name field type &lt;code&gt;R_LIBS_USER&lt;/code&gt; - exactly like that in all caps&lt;/li&gt;
&lt;li&gt;In the Variable value field enter the address of the package folder (where you made it in step 1) - make sure to use backslash &lt;code&gt;\&lt;/code&gt; not forward slash &lt;code&gt;/&lt;/code&gt;. E.g. &lt;code&gt;C:\Users\XXXX\Documents\R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click OK twice to exit&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;.libPaths()&lt;/code&gt; in R to check that your personal library folder is now listed in &lt;code&gt;R&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;r-structure-terminology&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;4. R structure &amp;amp; terminology&lt;/h1&gt;
&lt;p&gt;At it’s most basic R is a fancy calculator.&lt;/p&gt;
&lt;div id=&#34;variables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;p&gt;Information is stored in R’s memory as &lt;strong&gt;variables&lt;/strong&gt;. These can be &lt;strong&gt;numbers&lt;/strong&gt; (e.g. 1, 2, 3) or &lt;strong&gt;strings&lt;/strong&gt; (called characters, e.g. &lt;code&gt;&#34;hello&#34;&lt;/code&gt;). Strings are identified by quotation marks (&lt;code&gt;&#34;&lt;/code&gt; or &lt;code&gt;&#39;&lt;/code&gt;). RStudio helpfully colour codes these different types. You can also change the colour scheme of RStudio.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2+2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it works you should see the answer: 4&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Make sure to remember to press enter. Entering in the code doesn’t execute it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Usually information is &lt;strong&gt;assigned a name&lt;/strong&gt; which we use to call later. This information is now a &lt;strong&gt;named variable&lt;/strong&gt;. We assign information to a variable using a left pointing arrow &lt;code&gt;&amp;lt;-&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a &amp;lt;- 2+2 # assign 2+2 to the variable called a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the named variable a is stored in R’s short-term memory (called RAM - random access memory - in computing terms; also a good album by Daft Punk). This is different to long-term memory like files saved on your computer. When you close R, RAM is cleared - like your browser history when you use private mode!&lt;/p&gt;
&lt;p&gt;If you enter &lt;code&gt;a&lt;/code&gt; in the console it will give you the answer to &lt;code&gt;2+2&lt;/code&gt; that we told it. Under the “Environment” tab, it should list &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Names are case sensitive and can be a combination of (most) symbols, letters and numbers (but no spaces).&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Variables help with simplifying our code by calling from memory. If we have another variable &lt;code&gt;b&lt;/code&gt; we can add &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;b &amp;lt;- 10
a + b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is the answer to the above code? &lt;strong&gt;Click code to show the answer&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r fold-hide&#34;&gt;&lt;code&gt;14&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can assign strings to variables too.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c &amp;lt;- &amp;quot;hello&amp;quot;
c&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Variables should be informative and meaningful&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Calculations of variables don’t work on strings. You can’t add strings together. Trying &lt;code&gt;c + a&lt;/code&gt; should give an error.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;arrays&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Arrays&lt;/h2&gt;
&lt;p&gt;Variables can store multiple pieces of information in an &lt;strong&gt;array&lt;/strong&gt;. Strings and numbers cannot be mixed in the same array - they must all be the same type of data. &lt;code&gt;c&lt;/code&gt; stands for concatenate (meaning link together) with your data within brackets separated by commas (spaces are optional but makes it easier to read code). We can use &lt;code&gt;class()&lt;/code&gt; to see what type of variable our data are: “character” for strings, “numeric” for numbers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string_array &amp;lt;- c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;)
string_array
class(string_array)

number_array &amp;lt;- c(1, 2, 3)
number_array
class(number_array)

class(c(&amp;quot;red&amp;quot;, 1, &amp;quot;green&amp;quot;, 4)) # mixing strings and numbers will default to character&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you manipulate the number array it will apply the calculation to all numbers.
&lt;code&gt;*&lt;/code&gt; is multiply. &lt;code&gt;/&lt;/code&gt; is divide:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;number_array * 2
number_array / 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can add arrays together as long as they have the same &lt;strong&gt;length&lt;/strong&gt; (number of data). &lt;code&gt;length()&lt;/code&gt; tells you how many observations are in the variable. &lt;code&gt;seq()&lt;/code&gt; is a function to generate a sequence of numbers - here 3 evenly spaced numbers between 10 and 20:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;length(number_array)
number_array2 &amp;lt;- seq(10, 20, length.out = 3)
number_array2

number_array + number_array2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-frames&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data frames&lt;/h2&gt;
&lt;p&gt;Often data is stored in multiple arrays which we can combine together to form &lt;strong&gt;columns&lt;/strong&gt; and &lt;strong&gt;rows&lt;/strong&gt;. This becomes a &lt;strong&gt;data frame&lt;/strong&gt;. The columns have &lt;strong&gt;names&lt;/strong&gt; or column headers that you can check or assign names using &lt;code&gt;names()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;our_data &amp;lt;- data.frame(colo = string_array, numbr = number_array2)
our_data
names(our_data) # original headers
names(our_data) &amp;lt;- c(&amp;quot;colour&amp;quot;, &amp;quot;number&amp;quot;) # give new names
names(our_data) # updated headers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can view some meta-information of our data in a few ways:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ncol(our_data) # the number of columns
nrow(our_data) # the number of rows
class(our_data) # type of variable&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that there’s a mix of numbers and strings we cannot manipulate our data frame as a whole. Instead we need to specify which variable we want within the data frame. We use &lt;code&gt;$&lt;/code&gt; to specify which column to look at by its column name:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;our_data$number
our_data$number * 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dollar sign introduces a fundamental syntax in R for extracting information:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data_frame_name$variable_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The bit before the $ is the name of the data frame stored in R’s memory.&lt;br /&gt;
The bit after the $ is the name of the variable within the data frame that we want.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using &lt;code&gt;$&lt;/code&gt; is really important to understand because it is how we tell R what information we want from it’s memory. We will see this again and again and is one of the most common coding mistakes if your code doesn’t work. e.g. misspelled variable names or data frame names.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can also specify a single cell in our data frame by referring to the column and row number in square brackets. &lt;strong&gt;R checks rows first then columns&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;our_data
our_data[1,2] # First row, second column
our_data[2,1] # Second row, first column&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Omitting a number shows all values in the row or column.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;our_data[,2] # second column - same as our_data$number
our_data[2,] # Second row&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;other-data-manipulation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other data manipulation&lt;/h2&gt;
&lt;p&gt;R also has a few built in functions for various calculations. Here are some examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;log10(our_data$number) # log10 transformation
log(our_data$number) # natural log transformation
exp(our_data$number) # exponential
10^(our_data$number) # Power of 10
mean(our_data$number) # calculate the mean&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rounding&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rounding&lt;/h2&gt;
&lt;p&gt;The function to round numbers by decimal places in R is &lt;code&gt;round(x, digits = &amp;lt;decimal places&amp;gt;)&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is your number of interest. The function to round to significant digits is &lt;code&gt;signif(x, digits = &amp;lt;significant places&amp;gt;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Although we are usually taught to round up a value ending in &lt;code&gt;.5&lt;/code&gt; to the nearest whole number, the standard in many computers is to round to the nearest &lt;strong&gt;even number&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;24.25&lt;/code&gt; will be rounded by R to &lt;code&gt;24.2&lt;/code&gt; instead of &lt;code&gt;24.3&lt;/code&gt; when rounding to 1 decimal place. Try it - &lt;code&gt;round(24.25, 1)&lt;/code&gt;, whereas &lt;code&gt;round(24.35, 1)&lt;/code&gt; will round to &lt;code&gt;24.4&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;factors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Factors&lt;/h2&gt;
&lt;p&gt;Sometime we need our character strings to represent categorical groups. That’s where &lt;strong&gt;factors&lt;/strong&gt; come in. They are a special data class of variable consisting of groups with sub-categories (called &lt;strong&gt;levels&lt;/strong&gt;). We can turn character strings into factors and vice versa by using &lt;code&gt;as.character()&lt;/code&gt; or &lt;code&gt;as.factor()&lt;/code&gt; and saving the output as a new variable. Let’s turn our string array into a factor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string_factor &amp;lt;- as.factor(string_array)
# Now we can see it is a factor and our colours have become levels (the sub-categories).
class(string_factor)
levels(string_factor) # Note levels are in alphabetical order by default
string_factor &amp;lt;- as.character(string_factor)
class(string_factor) # Now it&amp;#39;s back to a character&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Factors are important, particularly when doing statistical hypothesis testing because it dictates the &lt;em&gt;order&lt;/em&gt; in which R handles the data, otherwise R will default to ordering in alphabetical order.&lt;/p&gt;
&lt;p&gt;So to summarise:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Type of data&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;R class&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;1,2,3&lt;/td&gt;
&lt;td&gt;numeric (num)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;strings&lt;/td&gt;
&lt;td&gt;“I”, “like”, “R”&lt;/td&gt;
&lt;td&gt;character (chr)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;categorical (ordinal or nominal)&lt;/td&gt;
&lt;td&gt;“group A”, “group B”&lt;/td&gt;
&lt;td&gt;factor with levels&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can reorder the levels of a factor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string_factor &amp;lt;- factor(string_array, levels = c(&amp;quot;green&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;red&amp;quot;))
string_factor # Now you see that green is the first level
string_factor &amp;lt;- relevel(string_factor, &amp;quot;red&amp;quot;)
string_factor # Relevel shifts the order of factors to make the specified one first - now red is first&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can be more specific about the order too. Above those were nominal categories but we can also use ordinal categories by including &lt;code&gt;ordered = TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ordinal_factor &amp;lt;- factor(c(&amp;quot;low&amp;quot;, &amp;quot;med&amp;quot;, &amp;quot;high&amp;quot;), ordered = TRUE, levels = c(&amp;quot;low&amp;quot;, &amp;quot;med&amp;quot;, &amp;quot;high&amp;quot;))
ordinal_factor&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R will treat these ordered factor levels differently to unordered factor levels but the difference is not important for what we will do in this module and unordered factors levels in the order we want will be fine.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;commenting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Commenting&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;#&lt;/code&gt; (hash/pound) sign indicates comments. Anything after this symbol is not run in R. Commenting is for writing notes or telling the user what is going on - see examples in this document. This becomes really important if you are sharing your code with someone else, including your future self.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this is a comment&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;You will be working with all these types of data and ways of manupipulating data in R in the practicals and for your assessment&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question.&lt;/strong&gt; Click &lt;code&gt;code&lt;/code&gt; to show the answer.&lt;br /&gt;
What does &lt;code&gt;#&lt;/code&gt; mean in R code?&lt;/p&gt;
&lt;pre class=&#34;r fold-hide&#34;&gt;&lt;code&gt;# creates a comment to accompany code. Any text after # is not executed (run)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Question.&lt;/strong&gt; Click &lt;code&gt;code&lt;/code&gt; to show the answer.&lt;br /&gt;
What is the function to load a package at the start of a script?&lt;/p&gt;
&lt;pre class=&#34;r fold-hide&#34;&gt;&lt;code&gt;library() is the function to load a package&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Question.&lt;/strong&gt; Click &lt;code&gt;code&lt;/code&gt; to show the answer.&lt;br /&gt;
What is the output if you ran the following lines of code?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;- 10
dog &amp;lt;- 20
cat + dog&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r fold-hide&#34;&gt;&lt;code&gt;30&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;working-directories-in-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;5. Working directories in R&lt;/h1&gt;
&lt;p&gt;Remember directories? Typing out whole addresses starting from the hard drive is annoying. There is a short cut if we use &lt;strong&gt;working directories&lt;/strong&gt;. Working directories are default directories that programs will look in first. We can then use directory addresses that are &lt;em&gt;relative&lt;/em&gt; to this default address which shortens addresses.&lt;/p&gt;
&lt;p&gt;For example, following this directory structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:
  -&amp;gt; documents
      -&amp;gt; file A 
      -&amp;gt; folder 1 
          -&amp;gt; folder 2 
              -&amp;gt; file B&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the default directory is C:/, then the address for file B is &lt;code&gt;C:/documents/folder1/folder2/fileB&lt;/code&gt;.&lt;br /&gt;
But if we set folder 1 as the working directory &lt;code&gt;C:/documents/folder1/&lt;/code&gt;, then we can use the relative address for the file: &lt;code&gt;folder2/fileB&lt;/code&gt;. This way we don’t have to type &lt;code&gt;C:/documents/folder1/&lt;/code&gt; every time.&lt;/p&gt;
&lt;p&gt;Navigating through directories using addresses can be confusing. Another useful command is &lt;code&gt;..&lt;/code&gt; which tells the address to go &lt;em&gt;up&lt;/em&gt; a directory. For example, if folder 2 was the working directory &lt;code&gt;C:/documents/folder1/folder2&lt;/code&gt; and we wanted to access file A, then we need to tell the computer to go up two directories. The relative address for the file is: &lt;code&gt;../../fileA&lt;/code&gt; which means that the computer is now looking in the &lt;code&gt;documents&lt;/code&gt; folder. In contrast, the relative address for file B is even shorter, &lt;code&gt;fileB&lt;/code&gt;, since folder 2 is already the working directory.&lt;/p&gt;
&lt;p&gt;RStudio has a default working directory.&lt;br /&gt;
You can see which working directory is the default directory in RStudio on the “Files” tab. You can also check what working directory R is using by typing &lt;code&gt;getwd()&lt;/code&gt; (GET Working Directory). When you run code directly from the Console, it will use the RStudio working directory. The working directory of a script by default is the directory the script is saved in - this may be different to the default working directory in the Files tab. &lt;em&gt;This may be one reason RStudio cannot find a file even with a “correct” relative address&lt;/em&gt;.&lt;/p&gt;
&lt;div id=&#34;changing-working-directories&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Changing working directories&lt;/h2&gt;
&lt;p&gt;You can change the default RStudio directory under Tools -&amp;gt; Global Options but on a daily basis, changing the directory temporarily under Session -&amp;gt; Set working directory is more useful.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You will need to know how to change working directories and tell R where to find files through relative addresses because that is how we &lt;strong&gt;import&lt;/strong&gt; and &lt;strong&gt;export&lt;/strong&gt; data to and from R.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;setwd.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The R function to do the same thing is &lt;code&gt;setwd()&lt;/code&gt; (SET Working Directory). e.g. &lt;code&gt;setwd(&amp;lt;insert directory address here&amp;gt;)&lt;/code&gt;. It is good practice to keep similar files in the same folder. Otherwise you will need to specify the full address when you call a file that exists in another folder and it can get confusing if your files are all over the place.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of directories and addresses like postal addresses - if your address is incorrect the postman (R) wouldn’t know where to go to pick up your parcel (file). If R cannot find a file, check the address or the working directory is correct&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Question.&lt;/strong&gt; Click &lt;code&gt;code&lt;/code&gt; to show the answer.&lt;br /&gt;
What is the working directory in computing?&lt;/p&gt;
&lt;pre class=&#34;r fold-hide&#34;&gt;&lt;code&gt;Working directories are the location (folder) on your computer that the program is looking in by default. All file address are relative to the working directory&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Question.&lt;/strong&gt; Click &lt;code&gt;code&lt;/code&gt; to show the answer.&lt;br /&gt;
What is the difference between the function &lt;code&gt;getwd()&lt;/code&gt; and &lt;code&gt;setwd()&lt;/code&gt;?&lt;/p&gt;
&lt;pre class=&#34;r fold-hide&#34;&gt;&lt;code&gt;getwd() tells you what R thinks the working directory is, setwd() tells R what you want the working directory to be&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-data&#34; class=&#34;section level1 tabset&#34;&gt;
&lt;h1&gt;6. Loading data&lt;/h1&gt;
&lt;p&gt;To use data stored in other files, the data must be &lt;strong&gt;loaded&lt;/strong&gt; or &lt;strong&gt;read&lt;/strong&gt; into R. Imported data &lt;strong&gt;must&lt;/strong&gt; be assigned a name (using &lt;code&gt;&amp;lt;-&lt;/code&gt;) or it won’t be saved to R’s memory. The &lt;code&gt;read&lt;/code&gt; functions are a set of base R function that import data based on how data is saved in the file. In this module we will focus on two types of storing data: tab delimated &amp;amp; comma separated values.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;In tab deliminated data, values are separated by tabs. e.g. 1 2 3 4 5 6 (separated by 1 space). The &lt;code&gt;read&lt;/code&gt; function is &lt;code&gt;read.delim()&lt;/code&gt; for deliminated.&lt;/li&gt;
&lt;li&gt;In comma separated values data (CSV), values are separated by commas. e.g. 1,2,3,4,5. The &lt;code&gt;read&lt;/code&gt; function is &lt;code&gt;read.csv()&lt;/code&gt; for CSV.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Files names or directories are designated as character strings (&lt;code&gt;&#34;&#34;&lt;/code&gt;). &lt;code&gt;read.table()&lt;/code&gt; also works for tables. See &lt;code&gt;help(&#34;read.table&#34;)&lt;/code&gt; for the general inputs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;read&lt;/code&gt; functions have two important settings to be aware of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;header&lt;/code&gt;: Use &lt;code&gt;header = FALSE&lt;/code&gt; (default) if your data doesn’t have headers, &lt;code&gt;header = TRUE&lt;/code&gt; to force R to recognise headers - usually the first row of data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sep&lt;/code&gt;: Tells R to recognise how individual observations are separated (hence sep). &lt;code&gt;sep = &#34;&#34;&lt;/code&gt; or &lt;code&gt;sep = &#34; &#34;&lt;/code&gt; if it’s tab separated data (with white spaces between data - &lt;code&gt;&#34;&#34;&lt;/code&gt; is a general indicator for any whitespace, &lt;code&gt;&#34; &#34;&lt;/code&gt; is specifically 1 space) or &lt;code&gt;sep = &#34;,&#34;&lt;/code&gt; for comma separated values. If the data didn’t import properly it could be because the wrong read function or the wrong separator was used - try another one. Most of the time the default will be fine, which means you do not have to manually specify these settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes strings are loaded as factors instead of characters or vice versa. Sometimes the columns are not recognised because the separator character is incorrect. There are always simple solutions to these problems (e.g. a small typo) and you should be able to fix them.&lt;/p&gt;
&lt;p&gt;Now let’s practice two ways of importing data using &lt;code&gt;read&lt;/code&gt; functions: from a file and from the clipboard. The relevant files are available on Blackboard.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember to set your working directory to tell R where to look for files. Otherwise R will look in the default directory and won’t be able to find the file. Alternatively, if you are using the full address, make sure you are using the correct address of the file when importing data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;txt&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;.txt&lt;/h2&gt;
&lt;p&gt;Text files (.txt) tend to be delimited, meaning information is separated by a space of fixed width. This is loaded using &lt;code&gt;read.delim()&lt;/code&gt;. Try loading the file “small_sleep.txt” to an R element called &lt;code&gt;small_sleep&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;small_sleep &amp;lt;- read.delim(&amp;quot;small_sleep.txt&amp;quot;) # load the data - note the use of &amp;lt;- to assign a name
small_sleep # show the data&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;csv&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;.csv&lt;/h2&gt;
&lt;p&gt;If data is separated by a comma, it’s called a comma separated value file (.csv). Note that .txt files can also be comma separated. The function to read csv is &lt;code&gt;read.csv()&lt;/code&gt;. Try loading the file “mammal_sleep.csv” to an R element called &lt;code&gt;mammal_sleep&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mammal_sleep &amp;lt;- read.csv(&amp;quot;mammal_sleep.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data collected in Excel can be saved as a .csv file using the Save As option. CSV is preferred in many instances over the default Excel file type because it is less prone to error. This is what we will mostly be using.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;clipboard&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Clipboard&lt;/h2&gt;
&lt;p&gt;The Clipboard is where your computer saves information that you’ve copied using ctrl/cmd + c.&lt;br /&gt;
For quick and dirty data entry, or for copying code from the Internet, you can load data from the clipboard after highlighting data and copying it. You cannot paste data directly into R. But it is always better to save a data file as a .csv file and importing into R so you always have a copy of the raw data you used.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;clip.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For PC:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myclip_data &amp;lt;- read.delim(&amp;quot;clipboard&amp;quot;) # also works with read.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For Mac:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myclip_data &amp;lt;- read.delim(pipe(&amp;quot;pbpaste&amp;quot;)) # also works with read.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Web browsers might display tabbed whitespace differently so try a different separator depending on what web browser you are using (see above). If all else fails, copy the data into Excel and save the file (problem solving!).&lt;br /&gt;
Practice copying this data into a data frame called &lt;code&gt;mammal_clip&lt;/code&gt; in R from the Clipboard using the &lt;code&gt;read.delim&lt;/code&gt; function:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Species&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;BodyWt&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;BrainWt&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Africanelephant&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6654.000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5712.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Africangiantpouchedrat&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ArcticFox&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.385&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Arcticgroundsquirrel&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.920&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Asianelephant&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2547.000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4603.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Baboon&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.550&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;179.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;checking-the-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;7. Checking the data&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Always&lt;/strong&gt; check that your data loaded properly. We expect you to be able to load data from file or from clipboard during practicals and assessment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sometimes strings are loaded as factors instead of characters or vice versa. Sometimes the columns are not recognised because the separator character is incorrect. Sometimes R confuses the column names as the first line of data. All of theses are common and basic mistakes with easy fixes you should be able to deal with&lt;/p&gt;
&lt;div id=&#34;data-structure&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data structure&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;str()&lt;/code&gt; is a handy function for checking the structure of your dataset. Let’s check the mammal sleep dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(mammal_sleep)
&amp;#39;data.frame&amp;#39;:   62 obs. of  11 variables:
 $ Species    : chr  &amp;quot;Africanelephant&amp;quot; &amp;quot;Africangiantpouchedrat&amp;quot; &amp;quot;ArcticFox&amp;quot; &amp;quot;Arcticgroundsquirrel&amp;quot; ...
 $ BodyWt     : num  6654 1 3.38 0.92 2547 ...
 $ BrainWt    : num  5712 6.6 44.5 5.7 4603 ...
 $ NonDreaming: num  NA 6.3 NA NA 2.1 9.1 15.8 5.2 10.9 8.3 ...
 $ Dreaming   : num  NA 2 NA NA 1.8 0.7 3.9 1 3.6 1.4 ...
 $ TotalSleep : num  3.3 8.3 12.5 16.5 3.9 9.8 19.7 6.2 14.5 9.7 ...
 $ LifeSpan   : num  38.6 4.5 14 NA 69 27 19 30.4 28 50 ...
 $ Gestation  : num  645 42 60 25 624 180 35 392 63 230 ...
 $ Predation  : int  3 3 1 5 3 4 1 4 1 1 ...
 $ Exposure   : int  5 1 1 2 5 4 1 5 2 1 ...
 $ Danger     : int  3 3 1 3 4 4 1 4 1 1 ...&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The first line tells us that &lt;code&gt;mammal_sleep&lt;/code&gt; is a data frame. Which is how R stores observations in rows and columns. Other types are lists and matrices. It also tells us there are 62 observations - meaning the number of rows of data - and 11 variables - meaning the number of columns&lt;/li&gt;
&lt;li&gt;In the first column of &lt;code&gt;str()&lt;/code&gt;, are the names of the columns of the dataset listed with an &lt;code&gt;$&lt;/code&gt; are . So the first column is called &lt;code&gt;Species&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The second column shows what &lt;em&gt;type&lt;/em&gt; of variable the data are: character (&lt;code&gt;chr&lt;/code&gt;) for letters, numeric (&lt;code&gt;num&lt;/code&gt;) for continuous numbers and integer (&lt;code&gt;int&lt;/code&gt;) for discrete numbers. Another type you will encounter are &lt;code&gt;Factors&lt;/code&gt; and &lt;code&gt;levels&lt;/code&gt; - these are categorical variables.&lt;/li&gt;
&lt;li&gt;The third column shows the first couple of observations in each column&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;viewing-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Viewing data&lt;/h2&gt;
&lt;p&gt;The function &lt;code&gt;head()&lt;/code&gt; shows the top few rows of data. It shows 6 rows by default but you can set the number of rows to show.&lt;/p&gt;
&lt;p&gt;You can also see the entire dataset using &lt;code&gt;View()&lt;/code&gt; (note the capital V) but this will be clunky for very large datasets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;head(mammal_sleep, n = 10) # View the first 10 rows (6 is default, can be changed)
View(mammal_sleep)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;summarising-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summarising data&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;summary()&lt;/code&gt; shows some summary statistics for the specific variable. You can check these with individually calculated values. e.g. &lt;code&gt;mean(mammal_sleep$BodyWt)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;summary(mammal_sleep) # for all columns
summary(mammal_sleep$BodyWt) # summary statistics for body weight&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;missing-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Missing data&lt;/h2&gt;
&lt;p&gt;Missing data is denoted in R as &lt;code&gt;NA&lt;/code&gt;. We can see in the &lt;code&gt;str()&lt;/code&gt; output for &lt;code&gt;mammal_sleep&lt;/code&gt; that there are some missing values. How you deal with missing data depends on how you are handling or analysing the data.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Question.&lt;/strong&gt; Click &lt;code&gt;code&lt;/code&gt; to show the answer.&lt;br /&gt;
Why would this function to copy data into R from the clipboard not work in Mac (assuming the data has already been copied)?&lt;br /&gt;
&lt;code&gt;read.delim(pipe(&#34;pbpaste&#34;))&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r fold-hide&#34;&gt;&lt;code&gt;The data has not been assigned a variable name thus is not saved to the computer memory so you cannot use the data. i.e. data &amp;lt;- read.delim(pipe(&amp;quot;pbpaste&amp;quot;)) so the information is saved as a variable called data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Question.&lt;/strong&gt; Click &lt;code&gt;code&lt;/code&gt; to show the answer.&lt;br /&gt;
What summary statistic do you think &lt;code&gt;1st Qu&lt;/code&gt; and &lt;code&gt;3rd Qu&lt;/code&gt; refer to in &lt;code&gt;summary()&lt;/code&gt;?&lt;/p&gt;
&lt;pre class=&#34;r fold-hide&#34;&gt;&lt;code&gt;1st and 3rd Quantiles&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exporting-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;8. Exporting data&lt;/h1&gt;
&lt;p&gt;To export, data needs to be &lt;strong&gt;written&lt;/strong&gt; to file. You can export data as .txt or .csv easily using the &lt;code&gt;write&lt;/code&gt; functions &lt;code&gt;write.table()&lt;/code&gt; or &lt;code&gt;write.csv()&lt;/code&gt;. csv can be opened by excel. The function needs to know the name of the data frame you want to export and where to save the file. The export address needs a file name and the relevant file extension (.csv or .txt):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;write.csv(data frame name, &amp;quot;&amp;lt;insert destination folder&amp;gt;/file name.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Question.&lt;/strong&gt; Click &lt;code&gt;code&lt;/code&gt; to show the answer.&lt;br /&gt;
What is the complete function to write the &lt;code&gt;mammal_clip&lt;/code&gt; dataset as a csv?&lt;/p&gt;
&lt;pre class=&#34;r fold-hide&#34;&gt;&lt;code&gt;write.csv(mammal_clip, &amp;quot;folder/file.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now practice exporting your imported data.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;9. Plotting&lt;/h1&gt;
&lt;p&gt;The base R function to make a plot is &lt;code&gt;plot(y axis ~ x axis, data = data frame)&lt;/code&gt;. You can customise all components of the graph - try looking up how to change the point style by typing &lt;code&gt;??pch&lt;/code&gt; in console and there are lots of resources online.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(TotalSleep ~ LifeSpan, mammal_sleep)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-14&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/teaching/introR/index_files/figure-html/unnamed-chunk-14-1.png&#34; alt=&#34;Relationship between the total hours of sleep and life span in mammals&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Relationship between the total hours of sleep and life span in mammals
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you want a challenge, try replicating this figure using the &lt;code&gt;mammal_sleep&lt;/code&gt; dataset:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:unnamed-chunk-15&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://jacintak.github.io/teaching/introR/index_files/figure-html/unnamed-chunk-15-1.png&#34; alt=&#34;Relationship between log10(body weight) and life span in mammals&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: Relationship between log10(body weight) and life span in mammals
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;log10 transform body weight&lt;/li&gt;
&lt;li&gt;change the x axis labels&lt;/li&gt;
&lt;li&gt;change the y axis labels&lt;/li&gt;
&lt;li&gt;change the point style&lt;/li&gt;
&lt;li&gt;change the point colour&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This figure is a step more suitable for scientific reports than the first one because it has more informative axis labels.&lt;/p&gt;
&lt;div id=&#34;exporting-a-figure&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exporting a figure&lt;/h2&gt;
&lt;p&gt;You can copy a figure to clipboard or save the image from RStudio from the Export menu in the Plots window.&lt;/p&gt;
&lt;p&gt;To export an image using R code you need to tell R to expect a plot, plot the graph, then tell R that you’ve finished plotting - e.g. for a jpeg:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jpeg(&amp;quot;plot.jpeg&amp;quot;) # Tell R you want to save a jpeg and where
plot(TotalSleep ~ LifeSpan, mammal_sleep) # plot a graph
dev.off() # Tell R you&amp;#39;ve finished making the figure and to export the plot&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;That’s the basics of R relvant to this module. We will be using these concepts throughout the practicals and the assessment so it’s really important you can do these skills independently and confidently. You can refer back to this worksheet as a reference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should now have an R script with these basic functions saved somewhere safe on your computer.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;problem-solving&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Problem solving&lt;/h1&gt;
&lt;p&gt;Problem solving is an important skill. If your code is not working then it’s likely that you’ve made an error somewhere - and that’s OK! It’s all part of learning how to program and there’s no shame in not getting it right the first time. The first thing is to retrace your steps and identify whether you’ve missed a step or misspelled something.&lt;/p&gt;
&lt;p&gt;Learning to problem solve independently is not something you learn by reading or something you can be taught. It is a skill you have to learn by &lt;em&gt;doing&lt;/em&gt;, which means having a go yourself before seeking help from others. Make a habit of asking for help as your last option because for the assessment you will need to use R and troubleshoot independently.&lt;/p&gt;
&lt;p&gt;If you can’t identify the problem, then you need to be able to describe your problem to another person. The other person needs enough information and context to understand what you hope to achieve and what you’ve done so far to suggest a solution. Sometimes the solution isn’t immediately obvious so it may require some trial and error - and that’s all part of the process too! It’s really hard to fix someone’s coding problem without context.&lt;/p&gt;
&lt;p&gt;Talking through your problem is called rubber ducking in computer science - talking through your thought process to a rubber duck may help you realise the solution.&lt;/p&gt;
&lt;div id=&#34;tips&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Coding is like learning a language. There is grammar, syntax and terminology to learn.&lt;/li&gt;
&lt;li&gt;The secret to being a coding whiz is practice, practice, practice. Try using R at every opportunity. If you don’t use it, you lose it.&lt;/li&gt;
&lt;li&gt;It’s OK to google everything. No matter how many years you’ve been using R you will forget something basic. We don’t expect you to remember everything by rote.&lt;/li&gt;
&lt;li&gt;A lot of programming is logic. If you can’t describe what you want to achieve in words, then you can’t code it. Sometimes the solution means changing your way of thinking about a problem.&lt;/li&gt;
&lt;li&gt;A lot of errors come from spelling or syntax mistakes. It doesn’t mean you don’t know it, check your code carefully for typos. Missing brackets or quotation marks are common mistakes. Or not setting your working directory properly, or looking in the wrong directory. Or not using the correct variable names.&lt;/li&gt;
&lt;li&gt;Often, copying and pasting your error message into google comes up with the solution&lt;/li&gt;
&lt;li&gt;Trial and error is a big part of programming. If it doesn’t work the first time, tweak it and try it again. Getting a function to work might be as simple as adding or removing one of the defined parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;finding-help&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Finding help&lt;/h2&gt;
&lt;p&gt;All R code comes with help files. You can access them from the “Help” tab in RStudio. If you want help on a specific function, then you can type in &lt;code&gt;help(&amp;lt;insert function name here&amp;gt;)&lt;/code&gt;. If you don’t know your exact query, you can search using &lt;code&gt;??&amp;lt;insert term here&amp;gt;&lt;/code&gt; - e.g. &lt;code&gt;??mean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Internet is really really great for R help. Websites like StackExchange are help forums for programming. Most likely your question has already been answered on StackExchange. The trick is knowing what to type into Google.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;final-checklist&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Final checklist&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Do you know how to navigate computer directories and addresses to find files or folders?&lt;/li&gt;
&lt;li&gt;Do you have R and RStudio installed on your computer?&lt;/li&gt;
&lt;li&gt;Is R up to date? (version 4.0 or above)&lt;/li&gt;
&lt;li&gt;Do you know how to set up scripts and directories in RStudio?&lt;/li&gt;
&lt;li&gt;Do you know how to import and export data into R in various formats?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Statistical Modelling Practicals</title>
      <link>https://jacintak.github.io/project/statistical-modelling/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/project/statistical-modelling/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/project/statistical-modelling/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;StatsModels&lt;/code&gt; is an &lt;code&gt;R&lt;/code&gt; package of &lt;code&gt;learnr&lt;/code&gt; tutorials comprising two practicals on statistical modelling made for BUY22S01 Statistics and Computation at Trinity College Dublin. The package is distributed via GitHub. Each practical is for a 3 hour slot.&lt;/p&gt;
&lt;p&gt;The aim of the practicals is to introduce statistical modelling. It uses functional responses (i.e. Type II models, Holling’s disc equation) as background information.&lt;/p&gt;
&lt;p&gt;There are two parts to the practical:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Introduction to statistical modelling
&lt;ul&gt;
&lt;li&gt;Constructing a Type II model&lt;/li&gt;
&lt;li&gt;Designing an experiment&lt;/li&gt;
&lt;li&gt;Collecting data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Data analysis using statistical models in &lt;code&gt;R&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Importing data&lt;/li&gt;
&lt;li&gt;Manipulating data&lt;/li&gt;
&lt;li&gt;Conducting multiple linear regression&lt;/li&gt;
&lt;li&gt;Visualising data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Part 1 requires students collect data by replicating Holling’s disc experiment with two predictor variables: prey density and jar type (lid/ no lid). This practical focuses on Type II models. Part 2 analyses the data using both additive and interactive multiple linear regression. Simple linear regressions (with one predictor variable) are not covered for time constraints.&lt;/p&gt;
&lt;div id=&#34;remote-version&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Remote version&lt;/h2&gt;
&lt;p&gt;It is possible to adapt this in-person practical to a remote version by getting students to collect data using a Scratch simulation of a Type II functional response. I have a Scratch model of one.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;set-up&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Set up&lt;/h1&gt;
&lt;p&gt;We need to set up our computer to download the practical in R.&lt;/p&gt;
&lt;p&gt;Follow this checklist in order to make sure you are set up:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Have you installed R version 4.0 or above? - if not, install/update R
&lt;ul&gt;
&lt;li&gt;You can check your R package version using &lt;code&gt;R.Version()$version.string&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Have you installed RStudio version 1.0.136 or above? - if not install/update RStudio
&lt;ul&gt;
&lt;li&gt;You can check your RStudio version using &lt;code&gt;RStudio.Version()$version&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Have you installed the following packages? - if not use &lt;code&gt;install.packages(&#34;&amp;lt;name of package&amp;gt;&#34;)&lt;/code&gt; to do so
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;learnr&lt;/code&gt; - needed to run the tutorials&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remotes&lt;/code&gt; - needed to install the tutorials&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If everything works then you should see a Tutorials tab in one of your RStudio windows. There may already be tutorials listed there.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-the-tutorials&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installing the tutorials&lt;/h1&gt;
&lt;p&gt;Now we need to install the tutorial. The tutorials are stored in a Package available on GitHub. You will only have to install the package once at the beginning.&lt;br /&gt;
Use the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remotes::install_github(&amp;quot;jacintak/biostats&amp;quot;, dependencies = TRUE, build_vignettes = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are asked to install any other packages, choose yes.&lt;br /&gt;
If you are asked to update any packages, press &lt;code&gt;1&lt;/code&gt; for updating all of them.&lt;br /&gt;
If you are asked to install packages from source (i.e. in a pop-up window) press no.&lt;br /&gt;
If the package installed properly, you should automatically see the tutorials in the Tutorial tab.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;running-a-tutorial&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Running a tutorial&lt;/h1&gt;
&lt;p&gt;You should be able to run a tutorial from the Tutorial tab when you open RStudio without needing to do anything.&lt;br /&gt;
Make sure it’s a tutorial from the &lt;code&gt;StatsModels&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;If you click run tutorial, the tutorial will show up in the tab. You can click the “Show in new window” icon to open it in another window. Press the “Home” icon to return to the Tutorials tab.&lt;/p&gt;
&lt;p&gt;If that doesn’t work use this code and the tutorial will open in another window or your browser:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;learnr::run_tutorial(&amp;quot;&amp;lt;insert name of the tutorial to run&amp;gt;&amp;quot;, package = &amp;quot;StatsModels&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quit a tutorial by pressing the “Stop” icon.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>OSM in R</title>
      <link>https://jacintak.github.io/post/2021-07-01-OSM-in-R/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-07-01-OSM-in-R/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-07-01-OSM-in-R/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This tutorial was originally presented to NERD club on 4/2/2020.&lt;/p&gt;
&lt;div id=&#34;city-maps&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;City maps&lt;/h1&gt;
&lt;p&gt;Consider yourself a hipster?&lt;br /&gt;
Do the clean lines and natural materials of modern scandi make you feel at home?&lt;br /&gt;
Is your basic coffee order a flat white? ☕&lt;/p&gt;
&lt;p&gt;If the answer to all the above is YES, then here’s a present for you!&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/61-dKVczbXL._SL1000_.jpg&#34; title=&#34;fig:&#34; width=&#34;250&#34; alt=&#34;A map of Dublin&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;em&gt;But wait!&lt;/em&gt; This poster costs €30 (thereabouts) online!
&lt;a href=&#34;https://www.etsy.com/ie/listing/561937898/dublin-print-dublin-city-map-dublin&#34;&gt;See example&lt;/a&gt;.&lt;br /&gt;
That’s approximately 9 flat whites you could have had.&lt;br /&gt;
☕☕☕☕☕☕☕☕☕&lt;br /&gt;
Can you make this in R?, you ask, asking for a friend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fear not&lt;/strong&gt;. You can make this yourself in R!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;maps-in-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Maps in R&lt;/h1&gt;
&lt;p&gt;In this tutorial we will replicate a poster like this. We will need R and powerpoint to put in the final touches. You could do it fully in R but powerpoint will make our lives a bit easier. In summary, it requires a bit of GIS wrangling to code in what you want to display.&lt;/p&gt;
&lt;p&gt;The data is freely available from &lt;a href=&#34;https://www.openstreetmap.org&#34;&gt;Openstreetmap&lt;/a&gt;, for proprietary haters out there. I will refer to it as OSM.&lt;/p&gt;
&lt;p&gt;We will be following &lt;a href=&#34;https://ggplot2tutor.com/streetmaps/streetmaps/&#34;&gt;this&lt;/a&gt; tutorial.&lt;/p&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;You will need to install the relevant packages: &lt;code&gt;osmdata&lt;/code&gt;, &lt;code&gt;tidyverse&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#install.packages(&amp;quot;osmdata&amp;quot;, &amp;quot;tidyverse&amp;quot;, &amp;quot;sf&amp;quot;)
library(osmdata)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see this will use tidyverse and I will be using piping. Don’t worry if you are not a master at piping. The code is written.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a nutshell, instead of function2(function1(X)) to apply function 1 &lt;em&gt;then&lt;/em&gt; function 2 to X, you type x %&amp;gt;% function1() %&amp;gt;% function2(). I.E. take X, apply function 1, then apply function 2 to the resulting output. Overall it’s easier to read, hence it’s ‘tidy’.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;osm-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;OSM data&lt;/h2&gt;
&lt;p&gt;OSM stores various features you can explore under &lt;code&gt;available_features()&lt;/code&gt;. You can see what is under each feature with &lt;code&gt;available_tags(&#34;&amp;lt;insert feature name here&amp;gt;&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;get-city-co-ordinates&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. Get city co-ordinates&lt;/h1&gt;
&lt;p&gt;For this example we will make a map of Dublin. First we need the latitude and longitude of Dublin. If you want to modify the extent of your map, this is where you change the co-ordinates.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;city_coords &amp;lt;- getbb(&amp;quot;Dublin Ireland&amp;quot;)
#city_coords &amp;lt;- c(-6.391,53.2644,-6.114883, 53.416) # to get all the M50&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-map-features&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. Get map features&lt;/h1&gt;
&lt;div id=&#34;roads&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Roads&lt;/h2&gt;
&lt;p&gt;We can get roads by querying OSM for the GPS co-ordinates for Dublin and saving it to a variable called &lt;em&gt;roads&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;roads &amp;lt;- city_coords %&amp;gt;% #pipe!
  opq() %&amp;gt;% # create query for OSM database
  add_osm_feature(key = &amp;quot;highway&amp;quot;, 
                  value = c(&amp;quot;motorway&amp;quot;, &amp;quot;primary&amp;quot;, 
                            &amp;quot;secondary&amp;quot;, &amp;quot;tertiary&amp;quot;)) %&amp;gt;%
  osmdata_sf() # save it as an simple features format
roads&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;streets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Streets&lt;/h2&gt;
&lt;p&gt;We can do the same for streets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;streets &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;highway&amp;quot;, 
                  value = c(&amp;quot;residential&amp;quot;, &amp;quot;living_street&amp;quot;,
                            &amp;quot;unclassified&amp;quot;,
                            &amp;quot;service&amp;quot;, &amp;quot;footway&amp;quot;)) %&amp;gt;%
  osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;water&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Water&lt;/h2&gt;
&lt;p&gt;Can’t forget the Liffey and the canals. Sadly the ocean cannot be mapped.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;water &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;waterway&amp;quot;, value = c(&amp;quot;canal&amp;quot;, &amp;quot;river&amp;quot;)) %&amp;gt;%
  osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;3. Plotting&lt;/h1&gt;
&lt;p&gt;Time to call &lt;code&gt;ggplot2&lt;/code&gt; and plot our map.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map &amp;lt;- ggplot() +
  # roads
  geom_sf(data = roads$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;grey&amp;quot;, # colour of feature
          size = 0.8,       # Size on map
          alpha = 0.8) +    # transparency
  # streets
  geom_sf(data = streets$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;#ffbe7f&amp;quot;,
          size = 0.2,
          alpha = 0.6) +
  # water
  geom_sf(data = water$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;steelblue&amp;quot;,
          size = 0.8,
          alpha = 0.5) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE) +
  # remove axes
  theme_void()

map&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;labels&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;4. Labels&lt;/h1&gt;
&lt;p&gt;At this point it is easier to save the file and add text in powerpoint but if you want to try your hand at ggplot’s annotation features go ahead.&lt;/p&gt;
&lt;p&gt;Here I’ve done one in a dark colour scheme.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme_colour &amp;lt;- &amp;quot;#282828&amp;quot; # dark theme

dark_map &amp;lt;- map +
  labs(caption = &amp;quot;Dublin, Ireland&amp;quot;) +
  theme(axis.text = element_blank(),
        plot.margin=unit(c(1,1,1,1),&amp;quot;cm&amp;quot;),
        panel.grid.major = element_line(colour = theme_colour),
        panel.grid.minor = element_line(colour = theme_colour),
        plot.background = element_rect(fill = theme_colour),
        panel.background = element_rect(fill = theme_colour),
        plot.caption = element_text(size = 24, colour = &amp;quot;white&amp;quot;, hjust = 0.5, vjust = -2, family = &amp;quot;mono&amp;quot;),
        panel.border = element_rect(colour = &amp;quot;white&amp;quot;, fill=NA, size=2),
        axis.ticks = element_blank())

dark_map&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;saving-our-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Saving our map&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ggsave(plot = dark_map, filename = &amp;quot;NERD/dark_dublin.pdf&amp;quot;, width = 11, height = 8.5, device = &amp;quot;pdf&amp;quot;, dpi = 300)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;If all of that was too much, there’s an R package for it. &lt;a href=&#34;https://github.com/lina2497/Giftmap&#34; class=&#34;uri&#34;&gt;https://github.com/lina2497/Giftmap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is also a &lt;a href=&#34;https://anvaka.github.io/city-roads/&#34;&gt;website&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;extra-details&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Extra details&lt;/h1&gt;
&lt;p&gt;Less is more but if you really want to put more features:&lt;/p&gt;
&lt;div id=&#34;other-water-bodies&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other water bodies&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;extra_water &amp;lt;- city_coords %&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;natural&amp;quot;, value = c(&amp;quot;water&amp;quot;)) %&amp;gt;%
  osmdata_sf()

dark_map +
   geom_sf(data = extra_water$osm_polygons,
          inherit.aes = FALSE,
          fill = &amp;quot;steelblue&amp;quot;,
          colour = NA,
          alpha = 0.5) +
  geom_sf(data = extra_water$osm_multipolygons,
          inherit.aes = FALSE,
          fill = &amp;quot;steelblue&amp;quot;,
          colour = NA,
          alpha = 0.5) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;parks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Parks&lt;/h2&gt;
&lt;p&gt;Nature reserves including Dublin Bay&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;park &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;leisure&amp;quot;, value = c(&amp;quot;park&amp;quot;)) %&amp;gt;%
  osmdata_sf()

dark_map +
   geom_sf(data = park$osm_polygons,
          inherit.aes = FALSE,
          fill = &amp;quot;darkgreen&amp;quot;,
          colour = NA,
          alpha = 0.3) +
  geom_sf(data = park$osm_multipolygons,
          inherit.aes = FALSE,
          fill = &amp;quot;darkgreen&amp;quot;,
          colour = NA,
          alpha = 0.3) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;end&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;End&lt;/h1&gt;
&lt;p&gt;That’s the gist of using OSM in &lt;code&gt;R&lt;/code&gt;. You can use the same code to make any map, e.g. for a paper.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>NERD club tutorials</title>
      <link>https://jacintak.github.io/project/NERD-club/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/project/NERD-club/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/project/NERD-club/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;NERD club is a student-led peer-learning and discussion group for staff and postgraduate students in the Departments of Zoology and Botany at Trinity College Dublin. The group meets weekly for topical discussions about science or academia. There are also sub-groups that are dedicated towards specific topics such as R coding and spatial analysis. These sub-groups are focused towards peer-learning where, postgraduates in particular, are encouraged to share their learning experience and expertise in relevant topics.&lt;/p&gt;
&lt;p&gt;I have been an active contributor to NERD club and its sub-groups: R club for R programming and Space Lunch for GIS and spatial analysis. This page documents some of the outputs I have produced for peer-learning activities.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;tutorials&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tutorials&lt;/h1&gt;
&lt;div id=&#34;advanced-r-markdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Advanced R markdown&lt;/h2&gt;
&lt;p&gt;This is a short presentation showing some of the more advanced features of R Markdown using the &lt;code&gt;R&lt;/code&gt; package &lt;code&gt;bookdown&lt;/code&gt; including: numbered sections, cross-referencing, bibliographies, CSS and making a website with the static HTML builder.&lt;/p&gt;
&lt;p&gt;PDF: &lt;a class=&#34;fas fa-file-pdf&#34; href=&#34;https://jacintak.github.io/files/24March2021_Advanced_R_Markdown.pdf&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;interactive-functions-and-loops-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Interactive functions and loops in &lt;code&gt;R&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This &lt;a href=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/&#34;&gt;tutorial&lt;/a&gt; describes how to make an &lt;code&gt;R&lt;/code&gt; function that asks the user to input values for the function, and how to run a function within a simple for loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;osm-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;OSM in R&lt;/h2&gt;
&lt;p&gt;This &lt;a href=&#34;https://jacintak.github.io/post/2021-07-01-OSM-in-R/&#34;&gt;tutorial&lt;/a&gt; describes how to interface with Open Street Maps in &lt;code&gt;R&lt;/code&gt; to make a fancy map you can print and give to someone but the same code can be used to make maps for any purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction-to-spatial-points-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction to spatial points in R&lt;/h2&gt;
&lt;p&gt;This is a walkthrough of a basic workflow for working with spatial data and rasters in R. Specifically loading a raster, plotting a raster and extracting information from rasters. I use &lt;code&gt;rgbif&lt;/code&gt; to get species occurrence records from GBIF and extract temperature data from a raster of global temperatures. A blog post version is &lt;a href=&#34;https://jacintak.github.io/post/spatial-data/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;HTML: &lt;a class=&#34;fas fa-file&#34; href=&#34;https://jacintak.github.io/Rasters_SpaceClub_06102021&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fundamental-linear-regression-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fundamental linear regression in &lt;code&gt;R&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is a short presentation showing some of the basic features of linear regression in &lt;code&gt;R&lt;/code&gt; using &lt;code&gt;lm&lt;/code&gt; including: ANOVA tables, &lt;code&gt;summary&lt;/code&gt; and residual plots.&lt;/p&gt;
&lt;p&gt;PDF: &lt;a class=&#34;fas fa-file-pdf&#34; href=&#34;https://jacintak.github.io/files/20Oct2021_linear_models.pdf&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;model-selection-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Model selection in &lt;code&gt;R&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;An introduction to model parsimony and basic ways of selecting linear models and predictor variables.&lt;/p&gt;
&lt;p&gt;PDF: &lt;a class=&#34;fas fa-file-pdf&#34; href=&#34;https://jacintak.github.io/files/16Feb2022_Model_Selection.pdf&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fundamental-linear-regression-assumptions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fundamental linear regression assumptions&lt;/h2&gt;
&lt;p&gt;A run through the fundamental assumptions linear regression in &lt;code&gt;R&lt;/code&gt; using &lt;code&gt;lm&lt;/code&gt; based on residual plots.&lt;/p&gt;
&lt;p&gt;PDF: &lt;a class=&#34;fas fa-file-pdf&#34; href=&#34;https://jacintak.github.io/files/16Mar2021_Stats_Assumptions.pdf&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R Club: Functions &amp; Loops</title>
      <link>https://jacintak.github.io/post/2021-06-01-r-function-loops/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-06-01-r-function-loops/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This tutorial was originally presented to NERD club on 18/11/2020.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This document contains two examples of functions and an example of how functions can be integrated with loops.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;User defined functions take the general form of &lt;code&gt;function(inputs){processing inputs; return(output)}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;predator-prey-interactions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Predator-Prey interactions&lt;/h1&gt;
&lt;p&gt;We will use a simulation of predator-prey interactions as an example. Predator-prey interactions simulate how many prey a predator can capture after a specific amount of time and for a given density of prey. We use this example with undergraduate biology students to demonstrate statistical modelling, experimental design and collecting data.&lt;/p&gt;
&lt;p&gt;Normally we would get students to do this laboratory practical in class by picking up counters and putting them in jars while blindfolded. We can also see whether the use of different types of jars affects the efficiency of the predator. This is the experimental design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Response variable - Number of prey caught (&lt;code&gt;Ha&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Total foraging time - 1 minute, a constant (&lt;code&gt;T&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Predictor variables:
&lt;ul&gt;
&lt;li&gt;Prey density - user defined treatments (&lt;code&gt;H&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Type of jar used - jar with a lid or no lid (&lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normally the students will collect data to parameterise the functional response. Instead I’ve created a function that will predict new values of prey captured using a functional response formula that is already parameterised.&lt;/p&gt;
&lt;p&gt;Let’s look at the function:&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;an-interactive-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An interactive function&lt;/h2&gt;
&lt;p&gt;R has some capacity to be interactive. It can ask a user to input variables.
The function &lt;code&gt;functional_response&lt;/code&gt; will return the number of prey captured for a given prey density and type of jar used. The function will ask for these two inputs each time the function is run. Look at the code below and try to understand the different components. Then try running the code yourself with different inputs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#### Interactive function
# Simulation of the predator-prey functional response - DO NOT CHANGE
# To run: click Source (cmd or ctrl+shift+S) or Run All (ctrl+alt+r)
# Or source(&amp;quot;&amp;lt;insert file location here&amp;gt;&amp;quot;, echo = FALSE)

functional_response &amp;lt;- function(){
  
  # Introduce the simulation to the user - prints a message
  cat(paste(
    &amp;quot;&amp;quot;,
    &amp;quot;You have some counters (prey), a piece of A4 paper &amp;amp; a jar.&amp;quot;,
    &amp;quot;You spread the counters randomly on the A4 sheet.&amp;quot;,
    sep=&amp;quot;\n&amp;quot;))
  
  # Ask the user for the prey density for the functional response
  prey_density  &amp;lt;- readline(&amp;quot;How many prey counters are used? &amp;quot;) # ask for prey density
  
  # Check the user has inputted a number properly
  if(!grepl(&amp;quot;^[0-9]+$&amp;quot;, prey_density)){ # check whether the input contains numeric characters between 0-9 using regex (regular expressions)
    message(&amp;quot;Please enter an integer&amp;quot;) # If the input is not a number, tell them to do it again
    return(functional_response()) # Return to the beginning of the function and start again
  }
  prey_density &amp;lt;- as.integer(prey_density) # If the prey density input is a number, turn it into an interger
  
  # Ask the user for the type of jar used
  cat(paste(
    &amp;quot;&amp;quot;,
    &amp;quot;Every second you (the predator) tap the sheet to find and pick up a prey counter while blindfolded.&amp;quot;,
    &amp;quot;You have 1 minute to put as many prey counters as you can in the jar.&amp;quot;,
    &amp;quot;There are two types of jars you can use while handling prey.&amp;quot;,
    &amp;quot;Enter 1 to use a jar with a lid that you have to open and close.&amp;quot;,
    &amp;quot;Enter 2 to use a jar without a lid.&amp;quot;,
    &amp;quot;&amp;quot;,
    &amp;quot;What type of jar is used?&amp;quot;,
    sep=&amp;quot;\n&amp;quot;))
  lid_used &amp;lt;- menu(c(&amp;quot;Lid&amp;quot;, &amp;quot;No Lid&amp;quot;))
  
  # Calculate the number of prey caught (the functional response) based on the user defined input above
  if(lid_used != 0){ # Check that the use has chosen the jar used properly (1 or 2)
    
    # Use this model if using a jar with a lid
    if(lid_used == 1){
      Ha &amp;lt;- (0.2 * prey_density)/(1 + 0.2 * 0.03 * prey_density) 
    }
    
    # Use this model if using a jar without a lid
    if(lid_used == 2){
      Ha &amp;lt;- (0.7 * prey_density)/(1 + 0.7 * 0.05 * prey_density) 
    }
    
    # Add in some variation around the predicted value so that users don&amp;#39;t get the exact parameterised functional response
    Ha &amp;lt;- Ha + sample(seq(-3,3), 1) 
    
    # Make sure there are no negative prey items caught!
    if(Ha &amp;lt; 0){
      Ha &amp;lt;- 0 # Make prey caught 0 if less than 0
    }
    
    # Make sure the number of prey caught doesn&amp;#39;t exceed the number of prey available!
    if(Ha &amp;gt; prey_density){
      Ha &amp;lt;- prey_density # If prey caught is greater than the number of prey available, make it the maximum possible
    }
    
    # Print a message showing the results
    message(&amp;quot;The number of prey caught is &amp;quot;, floor(Ha), &amp;quot;. Well done!&amp;quot;) 
  }
}

# Actually run the function and tell R that it&amp;#39;s interactive 
if(interactive()) functional_response()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The function doesn’t have any inputs in &lt;code&gt;function()&lt;/code&gt; because it will ask the user for them each time&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readline&lt;/code&gt; is the function to ask for a single user input&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menu&lt;/code&gt; is the function to ask the user to chose from a number of options
&lt;ul&gt;
&lt;li&gt;Here the option is press 1 to use a jar with a lid or press 2 to use a jar without a lid&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;There are two parameterised functional responses - one for a jar with a lid and one for a jar without a lid&lt;/li&gt;
&lt;li&gt;&lt;code&gt;floor&lt;/code&gt; is a function to round the number of prey caught to the lowest whole number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the practical, students will need to run the above function for 10 prey densities, repeated 3 times, for both jar treatments - so 60 times in total. But we don’t have to do that manually - that is what loops are for!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;functions-and-loops&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Functions and loops&lt;/h2&gt;
&lt;p&gt;Here is a non-interactive version of the function above. It doesn’t have the printed messages asking for user input. This time, the function needs 3 inputs as indicated by &lt;code&gt;function(prey_density, lid_used, total_time)&lt;/code&gt;: the prey density used, the type of jar used and the total foraging time, respectively.&lt;/p&gt;
&lt;p&gt;Run the code chunk to load the function into the R environment:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Functional response function
functional_response &amp;lt;- function(prey_density, lid_used, total_time){
  
  # Check jar type is inputted correctly
  if (!lid_used %in% c(&amp;quot;yes&amp;quot;, &amp;quot;no&amp;quot;)) {
    stop(&amp;quot;Lid used is not inputted correctly. Use &amp;#39;yes&amp;#39; or &amp;#39;no&amp;#39; in all lowercase&amp;quot;)
  }
  if(lid_used == &amp;quot;yes&amp;quot;){
    Ha &amp;lt;- (0.2 * prey_density * total_time)/(1 + 0.2 * 0.03 * prey_density)
  }
  if(lid_used == &amp;quot;no&amp;quot;){
    Ha &amp;lt;- (0.7 * prey_density * total_time)/(1 + 0.7 * 0.05 * prey_density)
  }
  Ha &amp;lt;- Ha + sample(seq(-3,3), 1)
  if(Ha &amp;lt; 0){
    Ha &amp;lt;- 0
  }
  if(Ha &amp;gt; prey_density){
    Ha &amp;lt;- prey_density
  }
  # message(&amp;quot;The number of prey caught is &amp;quot;, floor(Ha))
return(floor(Ha))
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function will check that the character vector indicating the type of jar to be used is correct because R is case sensitive. The function will return the number of prey caught &lt;code&gt;Ha&lt;/code&gt; as indicated by &lt;code&gt;return(Ha)&lt;/code&gt;. The function &lt;code&gt;return&lt;/code&gt; specifically tells R to tell us the output, otherwise R will keep it to itself! Only one output is allowed (unless extra steps are taken).
The rest of the function is the same.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;using-the-functional-response-function-in-a-loop&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using the functional response function in a loop&lt;/h3&gt;
&lt;p&gt;Now let’s use a loop to do our entire experiment in one go! No manual inputs for us. In fact we can do as many treatments or replicates as we want. Let’s do prey densities between 5 and 100 in increments of 5 and 3 replicates. Since the function inputs are required we can set them up in the environment for the function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set parameters for the function
total_time &amp;lt;- 1 # total foraging time in minutes
no_treatments &amp;lt;- seq(from = 5, to = 100, by = 5) # prey density treatments between 5 and 100
replications &amp;lt;- 3 # number of replications

# a numeric vector of prey densities for all treatments, jar types and replications 
prey_density &amp;lt;- rep(rep(no_treatments, replications),2) # repeated twice for each jar type

# a character vector of the jar type
lid_used &amp;lt;- sort(rep(c(&amp;quot;no&amp;quot;, &amp;quot;yes&amp;quot;), length(prey_density)/2)) # &amp;quot;yes&amp;quot; or &amp;quot;no&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By setting up the parameters outside the function or loop, we can easily modify the parameters of the function and feed the new values into the loop. This helps us debug and is cleaner and easier to read.&lt;/p&gt;
&lt;p&gt;Now for the actual loop itself. We need to be able to store the output of the looped function.
Lists are the fastest way to do so in R because R is designed for lists and matrices.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create an empty list called prey_caught to populate 
prey_caught &amp;lt;- list()

for(i in seq_along(prey_density)){
  # Run the functional response for the nth observation in the vector prey_density representing all our observations and save it to the list
  prey_caught[[i]] &amp;lt;- functional_response(prey_density = prey_density[i],
                                         lid_used = lid_used[i],
                                         total_time = total_time)
  
  # Prepare the list for further analysis
  prey_caught[[i]] &amp;lt;-  cbind(prey_caught[[i]], prey_density[i]) # add a column for the prey density used to calculate the number of prey caught for that observation (row)
  prey_caught[[i]] &amp;lt;-  cbind(prey_caught[[i]], 1/prey_caught[[i]]) # add a column for the inverse of the number of prey caught - for statiscally parameterising the functional response
  prey_caught[[i]][,3] &amp;lt;-  ifelse(prey_caught[[i]][,3] == Inf, 0, prey_caught[[i]][,3]) # Housekeeping - turn undefined values of prey caught (from calculating 1 divided by 0) into 0. If the number of prey caught was 0
}

# Turn our list into a data frame
prey_caught &amp;lt;- data.frame(do.call(&amp;quot;rbind&amp;quot;, prey_caught))

# Label the columns
colnames(prey_caught) &amp;lt;- c(&amp;quot;Ha&amp;quot;, &amp;quot;H&amp;quot;,&amp;quot;Ha.1&amp;quot;, &amp;quot;HT.1&amp;quot;) # &amp;quot;.1 is inversed columns&amp;quot;

# Add type of lid used to our data frame
prey_caught$lid_used &amp;lt;- lid_used&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Here we are using a &lt;code&gt;for&lt;/code&gt; loop with the n&lt;sup&gt;th&lt;/sup&gt; observation denoted &lt;code&gt;i&lt;/code&gt;. This can be called anything you want but &lt;code&gt;i&lt;/code&gt; is from mathematical notation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seq_along&lt;/code&gt; is a useful function for telling which observation you are at for a vector - try it out on its own.&lt;/li&gt;
&lt;li&gt;Lists can only contain one variable type, unlike a data frame, but that’s why they are fast and memory efficient for high performance computing
&lt;ul&gt;
&lt;li&gt;If we were to add the jar type (a character vector) to the list within the loop, then all our numeric output will be converted to characters (default R behaviour) - not what we want!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do.call&lt;/code&gt; is a handy function for lists. It collapses multidimensional lists into one dimension, here appending them by rows (i.e. adding new observations by rows at the end)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;visualising-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visualising the data&lt;/h3&gt;
&lt;p&gt;Now we can plot our results and conduct our linear regression:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

prey_caught %&amp;gt;% # Absolute values
  ggplot(aes(H, Ha, colour = lid_used)) +
  geom_point() +
  geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, fullrange=TRUE) +
  labs(x = expression(paste(&amp;quot;Prey density  (H)&amp;quot;)),
       y = expression(paste(&amp;quot;Prey captured  (Ha)&amp;quot;)),
       colour = &amp;quot;Jar used&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/index_files/figure-html/plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Linear model
summary(lm(Ha.1 ~ HT.1 * lid_used, prey_caught))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Call:
lm(formula = Ha.1 ~ HT.1 * lid_used, data = prey_caught)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.27245 -0.05371 -0.01596  0.00899  0.84476 

Coefficients:
                 Estimate Std. Error t value Pr(&amp;gt;|t|)   
(Intercept)       0.07136    0.02262   3.155  0.00204 **
HT.1              1.00548    0.40029   2.512  0.01338 * 
lid_usedyes       0.09517    0.03198   2.976  0.00356 **
HT.1:lid_usedyes -1.11833    0.56609  -1.976  0.05058 . 
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

Residual standard error: 0.1351 on 116 degrees of freedom
Multiple R-squared:  0.08913,   Adjusted R-squared:  0.06558 
F-statistic: 3.784 on 3 and 116 DF,  p-value: 0.01242&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That has saved us from running the code 120 times! Now we can do it in one!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Quick guide to R/exams</title>
      <link>https://jacintak.github.io/teaching/rexams/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/teaching/rexams/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/teaching/rexams/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;http://www.r-exams.org&#34;&gt;&lt;code&gt;R/exams&lt;/code&gt;&lt;/a&gt; is an R package that generates a reproducible workflow for designing, producing and marking exams.&lt;br /&gt;
Here, I provide a short walkthough for generating an online test for Blackboard - see the &lt;a href=&#34;http://www.r-exams.org/tutorials/exams2blackboard/&#34;&gt;R/exams website&lt;/a&gt; for some tutorials.&lt;/p&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;Install R/exams via CRAN with &lt;code&gt;install.packages(&#34;exams&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;running-the-package-for-the-first-time&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Running the package for the first time&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;exams&lt;/code&gt; uses &lt;code&gt;rtools&lt;/code&gt; to create zip files. Make sure the proper &lt;code&gt;rtools&lt;/code&gt; is installed. An error message will appear if &lt;code&gt;rtools&lt;/code&gt; does not have permission to create zip files.&lt;br /&gt;
To give permission for creating .zip for windows:
Control Panel &amp;gt; System and Security &amp;gt; System &amp;gt; Advanced System Settings &amp;gt; Environmental Variables &amp;gt; add “C:/RTools/bin”&lt;br /&gt;
You may also need to install dependent packages like &lt;code&gt;tth&lt;/code&gt; for math notation.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;types-of-questions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Types of questions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Single correct answer MCQ (schoice)&lt;/li&gt;
&lt;li&gt;Multiple correct answer MCQ (mchoice)&lt;/li&gt;
&lt;li&gt;Numeric answer (num)&lt;/li&gt;
&lt;li&gt;String (string)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cloze is another option but is not supported by blackboard, this permits a combination of the above for the MCQ answer list&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;building-an-exam-question&#34; class=&#34;section level1 tabset&#34;&gt;
&lt;h1&gt;Building an exam question&lt;/h1&gt;
&lt;p&gt;There are several file types that are supported when writing your question but I have stuck with ‘.Rmd’. There are four parts of a question file:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The question&lt;/li&gt;
&lt;li&gt;The answer list&lt;/li&gt;
&lt;li&gt;The solution list for giving feedback&lt;/li&gt;
&lt;li&gt;The meta-information&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of these sections are defined by a header tag marked by =====. # does not work as a tag.&lt;/p&gt;
&lt;div id=&#34;question&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question&lt;/h2&gt;
&lt;p&gt;The tag for defining the question is:&lt;/p&gt;
&lt;p&gt;Question&lt;br /&gt;
========&lt;/p&gt;
&lt;p&gt;The various random number generators in R will be your friend.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sample() # pick n random number(s) from a vector of discrete numbers
runif() # generate a vector of continuous numbers, can set min and max
rnorm() # generate a vector of continuous numbers from a normal distribution with a defined mean and standard deviation&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;things-to-note&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Things to note&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Code chunk options are in effect. By default figures will have captions, turn it of with &lt;code&gt;fig.caption = &#34;&#34;&lt;/code&gt;. Other useful figure options are figure sizes. Figure options can also be defined when compiling the exam&lt;/li&gt;
&lt;li&gt;You can show code with &lt;code&gt;echo  = TRUE&lt;/code&gt;, turn off R formatting with &lt;code&gt;results = &#34;asis&#34;&lt;/code&gt; &amp;amp; hide results with &lt;code&gt;results = &#34;hide&#34;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;LaTeX formatting is fine in markdown and outside code chunks&lt;/li&gt;
&lt;li&gt;To allow for randomised questions within a question file I had to escape the R code chunk to render the output as html, else the randomised question would be rendered as R output&lt;/li&gt;
&lt;li&gt;You can generate a file to go with the question using any R write to file function. Include the file in the question as normal for Rmarkdown - [filename](filelink). Leave this as default or &lt;code&gt;exams&lt;/code&gt; will not be able to find the file&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-answer-list&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The answer list&lt;/h2&gt;
&lt;p&gt;The answer subheading is defined by the tag:&lt;/p&gt;
&lt;p&gt;Answer&lt;br /&gt;
========&lt;/p&gt;
&lt;p&gt;Bulleted markdown after this tag will be considered the options for an MCQ answer list.&lt;/p&gt;
&lt;div id=&#34;things-to-note-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Things to note&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exams&lt;/code&gt; contains several helper functions to make it easy to generate lists of answers.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;answerlist&lt;/code&gt; accepts a vector of answers. It also generates the answer subheading so there is no need to type it in.&lt;/li&gt;
&lt;li&gt;Recommend using html in case LaTeX does not render properly, particularly when called as a string in an R code chunk.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Do not randomise the answer list here, use the metadata, else an incorrect answer will be assigned to be the correct one.&lt;br /&gt;
&lt;code&gt;comment = NA&lt;/code&gt; in the code chunk options will remove the # from the R output.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;There are also helper functions for various things. &lt;code&gt;mchoice2string()&lt;/code&gt; turns the solutions vector above into binary responses for the meta-information section. &lt;code&gt;num_to_choice&lt;/code&gt; generates a MCQ list of numbers for a numeric answer.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;solution&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;You can provide feedback via the solution header, including which answers are correct&lt;/p&gt;
&lt;p&gt;Solution&lt;br /&gt;
========&lt;br /&gt;
Your solution here or correct answer: &lt;code&gt;code for answer&lt;/code&gt; (or &lt;code&gt;answer[]&lt;/code&gt;)&lt;br /&gt;
Answerlist&lt;br /&gt;
-———&lt;br /&gt;
* True&lt;br /&gt;
* False&lt;br /&gt;
* etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; There should be no spaces after the header tag title, i.e. markdown formatting&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;question-metainformation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question metainformation&lt;/h2&gt;
&lt;p&gt;This is an important section of the question because it defines the correct answer. Metainformation is defined by the tag:&lt;/p&gt;
&lt;p&gt;Meta-information&lt;br /&gt;
================&lt;/p&gt;
&lt;p&gt;Useful variables are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exname = title of question, becomes name of the pool in blackboard&lt;/li&gt;
&lt;li&gt;extype = type of question (num/schoice/mchoice)&lt;/li&gt;
&lt;li&gt;exsolution: order of correct answers in binary (e.g. 01010) for MCQ or R code for numeric output - e.g. &lt;/li&gt;
&lt;li&gt;extol = the tolerance range for numeric questions&lt;/li&gt;
&lt;li&gt;exshuffle = Whether to shuffle the answers or not. This can be used to randomly select a subset of answers from an answer list. Provide a number of answers for non-numeric questions (e.g. 4 for 4 answers). &lt;code&gt;TRUE/FALSE&lt;/code&gt; is also accepted.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;an-example-question&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;An example question&lt;/h1&gt;
&lt;p&gt;This example displays the correct answer and 3 randomly chosen option out of 6 possible answers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Question
========
What is your name?

\```{r question, results = &amp;quot;hide&amp;quot;, echo=F}
# list of possible answer as a character vector
knights_of_camelot &amp;lt;- c(&amp;quot;Arthur, King of the Britons&amp;quot;, 
                        &amp;quot;Sir Lancelot the Brave&amp;quot;,
                        &amp;quot;Sir Robin the Not-Quite-So-Brave-as-Sir-Lancelot&amp;quot;,
                        &amp;quot;Sir Galahad the Pure&amp;quot;,
                        &amp;quot;Sir Bedevere the Wise&amp;quot;,
                        &amp;quot;Patsy&amp;quot;)

# solution to the vector above                        
solutions &amp;lt;- c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)

# explanations (feedback for students)
explanations &amp;lt;- c(&amp;quot;I didn&amp;#39;t vote for him&amp;quot;,
        &amp;quot;His favourite colour is blue&amp;quot;,
        &amp;quot;He doesn&amp;#39;t know the capital of Assyria&amp;quot;,
        &amp;quot;His favourite colour is blue. No, yel...&amp;quot;,
        &amp;quot;Knows nothing about swallows&amp;quot;,
        &amp;quot;Clip Clop&amp;quot;)
\```
        
\```{r answerlist, echo=F, results = &amp;quot;asis&amp;quot;}
# helper function to format the list of possible answers
answerlist(knights_of_camelot, markup = &amp;quot;markdown&amp;quot;)
\```


Solution
========
\```{r solutionlist, echo = FALSE, results = &amp;quot;asis&amp;quot;}
answerlist(ifelse(solultions, &amp;quot;True&amp;quot;, &amp;quot;False&amp;quot;), explanations, markup = &amp;quot;markdown&amp;quot;)
\```

Meta-information
================
exname: Bridgekeeper
extype: schoice
exsolution: `\r mchoice2string(solutions)`
exshuffle: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This renders like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Exam 1

    Question

    What is your name?

        Sir Bedevere the Wise
        Arthur, King of the Britons
        Sir Galahad the Pure
        Sir Lancelot the Brave

    Solution
        False. Knows nothing about swallows
        False. I didn&amp;#39;t vote for him
        False. His favourite colour is blue. No, yel.
        True. His favourite colour is blue&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could also skip the solutions vector and include it in the explanations vector like &lt;code&gt;c(&#34;False. I didn&#39;t vote for him&#34;)&lt;/code&gt;. Of course, the solution does not appear immediately in blackboard but make sure the option for solutions and feedback to appear is checked.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;compiling-the-exam&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Compiling the exam&lt;/h1&gt;
&lt;p&gt;I have written a script to compile the exam.
The compiling function (&lt;code&gt;exams2blackboard&lt;/code&gt;) requires a &lt;em&gt;list&lt;/em&gt; of file names to generate the exam. Each file represents a question. Versions of a question (&lt;code&gt;n&lt;/code&gt;) generate a pool of questions. The list should not contain subdirectories or files not to be included in the exam. &lt;code&gt;exams2html&lt;/code&gt; is a means of checking a file/list of exam questions renders properly in html (or &lt;code&gt;exams2pdf&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;There are several means of customising the metadata of the exam. Here I have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;turned off partial marks - is TRUE by default&lt;/li&gt;
&lt;li&gt;used custom directories to search for the questions and save the output zip.&lt;/li&gt;
&lt;li&gt;set 10 copies for each question using the variable &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the name of the zip file using the variable &lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the number of points for each question to 1, default = 10&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;exams&amp;quot;)
options(device.ask.default = FALSE)

## content and output directory
mydir &amp;lt;- &amp;quot;C:/Users/kongj/OneDrive - TCDUD.onmicrosoft.com/Teaching/Biostats/Midsem MCQ&amp;quot;

## define exam questions (each item in list is a pool)
myexam &amp;lt;- list.files(paste0(mydir,&amp;quot;/questions&amp;quot;), pattern = &amp;quot;.Rmd&amp;quot;)

# render single question
#exams2html(list(&amp;quot;question3.Rmd&amp;quot;), edir = paste0(mydir,&amp;quot;/questions&amp;quot;))

## generate .zip with Blackboard exam with n replicates
exams2blackboard(file = myexam, n = 10, name = &amp;#39;Jacinta&amp;#39;, dir = mydir,
                 edir = paste0(mydir,&amp;quot;/questions&amp;quot;),
                 eval = list(partial = FALSE, negative = FALSE),
                 points = 1
                 )

&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;things-to-note-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Things to note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You can create a mix of questions in the exam by defining it in the list of questions but it is not recommended for generating pools of questions&lt;/li&gt;
&lt;li&gt;If the exam is complied with no partial marks, then the blackboard exam will have no partial marks even if the option is checked within blackboard&lt;/li&gt;
&lt;li&gt;You can generate a pool of questions by compiling a single question and uploading that zip file to Blackboard under “Import Pool”. This is useful for creating random block tests in Blackboard if the compiled zip file is not suitable as an test right away&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Biostatistics tutorials</title>
      <link>https://jacintak.github.io/project/biostats-tutorials/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/project/biostats-tutorials/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/project/biostats-tutorials/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;biostats.tutorials&lt;/code&gt; is an &lt;code&gt;R&lt;/code&gt; package of &lt;code&gt;learnr&lt;/code&gt; tutorials for introductory biostatistics and &lt;code&gt;R&lt;/code&gt; at an undergraduate level.&lt;/p&gt;
&lt;p&gt;The package is still in development so stay tuned for updates. You can checkout various tutorials about using R for NERD club (postgraduates and staff) at Trinity College Dublin &lt;a href=&#34;https://jacintak.github.io/project/NERD-club/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
