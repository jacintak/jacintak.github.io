<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>conference | Jacinta&#39;s Website</title>
    <link>https://jacintak.github.io/tags/conference/</link>
      <atom:link href="https://jacintak.github.io/tags/conference/index.xml" rel="self" type="application/rss+xml" />
    <description>conference</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 08 Jul 2021 14:05:00 +0000</lastBuildDate>
    <image>
      <url>https://jacintak.github.io/img/icon-512.png</url>
      <title>conference</title>
      <link>https://jacintak.github.io/tags/conference/</link>
    </image>
    
    <item>
      <title>Society for Experimental Biology Annual Meeting</title>
      <link>https://jacintak.github.io/talk/SEB2021/</link>
      <pubDate>Thu, 08 Jul 2021 14:05:00 +0000</pubDate>
      <guid>https://jacintak.github.io/talk/SEB2021/</guid>
      <description>&lt;p&gt;Insect life cycles are adapted to a seasonal climate by expressing alternative voltinism phenotypes—the number of generations in a year. The problem is to understand how this phenotypic variation along latitudinal gradients is generated through the interactions between environmental factors, like temperature, and the traits of organisms, like development rate and dormancy. However, our current understanding is limited by how thermal responses are characterised, competing theories of thermal adaptation and an incomplete understanding of complex life cycles. Using the widely distributed grasshopper genus &lt;em&gt;Warramaba&lt;/em&gt; as a model, we aimed to reconcile theories of thermal adaptation and tested their respective predictions. We hypothesised that the egg stage was a critical life stage for generating latitudinal patterns of voltinism in &lt;em&gt;Warramaba&lt;/em&gt;. We described patterns of voltinism and thermal response of egg development rate within and among species of &lt;em&gt;Warramaba&lt;/em&gt; along a latitudinal temperature gradient. We found a latitudinal pattern of univoltinism at high latitudes and multivoltinism at low latitudes that corresponded with remarkably strong divergence in egg dormancy patterns and thermal responses of egg development. We argue that the switch in voltinism along the latitudinal gradient was generated by the combined predictions of the evolution of voltinism and of thermal adaptation. We conclude that analyses of latitudinal patterns in thermal responses and corresponding life histories need to consider the evolution of thermal response curves within the context of seasonal temperature cycles rather than based solely on optimality and trade-offs in performance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BES Macro 2021</title>
      <link>https://jacintak.github.io/talk/BESMacro2021/</link>
      <pubDate>Wed, 07 Jul 2021 11:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/talk/BESMacro2021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Transparent graphing for dark backgrounds</title>
      <link>https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I’m not usually a dark background person but I’m open to the dark side. I wanted to make a solid coloured graph with a transparent background that would show up nicely but &lt;code&gt;ggplot2&lt;/code&gt; doesn’t have a set theme for that. A clean solid fill and transparency requires some specific customisation so here is a reproducible example for you using the built-in &lt;code&gt;trees&lt;/code&gt; dataset:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tree_graph &amp;lt;- ggplot(data = trees, 
       mapping = aes(x = Height, 
                     y = Girth)) + 
    geom_point(size = 0.5, colour = &amp;quot;#B8DE29FF&amp;quot;) + 
    geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, col = &amp;quot;#B8DE29FF&amp;quot;) + 
    geom_abline(intercept = 0, slope = 1, col = &amp;quot;white&amp;quot;, lwd = 0.5, lty = 2) + 
    theme_classic() +
    theme(plot.background = element_rect(fill = &amp;quot;transparent&amp;quot;, color = NA),
          panel.background = element_rect(fill = &amp;quot;transparent&amp;quot;),
          axis.text = element_text(colour = &amp;quot;#B8DE29FF&amp;quot;, size = 8),
          axis.title = element_text(colour = &amp;quot;#B8DE29FF&amp;quot;, size = 8),
          axis.line = element_line(colour = &amp;quot;#B8DE29FF&amp;quot;),
          axis.ticks = element_line(colour = &amp;quot;#B8DE29FF&amp;quot;))

ggsave(tree_graph, filename = &amp;quot;tree_graph.png&amp;quot;, bg = &amp;quot;transparent&amp;quot;, type = &amp;quot;cairo&amp;quot;, width = 10, height = 10, dpi = 300)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a couple of generally useful elements added on purpose:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geom_smooth&lt;/code&gt; creates an automatically fitted linear model (defined using &lt;code&gt;method = &#34;lm&#34;&lt;/code&gt;). I have turned off plotting the standard errors (on by default) and manually set the colour.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geom_abline&lt;/code&gt; is your standard straight line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt; is where the customisation begins:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plot.background&lt;/code&gt; &amp;amp; &lt;code&gt;panel.background&lt;/code&gt; are set to transparent&lt;/li&gt;
&lt;li&gt;The various axis elements are set to the fill colour (a nice &lt;code&gt;viridis&lt;/code&gt; green) and desired text size&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggsave&lt;/code&gt; specifies that the background is transparent and to save it using the Cairo engine (&lt;code&gt;type = &#34;cairo&#34;&lt;/code&gt;). Cairo will create a vector based image so resizing the png isn’t an issue since the small font size is already defined.
&lt;ul&gt;
&lt;li&gt;You can also use &lt;code&gt;cairo-png&lt;/code&gt; but the graph height and width options appear to be ignored.&lt;/li&gt;
&lt;li&gt;If you don’t save it as a Cairo png, then the text will still have a white outline and won’t be a clean solid fill&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>IEA2021</title>
      <link>https://jacintak.github.io/talk/IEA2021/</link>
      <pubDate>Thu, 07 Jan 2021 09:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/talk/IEA2021/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
