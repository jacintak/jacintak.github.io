<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github | Jacinta&#39;s Website</title>
    <link>https://jacintak.github.io/tags/github/</link>
      <atom:link href="https://jacintak.github.io/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <description>github</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 01 Dec 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jacintak.github.io/img/icon-512.png</url>
      <title>github</title>
      <link>https://jacintak.github.io/tags/github/</link>
    </image>
    
    <item>
      <title>December update</title>
      <link>https://jacintak.github.io/post/2021-12-01-december-update/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-12-01-december-update/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-12-01-december-update/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;end-of-the-year&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;End of the year!&lt;/h1&gt;
&lt;p&gt;The work-from-home go-in-to-work and back again switching meant I didn’t have time to write the post I originally intended. But this month I’ve made some updates around the site plus some general end of year housekeeping here on GitHub.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;research&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Research&lt;/h1&gt;
&lt;p&gt;It’s been a busy year including many firsts or personal records. I “attended” three conferences, wrote my first independent collaborative paper, submitted many papers, got many rejections, applied for jobs and reviewed many papers. I was pleasantly surprised to see my research mentioned in people’s conference presentations. Thank you for reading!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;teaching&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Teaching&lt;/h1&gt;
&lt;p&gt;I’ve updated the teaching materials on the site.&lt;/p&gt;
&lt;p&gt;Over the course of the year, I’ve turned various tutorials I ran for NERD club into blog posts on this site and collated them on a &lt;a href=&#34;https://jacintak.github.io/project/NERD-club&#34;&gt;Project page&lt;/a&gt; with their original presentations. I’m glad that some people have found them useful.&lt;/p&gt;
&lt;p&gt;At the moment I’m not sure what I want to do with the &lt;a href=&#34;https://jacintak.github.io/teaching/GLM/lectures/index.html&#34;&gt;GLM course notes&lt;/a&gt; on the site. With an update, they may be useful to some, but I revamped my lectures this year, so these notes don’t follow the lectures. I’m still not sure what the best balance of teaching stats is. Too many additional resources seem overwhelming to students especially with remote learning so this year I went for the less is more approach. At the very least, creating the resource was a good opportunity to try out &lt;code&gt;bookdown&lt;/code&gt; and figure out how to integrate it within a &lt;code&gt;blogdown&lt;/code&gt; site.&lt;/p&gt;
&lt;p&gt;I’ve updated an &lt;a href=&#34;https://jacintak.github.io/teaching/introR/index.html&#34;&gt;Introduction to R&lt;/a&gt; with how to change the default library address because I noticed that the user library folder created in Documents was syncing to OneDrive for many students using Windows 10. This is a feature of using a Microsoft account but it means there are then issues between R accessing the user library and OneDrive syncing the folder. This becomes a prominent issue if you are running a session that depends on many packages.&lt;/p&gt;
&lt;p&gt;This feature is frustrating because I don’t expect students to need to delve into Control Panel and change their computer settings. I don’t expect them to &lt;em&gt;know&lt;/em&gt; how to do it and it only adds to their stress when they get package related errors during class. Does the younger generation even know what the Control Panel is and how to modify it? It defeats the point of Windows becoming more user friendly. In terms of user friendliness, it would be great if changing the default package folder was an option through the RStudio GUI.&lt;/p&gt;
&lt;p&gt;These issues came about because I wanted to try delivering practicals through &lt;code&gt;learnr&lt;/code&gt;. On paper, interactive tutorials are great and they are well integrated within the RStudio environment through the Tutorial pane. In practice, it complicates the process for the students because now they have to install all the dependencies - and there are a lot of them! Which is an additional learning curve of computer housekeeping. This is also not the kind of debugging I expect the demonstrators to know. The remote delivery makes troubleshooting difficult.&lt;/p&gt;
&lt;p&gt;Though &lt;code&gt;learnr&lt;/code&gt; has been around for a few years, it’s still in active development and there are some issues or features that cause headaches during class. Unfortunately, debugging these error messages is not straightforward and the general fix is to reinstall the package again. Two issues I’ve come across that are known, open issues on GitHub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trailing garbage error. Some students cannot open a tutorial a second time, or even a first time. The error is inconsistent across students which makes it hard to infer why it’s happening.&lt;/li&gt;
&lt;li&gt;Skipping coding exercises by pressing run code (even with no input). This defeats the point of not allowing skipping.
&lt;ul&gt;
&lt;li&gt;There is a great temptation among students to rush through and skip exercises to get to the “important bits” (it’s all important) or to jump to any in-class assessment and work in reverse (i.e. reading the assessment question then skim reading the relevant section without working through the theory first). Maybe this is a consequence of remote teaching and open book assessment that this cohort is now used to. Forcing students to slow down and engage with the material in order is one solution.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ve made the &lt;code&gt;learnr&lt;/code&gt; practicals available on GitHub and given it a &lt;a href=&#34;https://jacintak.github.io/project/statistical-modelling&#34;&gt;project page&lt;/a&gt;. It’s a set of practicals about learning statistical modelling through the context of functional responses (predator-prey interactions). Students collect data in the first practical and analyse the data in the second. I made a Type II functional response model in Scratch for remote students to participate in data collection.&lt;/p&gt;
&lt;p&gt;I moved the original &lt;code&gt;learnr&lt;/code&gt; tutorials about R to their own GitHub repository and &lt;a href=&#34;https://jacintak.github.io/project/biostats-tutorials&#34;&gt;project page&lt;/a&gt;. I’m not sure what to do with this too. My original intention was to provide it as an additional resource to students. Currently, I have revamped the tutorials based on material I’ve presented to NERD club.&lt;/p&gt;
&lt;p&gt;Overall, I’m satisfied with how &lt;code&gt;learnr&lt;/code&gt; worked in a large classroom. The loading error is annoying but mostly because of the remote delivery and it only affects a minor proportion of students.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here’s to hoping for more adventures in the new year.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>New Year, New Look!</title>
      <link>https://jacintak.github.io/post/2021-01-01-new-year-new-look/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-01-01-new-year-new-look/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-01-01-new-year-new-look/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;welcome-to-my-revamped-website&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Welcome to my revamped website!&lt;/h1&gt;
&lt;p&gt;After banging my head against &lt;code&gt;blogdown&lt;/code&gt; and Hugo on and off for several months (years), I think I understand enough about it to refresh my site. This has been my weekend coding hobby. It’s taken so long that the under-workings of Hugo and the Academic theme used here have changed in the meantime.&lt;/p&gt;
&lt;p&gt;Setting up a site is simple enough if you follow the instructions online. The template builds a skeleton of the website and all you need to do is replace the placeholder text with your information. Simple right?&lt;/p&gt;
&lt;p&gt;Not quite. The underlying file structure takes some getting used to and you’ll have to trust the magic as your site gets compiled. But once you pass that hurdle, the system is quite powerful and the results are neat.&lt;/p&gt;
&lt;p&gt;There are many features to take advantage of. My interest was in having one site for code documentation and blogging as I was not satisfied with having a “regular” website (WordPress) with a blog and my code documentation separately on GitHub Pages.&lt;/p&gt;
&lt;p&gt;My code documentation was also messing up my GitHub. I’m not a big fan of having documentation (e.g. a static website) lumped together with package files. I also didn’t like having an orphan branch for my documentation (no winners here). I can take advantage of the features of Hugo to move my static sites off their respective repositories and into one central one. It’s better this way as some of the static pages weren’t even relevant to the rest of the repo.&lt;/p&gt;
&lt;p&gt;There are some features that are missing/not easily implemented compared to WordPress that I will miss. You can’t comment (without third party systems) or “follow” people, you can’t schedule posts and you can’t track views unless you set up Google Analytics or similar. The workflow is a bit tedious for fixing minor things (like spelling mistakes).&lt;/p&gt;
&lt;p&gt;I will keep blog posts on the &lt;a href=&#34;https://jacintakongresearch.wordpress.com&#34;&gt;WordPress site&lt;/a&gt; as an archive. I have linked to relevant blog posts in this site.&lt;/p&gt;
&lt;p&gt;There are some peculiarities that require things to be done a certain way:&lt;/p&gt;
&lt;div id=&#34;things-i-noted&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Things I noted&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I changed the name of the “Public” folder to “docs” so that my site can be built from the “docs” folder on GitHub. This seems the simplest way to organise this. The alternative is to have the “Public” folder on a different branch.&lt;/li&gt;
&lt;li&gt;Sometimes it’s a challenge to troubleshoot why things aren’t working they way you want. E.g. I couldn’t work out why the country wouldn’t show up in the document when including an address in YAML&lt;/li&gt;
&lt;li&gt;A header image/thumbnail can be included in the same folder as the content &lt;em&gt;but&lt;/em&gt; it must be called “featured” or it won’t be recognised. File names are case-sensitive&lt;/li&gt;
&lt;li&gt;You can have as many folders as you want called whatever but the (r)markdown file of the page must be called “index”
&lt;ul&gt;
&lt;li&gt;In the “Courses” feature the parent page must be called &#34;_index&#34; or it won’t work. 🤷&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rmd and the “Courses” feature don’t play nicely. Defining a table of contents via &lt;code&gt;bookdown&lt;/code&gt; outputs in the YAML doesn’t work and calling &lt;code&gt;toc: true&lt;/code&gt; directly in the YAML (following the guide) doesn’t work either.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bookdown&lt;/code&gt; and &lt;code&gt;blogdown&lt;/code&gt; don’t play nicely together in the same project either. &lt;code&gt;blogdown&lt;/code&gt; will try to render the &lt;code&gt;bookdown&lt;/code&gt; pages as a site rather than letting &lt;code&gt;bookdown&lt;/code&gt; do its thing and make a nice gitbook.
&lt;ul&gt;
&lt;li&gt;To allow this behaviour, you need to make use of the static file builder (See &lt;a href=&#34;#gitbook&#34;&gt;below&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Despite the template saying “Upcoming talks” Hugo doesn’t render things in the future (incl blog posts). You need &lt;code&gt;publishDate&lt;/code&gt; in the YAML&lt;/li&gt;
&lt;li&gt;emojis are a nice feature 😄&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;gitbook&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using the static folder to render a gitbook&lt;/h2&gt;
&lt;p&gt;To render rmd files into another output than &lt;code&gt;blogdown::html_page&lt;/code&gt; you can put the rmd in the “static” folder then write a script that compiles the site in a specific order. To permit a gitbook page within the site:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Save the &lt;code&gt;bookdown&lt;/code&gt; files in the “static” folder
&lt;ul&gt;
&lt;li&gt;It doesn’t work with files in the “content” folder, these will get the usual treatment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create a folder called “R” in the root directory&lt;/li&gt;
&lt;li&gt;Create an R script called “build.R” in the “R” folder&lt;/li&gt;
&lt;li&gt;Add the render functions you need.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blogdown::build_dir(&#34;static&#34;)&lt;/code&gt; is a wrapper for plain &lt;code&gt;rmarkdown::render()&lt;/code&gt; as is so it works best with simple files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build_dir&lt;/code&gt; doesn’t work for our gitbook example because we want a gitbook that knits with &lt;code&gt;bookdown::render_book&lt;/code&gt;, otherwise you will get a bunch of HTML files from the standard render function&lt;/li&gt;
&lt;li&gt;There’s something funny going on with the working directories. Running &lt;code&gt;render_book(&#34;static/index.rmd&#34;)&lt;/code&gt; doesn’t work, neither does the full address. Instead I had to change the working directory for the function to find the right files. I’m not sure where the function is looking as the project working directory is the root directory.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above means that all the rmd files for the gitbook also get copied into the “docs” folder. I don’t think it’s avoidable. It’s also s l o w e r to build the site because the gitbook gets rendered every time (unless you “comment it off” in the &lt;code&gt;build.R&lt;/code&gt; script.&lt;/p&gt;
&lt;p&gt;I also have a line to render my CV rmd into a PDF saved into the static folder. That PDF is then copied to the “docs” folder so I have an updated CV without needing to manually create one every time I update the original rmd. I think this is pretty handy.&lt;/p&gt;
&lt;p&gt;Here’s what my &lt;code&gt;build.R&lt;/code&gt; file contains:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Make CV PDF
rmarkdown::render(&amp;#39;content/cv/index.Rmd&amp;#39;, output_format = rmarkdown::pdf_document(keep_tex = FALSE), output_dir = &amp;quot;static/files/&amp;quot;, output_file = &amp;quot;Kong_JD_CV.pdf&amp;quot;)

# make gitbook
# blogdown::build_dir(&amp;quot;static&amp;quot;) doesn&amp;#39;t work because we want a gitbook that knits with render_book
# whereas build_dir uses rmakrdown::render() thus giving html files
old &amp;lt;- getwd()
setwd(&amp;quot;static/teaching/GLM/&amp;quot;)
bookdown::clean_book(clean = TRUE)
bookdown::render_book(input = &amp;quot;index.Rmd&amp;quot;)
setwd(old)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;having-a-drafts-folder&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Having a drafts folder&lt;/h2&gt;
&lt;p&gt;Hugo will not render draft blog posts by default but &lt;code&gt;blogdown&lt;/code&gt; will still render the files for your local site and these files get pushed to GitHub. If you don’t want your repo to contain spoilers, then you need to separate your draft posts from the published posts.&lt;/p&gt;
&lt;p&gt;One solution to stop &lt;code&gt;blogdown&lt;/code&gt; from rendering &lt;code&gt;.rmd&lt;/code&gt; files is to keep them in the “static” folder but Hugo will copy these files to the “public” (or “docs” folder in my case). I could not find an option to tell Hugo to ignore some files in the “static” folder. This does not solve our spoiler problem.&lt;/p&gt;
&lt;p&gt;We can have a “draft” folder under “content” and tell Hugo to ignore it in the &lt;code&gt;config.toml&lt;/code&gt; file (ignorefile) but that doesn’t stop &lt;code&gt;blogdown&lt;/code&gt; from rendering the file.&lt;/p&gt;
&lt;p&gt;I haven’t found a solution to stop &lt;code&gt;blogdown&lt;/code&gt; from rendering and Hugo from copying the file but Hugo doesn’t add every folder from the root directory to “Public”, only folders that match the template. So I have a folder called “drafts” which contains my drafts. &lt;code&gt;blogdown&lt;/code&gt; will still render the files every time they are saved while using &lt;code&gt;serve_site&lt;/code&gt; but they won’t interfere with the site itself. When I’m ready to publish them I can copy them to the “content/post” folder. I also added the “drafts” folder to my &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;blogdown&lt;/code&gt; has a handy function to generate a new blog post. By default it will add the new files to “content/post” but I changed this to write directly to the “drafts” folder via the variable &lt;code&gt;subdir&lt;/code&gt; and with a custom date that is used to name the folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blogdown::new_post(ext = &amp;quot;.Rmd&amp;quot;, title = &amp;quot;test&amp;quot;, subdir = &amp;quot;../drafts/&amp;quot;, date = &amp;quot;2021-01-01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;blogdown-does-theoretically-have-a-means-of-excluding-files&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;blogdown&lt;/code&gt; does theoretically have a means of excluding files…&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;blogdown::build_site&lt;/code&gt; there is a function (&lt;code&gt;list_rmds&lt;/code&gt;) that lists files in the “content” folder and excludes files beginning with &lt;code&gt;_&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;files = files[!grepl(&amp;quot;^_&amp;quot;, basename(files)) | grepl(&amp;quot;^_index[.]&amp;quot;, basename(files))]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you’ll notice it doesn’t exclude files called &lt;code&gt;_index&lt;/code&gt; without another &lt;code&gt;!&lt;/code&gt; in front of &lt;code&gt;grepl&lt;/code&gt;. For example, if I have an file called &lt;code&gt;_drafts.Rmd&lt;/code&gt;, then &lt;code&gt;build_site&lt;/code&gt; will ignore it. But if I have a file called &lt;code&gt;_index.Rmd&lt;/code&gt;, then &lt;code&gt;build_site&lt;/code&gt; will render it. I don’t know what the behaviour of this is supposed to be so I’m not sure if it is a mistake.&lt;/p&gt;
&lt;p&gt;This function is not present in &lt;code&gt;preview_site&lt;/code&gt; which means that the live preview is going to build all your &lt;code&gt;.Rmd&lt;/code&gt; files regardless and it will show up on the live preview.&lt;/p&gt;
&lt;p&gt;Either way, your drafts will still get pushed to GitHub unless you specify the files in &lt;code&gt;.gitignore&lt;/code&gt; (e.g. &lt;code&gt;**/_*.Rmd&lt;/code&gt;) so I wouldn’t say using &lt;code&gt;_&lt;/code&gt; in your file names is an easier option.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-customisations-via-layoutspartials-templates&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other customisations via “layouts/partials” templates&lt;/h2&gt;
&lt;p&gt;Because Hugo copies any folder in the root directory into “docs” which matches the theme template, it will override any files in the “themes” folder that matches the name of the folder in the root directory. This means that you can create custom templates without modifying the original template. Thus, having a folder called “layouts/partials” will override any “partials” templates within the “theme” folder.&lt;/p&gt;
&lt;p&gt;I have added some minor customisations to reflect personal preference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added markdown to the author list in &lt;code&gt;page_metadata_authors.html&lt;/code&gt; so that I can customise my name and bold it in the list of authors under publications&lt;/li&gt;
&lt;li&gt;Changed the site footer to include &lt;code&gt;blogdown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Changed &lt;code&gt;page_metadata.html&lt;/code&gt; to show both the last modified and published date. Last modified date is default.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m not saying goodbye to the grasshoppers so my flavicon is a grasshopper emoji 🦗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
