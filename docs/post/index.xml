<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Jacinta&#39;s Website</title>
    <link>https://jacintak.github.io/post/</link>
      <atom:link href="https://jacintak.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 01 Aug 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jacintak.github.io/img/icon-512.png</url>
      <title>Posts</title>
      <link>https://jacintak.github.io/post/</link>
    </image>
    
    <item>
      <title>How to add a Phylopic icon to your graph in R</title>
      <link>https://jacintak.github.io/post/2021-08-01-rphylopic/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-08-01-rphylopic/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-08-01-rphylopic/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;phylopic.org&#34;&gt;Phylopic&lt;/a&gt; is an online database of silhouettes of species. Most are freely available, with various copyright licences. It’s a great resource for scientific illustration or making cool presentations.&lt;/p&gt;
&lt;p&gt;One way I wanted to use Phylopic was to add a silhouette of an animal directly to an &lt;code&gt;R&lt;/code&gt; figure. You could search Phylopic yourself and copy the image id to add the icon to the graph but where’s the fun in that?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/rphylopic/readme/README.html&#34;&gt;rphylopic&lt;/a&gt; is an &lt;code&gt;R&lt;/code&gt; package that can search and retrieve icons directly from Phylopic. You can use &lt;code&gt;rphylopic&lt;/code&gt; with &lt;code&gt;ggplot2&lt;/code&gt; or base graphics.&lt;/p&gt;
&lt;p&gt;The process of searching Phylopic and pulling out the image id is not straightforward, and I didn’t find a step-by-step guide I liked for doing so, so here is a reproducible example using the built in dataset &lt;code&gt;beaver1&lt;/code&gt; - a time series of a beaver’s body temperature.&lt;/p&gt;
&lt;p&gt;The data looks like this and we want to add a beaver icon to the top left corner:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beaver_plot &amp;lt;- qplot(beaver1$temp,x = seq_along(beaver1$temp), geom = &amp;quot;line&amp;quot;, xlab = &amp;quot;Time&amp;quot;, ylab = &amp;quot;Temperature&amp;quot;)
beaver_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/2021-08-01-rphylopic/index_files/figure-html/beaver-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;step-by-step-guide-to-adding-a-phylopic-icon&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Step-by-step guide to adding a Phylopic icon&lt;/h1&gt;
&lt;div id=&#34;getting-the-right-species&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Getting the right species&lt;/h2&gt;
&lt;p&gt;You can search Phylopic by species using &lt;code&gt;name_search&lt;/code&gt;. You might get multiple hits because there may be multiple matches in the databases. It’s worth cross-referencing the NameBank ID with the website. The NameBank ID is located at the top right of the webpage. In this case we want the first option - 109179.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(rphylopic)
beaver &amp;lt;- name_search(text = &amp;quot;Castor canadensis&amp;quot;, options = &amp;quot;namebankID&amp;quot;)[[1]] # find names
beaver&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extracting-the-id-of-the-icon-you-want&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. Extracting the id of the icon you want&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;name_images&lt;/code&gt; to list all the beaver icons available. In this case, there are two versions of the beaver icon we can use - listed as &lt;code&gt;$same[[1]]&lt;/code&gt; and &lt;code&gt;$same[[2]]&lt;/code&gt; with unique &lt;code&gt;uid&lt;/code&gt;. The &lt;code&gt;uid&lt;/code&gt; is the unique id of the icon. Again, it’s handy to check the &lt;code&gt;uid&lt;/code&gt; with the website. You can find the &lt;code&gt;uid&lt;/code&gt; on the website by clicking the actual icon you want to use and copying from the address bar.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_id_all &amp;lt;- name_images(uuid = beaver$uid[1])  # list images
beaver_id_all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s use the second icon and extract only that &lt;code&gt;uid&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_id &amp;lt;- name_images(uuid = beaver$uid[1])$same[[2]]$uid  # get individual image id
beaver_id&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-the-icon-itself&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Getting the icon itself&lt;/h2&gt;
&lt;p&gt;Now we can get the actual image using &lt;code&gt;image_data&lt;/code&gt;. Each icon is available in different sizes, from a thumbnail (64 px) to large icons (1042 px). We will get a 256 px icon so that the resolution is high enough to avoid pixelation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_pic &amp;lt;- image_data(beaver_id, size = 256)[[1]] # get actual icon, define size. Don&amp;#39;t run this alone&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-the-beaver-icon-to-the-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;4. Adding the beaver icon to the plot&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;add_phylopic&lt;/code&gt; to add the icon to a &lt;code&gt;ggplot2&lt;/code&gt; graph. You need to specify the x and y axis co-ordinates for the graph. Use &lt;code&gt;ysize&lt;/code&gt; to change the size of the icon. Use &lt;code&gt;alpha&lt;/code&gt; to control the transparency. &lt;code&gt;colour&lt;/code&gt; will change the colour.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beaver_plot + add_phylopic(beaver_pic, alpha = 1, x = 10, y = 37.4, ysize = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;featured.png&#34; style=&#34;width:70.0%&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;The final plot&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And that’s it! 🦫&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-uses-of-rphylopic&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other uses of &lt;code&gt;rphylopic&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;You can add the icon as a background image but I would question why that would be a good idea from a graphic design perspective. To do so, you don’t need to specify any other variables in &lt;code&gt;add_phylopic&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can also use icons as data points by plotting each icon in place of the regular point within a for loop. You can see an example in the &lt;code&gt;rphylopic&lt;/code&gt; documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>OSM in R</title>
      <link>https://jacintak.github.io/post/2021-07-01-OSM-in-R/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-07-01-OSM-in-R/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-07-01-OSM-in-R/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This tutorial was originally presented to NERD club on 4/2/2020.&lt;/p&gt;
&lt;div id=&#34;city-maps&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;City maps&lt;/h1&gt;
&lt;p&gt;Consider yourself a hipster?&lt;br /&gt;
Do the clean lines and natural materials of modern scandi make you feel at home?&lt;br /&gt;
Is your basic coffee order a flat white? ☕&lt;/p&gt;
&lt;p&gt;If the answer to all the above is YES, then here’s a present for you!&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/61-dKVczbXL._SL1000_.jpg&#34; title=&#34;fig:&#34; width=&#34;250&#34; alt=&#34;A map of Dublin&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;em&gt;But wait!&lt;/em&gt; This poster costs €30 (thereabouts) online!
&lt;a href=&#34;https://www.etsy.com/ie/listing/561937898/dublin-print-dublin-city-map-dublin&#34;&gt;See example&lt;/a&gt;.&lt;br /&gt;
That’s approximately 9 flat whites you could have had.&lt;br /&gt;
☕☕☕☕☕☕☕☕☕&lt;br /&gt;
Can you make this in R?, you ask, asking for a friend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fear not&lt;/strong&gt;. You can make this yourself in R!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;maps-in-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Maps in R&lt;/h1&gt;
&lt;p&gt;In this tutorial we will replicate a poster like this. We will need R and powerpoint to put in the final touches. You could do it fully in R but powerpoint will make our lives a bit easier. In summary, it requires a bit of GIS wrangling to code in what you want to display.&lt;/p&gt;
&lt;p&gt;The data is freely available from &lt;a href=&#34;https://www.openstreetmap.org&#34;&gt;Openstreetmap&lt;/a&gt;, for proprietary haters out there. I will refer to it as OSM.&lt;/p&gt;
&lt;p&gt;We will be following &lt;a href=&#34;https://ggplot2tutor.com/streetmaps/streetmaps/&#34;&gt;this&lt;/a&gt; tutorial.&lt;/p&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;You will need to install the relevant packages: &lt;code&gt;osmdata&lt;/code&gt;, &lt;code&gt;tidyverse&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#install.packages(&amp;quot;osmdata&amp;quot;, &amp;quot;tidyverse&amp;quot;, &amp;quot;sf&amp;quot;)
library(osmdata)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see this will use tidyverse and I will be using piping. Don’t worry if you are not a master at piping. The code is written.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a nutshell, instead of function2(function1(X)) to apply function 1 &lt;em&gt;then&lt;/em&gt; function 2 to X, you type x %&amp;gt;% function1() %&amp;gt;% function2(). I.E. take X, apply function 1, then apply function 2 to the resulting output. Overall it’s easier to read, hence it’s ‘tidy’.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;osm-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;OSM data&lt;/h2&gt;
&lt;p&gt;OSM stores various features you can explore under &lt;code&gt;available_features()&lt;/code&gt;. You can see what is under each feature with &lt;code&gt;available_tags(&#34;&amp;lt;insert feature name here&amp;gt;&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;get-city-co-ordinates&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. Get city co-ordinates&lt;/h1&gt;
&lt;p&gt;For this example we will make a map of Dublin. First we need the latitude and longitude of Dublin. If you want to modify the extent of your map, this is where you change the co-ordinates.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;city_coords &amp;lt;- getbb(&amp;quot;Dublin Ireland&amp;quot;)
#city_coords &amp;lt;- c(-6.391,53.2644,-6.114883, 53.416) # to get all the M50&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-map-features&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. Get map features&lt;/h1&gt;
&lt;div id=&#34;roads&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Roads&lt;/h2&gt;
&lt;p&gt;We can get roads by querying OSM for the GPS co-ordinates for Dublin and saving it to a variable called &lt;em&gt;roads&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;roads &amp;lt;- city_coords %&amp;gt;% #pipe!
  opq() %&amp;gt;% # create query for OSM database
  add_osm_feature(key = &amp;quot;highway&amp;quot;, 
                  value = c(&amp;quot;motorway&amp;quot;, &amp;quot;primary&amp;quot;, 
                            &amp;quot;secondary&amp;quot;, &amp;quot;tertiary&amp;quot;)) %&amp;gt;%
  osmdata_sf() # save it as an simple features format
roads&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;streets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Streets&lt;/h2&gt;
&lt;p&gt;We can do the same for streets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;streets &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;highway&amp;quot;, 
                  value = c(&amp;quot;residential&amp;quot;, &amp;quot;living_street&amp;quot;,
                            &amp;quot;unclassified&amp;quot;,
                            &amp;quot;service&amp;quot;, &amp;quot;footway&amp;quot;)) %&amp;gt;%
  osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;water&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Water&lt;/h2&gt;
&lt;p&gt;Can’t forget the Liffey and the canals. Sadly the ocean cannot be mapped.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;water &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;waterway&amp;quot;, value = c(&amp;quot;canal&amp;quot;, &amp;quot;river&amp;quot;)) %&amp;gt;%
  osmdata_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;3. Plotting&lt;/h1&gt;
&lt;p&gt;Time to call &lt;code&gt;ggplot2&lt;/code&gt; and plot our map.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map &amp;lt;- ggplot() +
  # roads
  geom_sf(data = roads$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;grey&amp;quot;, # colour of feature
          size = 0.8,       # Size on map
          alpha = 0.8) +    # transparency
  # streets
  geom_sf(data = streets$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;#ffbe7f&amp;quot;,
          size = 0.2,
          alpha = 0.6) +
  # water
  geom_sf(data = water$osm_lines,
          inherit.aes = FALSE,
          color = &amp;quot;steelblue&amp;quot;,
          size = 0.8,
          alpha = 0.5) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE) +
  # remove axes
  theme_void()

map&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;labels&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;4. Labels&lt;/h1&gt;
&lt;p&gt;At this point it is easier to save the file and add text in powerpoint but if you want to try your hand at ggplot’s annotation features go ahead.&lt;/p&gt;
&lt;p&gt;Here I’ve done one in a dark colour scheme.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme_colour &amp;lt;- &amp;quot;#282828&amp;quot; # dark theme

dark_map &amp;lt;- map +
  labs(caption = &amp;quot;Dublin, Ireland&amp;quot;) +
  theme(axis.text = element_blank(),
        plot.margin=unit(c(1,1,1,1),&amp;quot;cm&amp;quot;),
        panel.grid.major = element_line(colour = theme_colour),
        panel.grid.minor = element_line(colour = theme_colour),
        plot.background = element_rect(fill = theme_colour),
        panel.background = element_rect(fill = theme_colour),
        plot.caption = element_text(size = 24, colour = &amp;quot;white&amp;quot;, hjust = 0.5, vjust = -2, family = &amp;quot;mono&amp;quot;),
        panel.border = element_rect(colour = &amp;quot;white&amp;quot;, fill=NA, size=2),
        axis.ticks = element_blank())

dark_map&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;saving-our-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Saving our map&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ggsave(plot = dark_map, filename = &amp;quot;NERD/dark_dublin.pdf&amp;quot;, width = 11, height = 8.5, device = &amp;quot;pdf&amp;quot;, dpi = 300)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;If all of that was too much, there’s an R package for it. &lt;a href=&#34;https://github.com/lina2497/Giftmap&#34; class=&#34;uri&#34;&gt;https://github.com/lina2497/Giftmap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is also a &lt;a href=&#34;https://anvaka.github.io/city-roads/&#34;&gt;website&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;extra-details&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Extra details&lt;/h1&gt;
&lt;p&gt;Less is more but if you really want to put more features:&lt;/p&gt;
&lt;div id=&#34;other-water-bodies&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other water bodies&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;extra_water &amp;lt;- city_coords %&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;natural&amp;quot;, value = c(&amp;quot;water&amp;quot;)) %&amp;gt;%
  osmdata_sf()

dark_map +
   geom_sf(data = extra_water$osm_polygons,
          inherit.aes = FALSE,
          fill = &amp;quot;steelblue&amp;quot;,
          colour = NA,
          alpha = 0.5) +
  geom_sf(data = extra_water$osm_multipolygons,
          inherit.aes = FALSE,
          fill = &amp;quot;steelblue&amp;quot;,
          colour = NA,
          alpha = 0.5) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;parks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Parks&lt;/h2&gt;
&lt;p&gt;Nature reserves including Dublin Bay&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;park &amp;lt;- city_coords%&amp;gt;%
  opq()%&amp;gt;%
  add_osm_feature(key = &amp;quot;leisure&amp;quot;, value = c(&amp;quot;park&amp;quot;)) %&amp;gt;%
  osmdata_sf()

dark_map +
   geom_sf(data = park$osm_polygons,
          inherit.aes = FALSE,
          fill = &amp;quot;darkgreen&amp;quot;,
          colour = NA,
          alpha = 0.3) +
  geom_sf(data = park$osm_multipolygons,
          inherit.aes = FALSE,
          fill = &amp;quot;darkgreen&amp;quot;,
          colour = NA,
          alpha = 0.3) +
  # extent to display
  coord_sf(xlim = c(city_coords[1],city_coords[3]),
           ylim = c(city_coords[2],city_coords[4]),
           expand = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;end&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;End&lt;/h1&gt;
&lt;p&gt;That’s the gist of using OSM in &lt;code&gt;R&lt;/code&gt;. You can use the same code to make any map, e.g. for a paper.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R Club: Functions &amp; Loops</title>
      <link>https://jacintak.github.io/post/2021-06-01-r-function-loops/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-06-01-r-function-loops/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This tutorial was originally presented to NERD club on 18/11/2020.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This document contains two examples of functions and an example of how functions can be integrated with loops.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;User defined functions take the general form of &lt;code&gt;function(inputs){processing inputs; return(output)}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;predator-prey-interactions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Predator-Prey interactions&lt;/h1&gt;
&lt;p&gt;We will use a simulation of predator-prey interactions as an example. Predator-prey interactions simulate how many prey a predator can capture after a specific amount of time and for a given density of prey. We use this example with undergraduate biology students to demonstrate statistical modelling, experimental design and collecting data.&lt;/p&gt;
&lt;p&gt;Normally we would get students to do this laboratory practical in class by picking up counters and putting them in jars while blindfolded. We can also see whether the use of different types of jars affects the efficiency of the predator. This is the experimental design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Response variable - Number of prey caught (&lt;code&gt;Ha&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Total foraging time - 1 minute, a constant (&lt;code&gt;T&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Predictor variables:
&lt;ul&gt;
&lt;li&gt;Prey density - user defined treatments (&lt;code&gt;H&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Type of jar used - jar with a lid or no lid (&lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normally the students will collect data to parameterise the functional response. Instead I’ve created a function that will predict new values of prey captured using a functional response formula that is already parameterised.&lt;/p&gt;
&lt;p&gt;Let’s look at the function:&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;an-interactive-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An interactive function&lt;/h2&gt;
&lt;p&gt;R has some capacity to be interactive. It can ask a user to input variables.
The function &lt;code&gt;functional_response&lt;/code&gt; will return the number of prey captured for a given prey density and type of jar used. The function will ask for these two inputs each time the function is run. Look at the code below and try to understand the different components. Then try running the code yourself with different inputs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#### Interactive function
# Simulation of the predator-prey functional response - DO NOT CHANGE
# To run: click Source (cmd or ctrl+shift+S) or Run All (ctrl+alt+r)
# Or source(&amp;quot;&amp;lt;insert file location here&amp;gt;&amp;quot;, echo = FALSE)

functional_response &amp;lt;- function(){
  
  # Introduce the simulation to the user - prints a message
  cat(paste(
    &amp;quot;&amp;quot;,
    &amp;quot;You have some counters (prey), a piece of A4 paper &amp;amp; a jar.&amp;quot;,
    &amp;quot;You spread the counters randomly on the A4 sheet.&amp;quot;,
    sep=&amp;quot;\n&amp;quot;))
  
  # Ask the user for the prey density for the functional response
  prey_density  &amp;lt;- readline(&amp;quot;How many prey counters are used? &amp;quot;) # ask for prey density
  
  # Check the user has inputted a number properly
  if(!grepl(&amp;quot;^[0-9]+$&amp;quot;, prey_density)){ # check whether the input contains numeric characters between 0-9 using regex (regular expressions)
    message(&amp;quot;Please enter an integer&amp;quot;) # If the input is not a number, tell them to do it again
    return(functional_response()) # Return to the beginning of the function and start again
  }
  prey_density &amp;lt;- as.integer(prey_density) # If the prey density input is a number, turn it into an interger
  
  # Ask the user for the type of jar used
  cat(paste(
    &amp;quot;&amp;quot;,
    &amp;quot;Every second you (the predator) tap the sheet to find and pick up a prey counter while blindfolded.&amp;quot;,
    &amp;quot;You have 1 minute to put as many prey counters as you can in the jar.&amp;quot;,
    &amp;quot;There are two types of jars you can use while handling prey.&amp;quot;,
    &amp;quot;Enter 1 to use a jar with a lid that you have to open and close.&amp;quot;,
    &amp;quot;Enter 2 to use a jar without a lid.&amp;quot;,
    &amp;quot;&amp;quot;,
    &amp;quot;What type of jar is used?&amp;quot;,
    sep=&amp;quot;\n&amp;quot;))
  lid_used &amp;lt;- menu(c(&amp;quot;Lid&amp;quot;, &amp;quot;No Lid&amp;quot;))
  
  # Calculate the number of prey caught (the functional response) based on the user defined input above
  if(lid_used != 0){ # Check that the use has chosen the jar used properly (1 or 2)
    
    # Use this model if using a jar with a lid
    if(lid_used == 1){
      Ha &amp;lt;- (0.2 * prey_density)/(1 + 0.2 * 0.03 * prey_density) 
    }
    
    # Use this model if using a jar without a lid
    if(lid_used == 2){
      Ha &amp;lt;- (0.7 * prey_density)/(1 + 0.7 * 0.05 * prey_density) 
    }
    
    # Add in some variation around the predicted value so that users don&amp;#39;t get the exact parameterised functional response
    Ha &amp;lt;- Ha + sample(seq(-3,3), 1) 
    
    # Make sure there are no negative prey items caught!
    if(Ha &amp;lt; 0){
      Ha &amp;lt;- 0 # Make prey caught 0 if less than 0
    }
    
    # Make sure the number of prey caught doesn&amp;#39;t exceed the number of prey available!
    if(Ha &amp;gt; prey_density){
      Ha &amp;lt;- prey_density # If prey caught is greater than the number of prey available, make it the maximum possible
    }
    
    # Print a message showing the results
    message(&amp;quot;The number of prey caught is &amp;quot;, floor(Ha), &amp;quot;. Well done!&amp;quot;) 
  }
}

# Actually run the function and tell R that it&amp;#39;s interactive 
if(interactive()) functional_response()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The function doesn’t have any inputs in &lt;code&gt;function()&lt;/code&gt; because it will ask the user for them each time&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readline&lt;/code&gt; is the function to ask for a single user input&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menu&lt;/code&gt; is the function to ask the user to chose from a number of options
&lt;ul&gt;
&lt;li&gt;Here the option is press 1 to use a jar with a lid or press 2 to use a jar without a lid&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;There are two parameterised functional responses - one for a jar with a lid and one for a jar without a lid&lt;/li&gt;
&lt;li&gt;&lt;code&gt;floor&lt;/code&gt; is a function to round the number of prey caught to the lowest whole number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the practical, students will need to run the above function for 10 prey densities, repeated 3 times, for both jar treatments - so 60 times in total. But we don’t have to do that manually - that is what loops are for!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;functions-and-loops&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Functions and loops&lt;/h2&gt;
&lt;p&gt;Here is a non-interactive version of the function above. It doesn’t have the printed messages asking for user input. This time, the function needs 3 inputs as indicated by &lt;code&gt;function(prey_density, lid_used, total_time)&lt;/code&gt;: the prey density used, the type of jar used and the total foraging time, respectively.&lt;/p&gt;
&lt;p&gt;Run the code chunk to load the function into the R environment:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Functional response function
functional_response &amp;lt;- function(prey_density, lid_used, total_time){
  
  # Check jar type is inputted correctly
  if (!lid_used %in% c(&amp;quot;yes&amp;quot;, &amp;quot;no&amp;quot;)) {
    stop(&amp;quot;Lid used is not inputted correctly. Use &amp;#39;yes&amp;#39; or &amp;#39;no&amp;#39; in all lowercase&amp;quot;)
  }
  if(lid_used == &amp;quot;yes&amp;quot;){
    Ha &amp;lt;- (0.2 * prey_density * total_time)/(1 + 0.2 * 0.03 * prey_density)
  }
  if(lid_used == &amp;quot;no&amp;quot;){
    Ha &amp;lt;- (0.7 * prey_density * total_time)/(1 + 0.7 * 0.05 * prey_density)
  }
  Ha &amp;lt;- Ha + sample(seq(-3,3), 1)
  if(Ha &amp;lt; 0){
    Ha &amp;lt;- 0
  }
  if(Ha &amp;gt; prey_density){
    Ha &amp;lt;- prey_density
  }
  # message(&amp;quot;The number of prey caught is &amp;quot;, floor(Ha))
return(floor(Ha))
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function will check that the character vector indicating the type of jar to be used is correct because R is case sensitive. The function will return the number of prey caught &lt;code&gt;Ha&lt;/code&gt; as indicated by &lt;code&gt;return(Ha)&lt;/code&gt;. The function &lt;code&gt;return&lt;/code&gt; specifically tells R to tell us the output, otherwise R will keep it to itself! Only one output is allowed (unless extra steps are taken).
The rest of the function is the same.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;using-the-functional-response-function-in-a-loop&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using the functional response function in a loop&lt;/h3&gt;
&lt;p&gt;Now let’s use a loop to do our entire experiment in one go! No manual inputs for us. In fact we can do as many treatments or replicates as we want. Let’s do prey densities between 5 and 100 in increments of 5 and 3 replicates. Since the function inputs are required we can set them up in the environment for the function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set parameters for the function
total_time &amp;lt;- 1 # total foraging time in minutes
no_treatments &amp;lt;- seq(from = 5, to = 100, by = 5) # prey density treatments between 5 and 100
replications &amp;lt;- 3 # number of replications

# a numeric vector of prey densities for all treatments, jar types and replications 
prey_density &amp;lt;- rep(rep(no_treatments, replications),2) # repeated twice for each jar type

# a character vector of the jar type
lid_used &amp;lt;- sort(rep(c(&amp;quot;no&amp;quot;, &amp;quot;yes&amp;quot;), length(prey_density)/2)) # &amp;quot;yes&amp;quot; or &amp;quot;no&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By setting up the parameters outside the function or loop, we can easily modify the parameters of the function and feed the new values into the loop. This helps us debug and is cleaner and easier to read.&lt;/p&gt;
&lt;p&gt;Now for the actual loop itself. We need to be able to store the output of the looped function.
Lists are the fastest way to do so in R because R is designed for lists and matrices.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create an empty list called prey_caught to populate 
prey_caught &amp;lt;- list()

for(i in seq_along(prey_density)){
  # Run the functional response for the nth observation in the vector prey_density representing all our observations and save it to the list
  prey_caught[[i]] &amp;lt;- functional_response(prey_density = prey_density[i],
                                         lid_used = lid_used[i],
                                         total_time = total_time)
  
  # Prepare the list for further analysis
  prey_caught[[i]] &amp;lt;-  cbind(prey_caught[[i]], prey_density[i]) # add a column for the prey density used to calculate the number of prey caught for that observation (row)
  prey_caught[[i]] &amp;lt;-  cbind(prey_caught[[i]], 1/prey_caught[[i]]) # add a column for the inverse of the number of prey caught - for statiscally parameterising the functional response
  prey_caught[[i]][,3] &amp;lt;-  ifelse(prey_caught[[i]][,3] == Inf, 0, prey_caught[[i]][,3]) # Housekeeping - turn undefined values of prey caught (from calculating 1 divided by 0) into 0. If the number of prey caught was 0
}

# Turn our list into a data frame
prey_caught &amp;lt;- data.frame(do.call(&amp;quot;rbind&amp;quot;, prey_caught))

# Label the columns
colnames(prey_caught) &amp;lt;- c(&amp;quot;Ha&amp;quot;, &amp;quot;H&amp;quot;,&amp;quot;Ha.1&amp;quot;, &amp;quot;HT.1&amp;quot;) # &amp;quot;.1 is inversed columns&amp;quot;

# Add type of lid used to our data frame
prey_caught$lid_used &amp;lt;- lid_used&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Here we are using a &lt;code&gt;for&lt;/code&gt; loop with the n&lt;sup&gt;th&lt;/sup&gt; observation denoted &lt;code&gt;i&lt;/code&gt;. This can be called anything you want but &lt;code&gt;i&lt;/code&gt; is from mathematical notation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seq_along&lt;/code&gt; is a useful function for telling which observation you are at for a vector - try it out on its own.&lt;/li&gt;
&lt;li&gt;Lists can only contain one variable type, unlike a data frame, but that’s why they are fast and memory efficient for high performance computing
&lt;ul&gt;
&lt;li&gt;If we were to add the jar type (a character vector) to the list within the loop, then all our numeric output will be converted to characters (default R behaviour) - not what we want!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do.call&lt;/code&gt; is a handy function for lists. It collapses multidimensional lists into one dimension, here appending them by rows (i.e. adding new observations by rows at the end)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;visualising-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visualising the data&lt;/h3&gt;
&lt;p&gt;Now we can plot our results and conduct our linear regression:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

prey_caught %&amp;gt;% # Absolute values
  ggplot(aes(H, Ha, colour = lid_used)) +
  geom_point() +
  geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, fullrange=TRUE) +
  labs(x = expression(paste(&amp;quot;Prey density  (H)&amp;quot;)),
       y = expression(paste(&amp;quot;Prey captured  (Ha)&amp;quot;)),
       colour = &amp;quot;Jar used&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jacintak.github.io/post/2021-06-01-r-function-loops/index_files/figure-html/plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Linear model
summary(lm(Ha.1 ~ HT.1 * lid_used, prey_caught))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Call:
lm(formula = Ha.1 ~ HT.1 * lid_used, data = prey_caught)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.27245 -0.05371 -0.01596  0.00899  0.84476 

Coefficients:
                 Estimate Std. Error t value Pr(&amp;gt;|t|)   
(Intercept)       0.07136    0.02262   3.155  0.00204 **
HT.1              1.00548    0.40029   2.512  0.01338 * 
lid_usedyes       0.09517    0.03198   2.976  0.00356 **
HT.1:lid_usedyes -1.11833    0.56609  -1.976  0.05058 . 
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

Residual standard error: 0.1351 on 116 degrees of freedom
Multiple R-squared:  0.08913,   Adjusted R-squared:  0.06558 
F-statistic: 3.784 on 3 and 116 DF,  p-value: 0.01242&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That has saved us from running the code 120 times! Now we can do it in one!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Formatting P values</title>
      <link>https://jacintak.github.io/post/2021-05-01-formatting-p-values/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-05-01-formatting-p-values/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-05-01-formatting-p-values/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This &lt;a href=&#34;https://www.r-bloggers.com/2016/03/correctly-reporting-p-values-in-summary-tables-reported-with-xtable/&#34;&gt;post&lt;/a&gt; on R bloggers describes a handy function for formatting really small P values in ANOVA tables (more than 3 decimal places) with &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;0.001\)&lt;/span&gt;. I find this easier to read when I need to present a formatted table, e.g. in teaching.&lt;/p&gt;
&lt;p&gt;The original function doesn’t cover all ways of creating ANOVA tables in &lt;code&gt;R&lt;/code&gt; so I have extended the function to cover more cases. The &lt;code&gt;fixp&lt;/code&gt; function below will work for ANOVA tables (&lt;code&gt;x&lt;/code&gt;) generated by &lt;code&gt;anova(lm(...))&lt;/code&gt; and &lt;code&gt;summary(aov(lm(...)))&lt;/code&gt;, as well as the model coefficients table generated by &lt;code&gt;coef(summary(lm(...)))&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;a-function-to-format-p-values&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A function to format P values&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;fixp &amp;lt;- function(x, dig=3){

# Convert to a data frame
  if(is.data.frame(x) | is.matrix(x)){
  x &amp;lt;- as.data.frame(x)
  } else {
  x &amp;lt;- as.data.frame(x[[1]])
  }

# Check column order  
  if(substr(names(x)[ncol(x)],1,2) != &amp;quot;Pr&amp;quot;){
    warning(&amp;quot;The name of the last column didn&amp;#39;t start with Pr. This may indicate that p-values weren&amp;#39;t in the last row, and thus, that this function is inappropriate.&amp;quot;)
    }
    
# Round P values to &amp;quot;dig&amp;quot; decimal places, default 3     
  x[,ncol(x)] &amp;lt;- round(x[,ncol(x)], dig)

#  
  for(i in 1:nrow(x)){
    if(x[i,ncol(x)] == 0 &amp;amp; !is.na(x[i,ncol(x)])){
      x[i,ncol(x)] &amp;lt;- paste0(&amp;quot;&amp;lt;0.&amp;quot;, paste0(rep(0,dig-1), collapse=&amp;quot;&amp;quot;), &amp;quot;1&amp;quot;)
      }
  }
  x
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main modification to the original function is to expand the conversion of &lt;code&gt;x&lt;/code&gt; to a data frame to accept lists and matrices. &lt;code&gt;summary(aov(lm(...)))&lt;/code&gt; creates an object with class &lt;code&gt;summary.aov&lt;/code&gt; which is a list and the coefficients table is a matrix. Although &lt;code&gt;anova(lm(...))&lt;/code&gt; creates a data frame that will work with the function without a fatal error, the function &lt;code&gt;anova&lt;/code&gt; has its own way of “pretty” printing [to quote the help file] which is not compatible with the character vector in the P value column and thus will show a P value of 1. So forcing to a data frame is necessary. A minor modification is to ignore the NAs in the Residual row created by the data frame which would otherwise give an error.&lt;/p&gt;
&lt;p&gt;The three decimal places for P values is coded into the function by default and can be changed by the &lt;code&gt;dig&lt;/code&gt; option. For example, &lt;code&gt;dig = 1&lt;/code&gt; will give you &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt;0.1\)&lt;/span&gt;. You can then call your ANOVA table and the &lt;code&gt;fixp&lt;/code&gt; function through &lt;code&gt;knitr::kable()&lt;/code&gt; or your favourite HTML/LaTeX table formatter. e.g. &lt;code&gt;kable(fixp(anova(lm(...))), digits = ...)&lt;/code&gt;. If you don’t want to print NAs, it’s probably better to use the options in your chosen formatting function - e.g. the &lt;code&gt;knitr.kable.NA&lt;/code&gt; option in &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/kable.html&#34;&gt;&lt;code&gt;kable&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The socio-economic theory of animal abundance</title>
      <link>https://jacintak.github.io/post/2021-04-01-the-socio-economic-theory-of-animal-abundance/</link>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-04-01-the-socio-economic-theory-of-animal-abundance/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-04-01-the-socio-economic-theory-of-animal-abundance/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Where do animals live and why? These are some of the questions that ecologists are interested in. Sure, we can talk about patterns of abundance in an area in terms of abiotic or biotic factors or niche variation. But what if there’s more to animals than that?&lt;/p&gt;
&lt;p&gt;What if a young animal is concerned not just about eating, being eaten and living to reproduce but also with their finances, housing, commute and social mobility? What if a larger or older individual lives where they live not because they can outcompete smaller individuals for limited resources, but because they have accrued greater capital over time and thus have higher purchasing power?&lt;/p&gt;
&lt;p&gt;None of these questions are answered by current ecological theory. We need an alternative explanation for animal distributions and abundances. Here, I present to you the &lt;strong&gt;socio-economic theory of animal abundance&lt;/strong&gt;. I illustrate this theory using the Australian ghost crab (&lt;em&gt;Ocypode cordimana&lt;/em&gt;) as a case study.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;a-case-study-on-ghost-crabs&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;A case study on ghost crabs&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Ghost_crab&#34;&gt;Ghost crabs&lt;/a&gt; are a common intertidal species in tropical sandy beaches. Forget beach front digs with a sea view. They have literal digs on the beach. What’s more, &lt;em&gt;Ocypode cordimana&lt;/em&gt; is a species of ghost crab that lives on K’garri (Fraser Island), Australia, so they have prime access to the largest sand island in the world in the luckiest country in the world.&lt;/p&gt;
&lt;p&gt;On K’garri, &lt;em&gt;O. cordimana&lt;/em&gt; burrows are distributed from the low tide mark to the high sand dunes. The size of the burrows are indicative of the size of the home owner. Larger holes and thus larger crabs are found further up the beach from the shore. Higher densities of smaller holes are found closer to the low tide mark and lower densities of larger holes are found further away from the shore.&lt;/p&gt;
&lt;p&gt;A boring ecologist might hypothesise that this size-abundance gradient is explained by intraspecific competition or gradients of vegetation cover. But here is the socio-economic explanation:&lt;/p&gt;
&lt;p&gt;Ghost crabs are nocturnal (hence, ghosty; not because they are terrible friends – or are they?). At night they head down to the low tide line and forage among the detritus. This is the Central Business District (CBD) where crabs do their biz and partay. Ghost crabs need to commute every day and, like all reasonable beings, they want to avoid the rush hour traffic least they succumb to road rage. And it would not do to be seen participating in such vulgar behaviour in this day and age. Contests are better left to the dishonest fiddler crabs – the cheaters. Rather, all crabs openly carry weapons (claws) as a deterrent via mutually assured destruction.&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;crab.png&#34; title=&#34;fig:&#34; alt=&#34;A schematic of a ghost crab. Not to scale.&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;A schematic of a ghost crab. Not to scale.&lt;/p&gt;
&lt;p&gt;Crabs could minimise their commute and live close to the CBD. But living here is dangerous. The sand is fine – poor digging quality so only small houses can be built. The close proximity to the CBD and the ocean means the area gets inundated at high tide, which makes insurance premiums go through the roof. Housing density is high and competition for space is fierce. No-one enjoys hearing their neighbours through the fine grain sand. The only crabs that can live here are small, young crabs (including grad students) who can only afford to live in these inner city slums and dream of living further away from the gangland crime.&lt;/p&gt;
&lt;p&gt;In more recent times, the inner city has been undergoing gentrification. Young working professional crabs (Yuppies) and two-crab social groups with double incomes and no kids (DINKs) have been attracted by the convenience of the commute and short distance to local amenities. These crabs are larger than the typical inner city crab, have the income to create quality residences, and think the incoming tide adds character and charm to their property. These crabs enjoy an overpriced flat white with their avo on toast. You’ll often find them scurrying about to their barber appointments for their frothy bubble beards (plaid not included).&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;diagram.png&#34; title=&#34;fig:&#34; alt=&#34;The socio-economic theory of ghost crab abundance on K’garri&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;The socio-economic theory of ghost crab abundance on K’garri&lt;/p&gt;
&lt;p&gt;Beyond the inner city transition zone lies the urban sprawl known as suburbia. Suburbia is where the hopes and dreams of the young go to die and are replaced with a well manicured lawn. Here, the sand is not as wet, infrequently gets inundated, and one could afford to build a large home. The commute to the CBD is a little longer than the inner city but there’s the best of both worlds as access to the world class foredunes is equidistant away. Perfect for the weekend escape from the mediocrity.&lt;/p&gt;
&lt;p&gt;Finally, at the base of the dunes are the largest houses. The coarse sand and the roots of the foredune vegetation permit the largest burrows worthy of the largest and wealthiest crabs. Their commute is the longest but they don’t care about that, if they even need to commute at all. Their elevated position on the dune slope gives them the greatest vistas of the population and they live on the urban-rural fringe with easy access to silver-green, xerophytic spaces.&lt;/p&gt;
&lt;p&gt;Beyond the dune crest lies The Sticks as the dune transitions to woodland containing, you guessed it, sticks. Not the kind of place for crabs so few crabs are found there.&lt;/p&gt;
&lt;p&gt;And that is the socio-economic theory of animal abundance applied to ghost crabs.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Happy April Fools. There is no intellectual basis for applying the concentric zone model of cities to explain real ecological patterns. I initially conceptualised this during my undergrad ecology field trip to K’garri many years ago. This post is dedicated to Prof. Gimmie Walter, who heard it first – Happy retirement!&lt;/p&gt;
&lt;p&gt;This post was originally published on &lt;a href=&#34;http://www.ecoevoblog.com/2021/04/01/the-socio-economic-theory-of-animal-abundance/&#34;&gt;EcoEvo@TCD&lt;/a&gt; on 1st April 2021.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Leaving the valley of intermediate competence</title>
      <link>https://jacintak.github.io/post/using-mapply/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/using-mapply/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/using-mapply/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;if-it-aint-broke-dont-fix-it&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;If it ain’t broke, don’t fix it?&lt;/h1&gt;
&lt;p&gt;So you’ve spent a lot of time learning and practising &lt;code&gt;R&lt;/code&gt; and you’re pretty comfortable with using functions, if else statements and loops like they teach at introductory programming. What more is there to improve?&lt;/p&gt;
&lt;p&gt;If the answer is no or you subscribe to the quote above, then turn back now. If yes, continue.&lt;/p&gt;
&lt;p&gt;I think that even if one has the skills to do fundamental programming competently, there’s always room for improvement or something new to learn. Or you know that there’s a better, more efficient, way to do it but something is holding you back. For me, it’s usually the latter.&lt;/p&gt;
&lt;p&gt;In a milestone of using &lt;code&gt;R&lt;/code&gt; I think I have wrapped my head around replacing for loops with the &lt;code&gt;apply&lt;/code&gt; family, specifically &lt;code&gt;mapply&lt;/code&gt;. The last hurdle in delving into functional programming.&lt;/p&gt;
&lt;p&gt;I’ve used iterative coding quite a bit over the years and I’ve been using for loops to do so. As I’ve gotten more competent with applying basic concepts (like loops and functions), I’ve been moving towards optimising my code with more advanced &lt;code&gt;R&lt;/code&gt; methods. I started with using more manual functions and sourcing functions from external scripts but I was still relying on loops to apply those functions iteratively.&lt;/p&gt;
&lt;p&gt;I know loops are inefficient. I’ve waited &lt;em&gt;days&lt;/em&gt; for computationally intensive loops on large datasets to finish. I know that &lt;code&gt;apply&lt;/code&gt; and co. can be more computationally efficient but in your typical learning something new way, they hadn’t really clicked for me…until now.&lt;/p&gt;
&lt;p&gt;I’ve been trying to use &lt;code&gt;apply&lt;/code&gt; family functions where appropriate for years but I’ve never felt comfortable with using them to use them from the start. So, I default back to loops to save time and frustration.&lt;/p&gt;
&lt;p&gt;I think the slow uptake is because the syntax is different to the logic of loops that are taught, even if &lt;code&gt;apply&lt;/code&gt;’s logic is better from a computing perspective. The syntax and the logic is also inconsistent within the &lt;code&gt;apply&lt;/code&gt; family; a known disadvantage over similar functions (like &lt;code&gt;purrr::map&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;But let’s focus on a specific case before this becomes a cooking blog: replacing for loops. I’m going to assume that you are competent with manual functions, for loops and lists, and that you want to improve your code. I’m going to focus on lists because they are an efficient way of storing lots of similarly structured data in &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here are two ways to replace a for loop.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;an-example-loop&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;An example loop&lt;/h1&gt;
&lt;p&gt;Let’s create an example scenario and data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# some data to use
loop_data &amp;lt;- data.frame(col1 = c(11:15), col2 = c(20:24))

# define variable to change
a &amp;lt;- seq(0.2, 1, 0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loop_data&lt;/code&gt; is a data frame with two numeric columns (&lt;code&gt;col1&lt;/code&gt; &amp;amp; &lt;code&gt;col2&lt;/code&gt;). We technically won’t use &lt;code&gt;loop_data$col2&lt;/code&gt; but it’s there to create a 5x2 data frame.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; is a variable that we need for our function. There are 5 values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We want to add each element of &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;loop_data$col1&lt;/code&gt; and save that in a new column &lt;code&gt;loop_data$col1a&lt;/code&gt;. We will also add &lt;code&gt;a&lt;/code&gt; as a column in &lt;code&gt;loop_data&lt;/code&gt; just so we can keep track of which value was used to calculate &lt;code&gt;col1a&lt;/code&gt;. So the final output should have 25 rows (5 observations in &lt;code&gt;loop_data&lt;/code&gt; x 5 values of &lt;code&gt;a&lt;/code&gt;) and 4 columns (&lt;code&gt;col1&lt;/code&gt;, &lt;code&gt;col2&lt;/code&gt;, &lt;code&gt;col1a&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We will be storing our data in lists in all our scenarios. Note that I create the list to hold the answers (&lt;code&gt;loop_ans&lt;/code&gt;) before the function rather than to append newly calculated answers sequentially to the list within the function. I use the same &lt;code&gt;replicate&lt;/code&gt; function before all the examples. You could also start with an empty list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# data sets stored as a list - must not simplify or it will reduce to a matrix!
loop_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)

# A function to add a value a to a data frame x
loop_function &amp;lt;- function(x, a) {
  x$col1a &amp;lt;- x$col1 + a # add answer to a new column 
  x$a &amp;lt;- a # add a to a new column
  return(x) # give us the updated data frame
}

# Let&amp;#39;s loop
for(i in seq_along(a)){
  loop_ans[[i]] &amp;lt;- loop_function(loop_ans[[i]], a = a[i]) 
}

# merge to single data frame
loop_ans &amp;lt;- do.call(rbind, loop_ans)

# view the data
summary(loop_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       col1         col2        col1a            a      
##  Min.   :11   Min.   :20   Min.   :11.2   Min.   :0.2  
##  1st Qu.:12   1st Qu.:21   1st Qu.:12.4   1st Qu.:0.4  
##  Median :13   Median :22   Median :13.6   Median :0.6  
##  Mean   :13   Mean   :22   Mean   :13.6   Mean   :0.6  
##  3rd Qu.:14   3rd Qu.:23   3rd Qu.:14.8   3rd Qu.:0.8  
##  Max.   :15   Max.   :24   Max.   :16.0   Max.   :1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s the loop - should be familiar to you. Merging into a single data frame is optional if you want to keep using lists. Now let’s look at &lt;code&gt;lapply&lt;/code&gt; for a less elegant solution (!).&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;lapply&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. &lt;code&gt;lapply&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;lapply&lt;/code&gt; takes a list as input, does stuff and gives a list as output. Hence, the l in &lt;code&gt;lapply&lt;/code&gt; stands for list. The difference with loops and &lt;code&gt;lapply&lt;/code&gt; is that &lt;code&gt;lapply&lt;/code&gt; can only take one input - your data frame (or element in list). This means that we need to add the corresponding value of &lt;code&gt;a&lt;/code&gt; as a column in each element of &lt;code&gt;lapply&lt;/code&gt; - in other words to do part of what &lt;code&gt;loop_function&lt;/code&gt; did but outside the loop/&lt;code&gt;lapply&lt;/code&gt;. Thus, each data frame in the input list should have three columns: &lt;code&gt;col1&lt;/code&gt;, &lt;code&gt;col2&lt;/code&gt; &amp;amp; &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Incidentally, we can add the corresponding &lt;code&gt;a&lt;/code&gt; value as a column using &lt;code&gt;mapply&lt;/code&gt; and &lt;code&gt;cbind&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# the function only accepts one element: x
lapply_function &amp;lt;- function(x){
  x$col1a &amp;lt;- x$col1 + x$a
  return(x)
}

# Prepare the answer list
lapply_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)

# add a column using mapply
lapply_ans &amp;lt;- mapply(FUN = cbind, lapply_ans, &amp;quot;a&amp;quot; = a, SIMPLIFY = FALSE)

# apply function
lapply_ans &amp;lt;- lapply(lapply_ans, FUN = lapply_function)

# merge to single data frame
lapply_ans &amp;lt;- do.call(rbind, lapply_ans)

# view the data
summary(lapply_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       col1         col2          a           col1a     
##  Min.   :11   Min.   :20   Min.   :0.2   Min.   :11.2  
##  1st Qu.:12   1st Qu.:21   1st Qu.:0.4   1st Qu.:12.4  
##  Median :13   Median :22   Median :0.6   Median :13.6  
##  Mean   :13   Mean   :22   Mean   :0.6   Mean   :13.6  
##  3rd Qu.:14   3rd Qu.:23   3rd Qu.:0.8   3rd Qu.:14.8  
##  Max.   :15   Max.   :24   Max.   :1.0   Max.   :16.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you see it’s not as simple as the loop or &lt;code&gt;mapply&lt;/code&gt; and requires &lt;code&gt;mapply&lt;/code&gt; anyway 🤷&lt;br /&gt;
So we can do better…&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;mapply&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. &lt;code&gt;mapply&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The m in &lt;code&gt;mapply&lt;/code&gt; stands for multiple because it takes multiple arguments and applies them to the data. There are some key differences in the structure of the data and the function compared to &lt;code&gt;lapply&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can use the original loop function with two variables!
&lt;ul&gt;
&lt;li&gt;The additional variables (&lt;code&gt;a&lt;/code&gt; in this example) are written after the function &lt;code&gt;FUN&lt;/code&gt; is defined in &lt;code&gt;mapply&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We can also use the original list (&lt;code&gt;loop_data&lt;/code&gt;) without further modification!&lt;/li&gt;
&lt;li&gt;We need to tell &lt;code&gt;mapply&lt;/code&gt; not to simplify the output into a matrix by default. Note the use of upper case in &lt;code&gt;SIMPLIFY&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Prepare the answer list
mapply_ans &amp;lt;- replicate(length(a), loop_data, simplify = FALSE)
# mapply function
mapply_ans &amp;lt;- mapply(mapply_ans, FUN = loop_function, a = a, SIMPLIFY = FALSE)
# merge to single data frame
mapply_ans &amp;lt;- do.call(rbind, mapply_ans)
# view the data
summary(mapply_ans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       col1         col2        col1a            a      
##  Min.   :11   Min.   :20   Min.   :11.2   Min.   :0.2  
##  1st Qu.:12   1st Qu.:21   1st Qu.:12.4   1st Qu.:0.4  
##  Median :13   Median :22   Median :13.6   Median :0.6  
##  Mean   :13   Mean   :22   Mean   :13.6   Mean   :0.6  
##  3rd Qu.:14   3rd Qu.:23   3rd Qu.:14.8   3rd Qu.:0.8  
##  Max.   :15   Max.   :24   Max.   :16.0   Max.   :1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What &lt;code&gt;mapply&lt;/code&gt; is doing is using the n&lt;sup&gt;th&lt;/sup&gt; element of &lt;code&gt;a&lt;/code&gt; with the corresponding n&lt;sup&gt;th&lt;/sup&gt; element in the list &lt;code&gt;loop_data&lt;/code&gt;. So the fifth value of &lt;code&gt;a&lt;/code&gt; (1.0) is used in the calculations on the 5th data frame in &lt;code&gt;loop_data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’ve replace the for loop with a &lt;code&gt;mapply&lt;/code&gt; function! 👏&lt;br /&gt;
Here’s to functional programming. Next up is &lt;code&gt;purrr::map&lt;/code&gt;…&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Transparent graphing for dark backgrounds</title>
      <link>https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-02-01-transparent-graphing-for-dark-backgrounds/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I’m not usually a dark background person but I’m open to the dark side. I wanted to make a solid coloured graph with a transparent background that would show up nicely but &lt;code&gt;ggplot2&lt;/code&gt; doesn’t have a set theme for that. A clean solid fill and transparency requires some specific customisation so here is a reproducible example for you using the built-in &lt;code&gt;trees&lt;/code&gt; dataset:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tree_graph &amp;lt;- ggplot(data = trees, 
       mapping = aes(x = Height, 
                     y = Girth)) + 
    geom_point(size = 0.5, colour = &amp;quot;#B8DE29FF&amp;quot;) + 
    geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, col = &amp;quot;#B8DE29FF&amp;quot;) + 
    geom_abline(intercept = 0, slope = 1, col = &amp;quot;white&amp;quot;, lwd = 0.5, lty = 2) + 
    theme_classic() +
    theme(plot.background = element_rect(fill = &amp;quot;transparent&amp;quot;, color = NA),
          panel.background = element_rect(fill = &amp;quot;transparent&amp;quot;),
          axis.text = element_text(colour = &amp;quot;#B8DE29FF&amp;quot;, size = 8),
          axis.title = element_text(colour = &amp;quot;#B8DE29FF&amp;quot;, size = 8),
          axis.line = element_line(colour = &amp;quot;#B8DE29FF&amp;quot;),
          axis.ticks = element_line(colour = &amp;quot;#B8DE29FF&amp;quot;))

ggsave(tree_graph, filename = &amp;quot;tree_graph.png&amp;quot;, bg = &amp;quot;transparent&amp;quot;, type = &amp;quot;cairo&amp;quot;, width = 10, height = 10, dpi = 300)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a couple of generally useful elements added on purpose:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geom_smooth&lt;/code&gt; creates an automatically fitted linear model (defined using &lt;code&gt;method = &#34;lm&#34;&lt;/code&gt;). I have turned off plotting the standard errors (on by default) and manually set the colour.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geom_abline&lt;/code&gt; is your standard straight line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt; is where the customisation begins:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plot.background&lt;/code&gt; &amp;amp; &lt;code&gt;panel.background&lt;/code&gt; are set to transparent&lt;/li&gt;
&lt;li&gt;The various axis elements are set to the fill colour (a nice &lt;code&gt;viridis&lt;/code&gt; green) and desired text size&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggsave&lt;/code&gt; specifies that the background is transparent and to save it using the Cairo engine (&lt;code&gt;type = &#34;cairo&#34;&lt;/code&gt;). Cairo will create a vector based image so resizing the png isn’t an issue since the small font size is already defined.
&lt;ul&gt;
&lt;li&gt;You can also use &lt;code&gt;cairo-png&lt;/code&gt; but the graph height and width options appear to be ignored.&lt;/li&gt;
&lt;li&gt;If you don’t save it as a Cairo png, then the text will still have a white outline and won’t be a clean solid fill&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>New Year, New Look!</title>
      <link>https://jacintak.github.io/post/2021-01-01-new-year-new-look/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2021-01-01-new-year-new-look/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2021-01-01-new-year-new-look/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;welcome-to-my-revamped-website&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Welcome to my revamped website!&lt;/h1&gt;
&lt;p&gt;After banging my head against &lt;code&gt;blogdown&lt;/code&gt; and Hugo on and off for several months (years), I think I understand enough about it to refresh my site. This has been my weekend coding hobby. It’s taken so long that the under-workings of Hugo and the Academic theme used here have changed in the meantime.&lt;/p&gt;
&lt;p&gt;Setting up a site is simple enough if you follow the instructions online. The template builds a skeleton of the website and all you need to do is replace the placeholder text with your information. Simple right?&lt;/p&gt;
&lt;p&gt;Not quite. The underlying file structure takes some getting used to and you’ll have to trust the magic as your site gets compiled. But once you pass that hurdle, the system is quite powerful and the results are neat.&lt;/p&gt;
&lt;p&gt;There are many features to take advantage of. My interest was in having one site for code documentation and blogging as I was not satisfied with having a “regular” website (WordPress) with a blog and my code documentation separately on GitHub Pages.&lt;/p&gt;
&lt;p&gt;My code documentation was also messing up my GitHub. I’m not a big fan of having documentation (e.g. a static website) lumped together with package files. I also didn’t like having an orphan branch for my documentation (no winners here). I can take advantage of the features of Hugo to move my static sites off their respective repositories and into one central one. It’s better this way as some of the static pages weren’t even relevant to the rest of the repo.&lt;/p&gt;
&lt;p&gt;There are some features that are missing/not easily implemented compared to WordPress that I will miss. You can’t comment (without third party systems) or “follow” people, you can’t schedule posts and you can’t track views unless you set up Google Analytics or similar. The workflow is a bit tedious for fixing minor things (like spelling mistakes).&lt;/p&gt;
&lt;p&gt;I will keep blog posts on the &lt;a href=&#34;https://jacintakongresearch.wordpress.com&#34;&gt;WordPress site&lt;/a&gt; as an archive. I have linked to relevant blog posts in this site.&lt;/p&gt;
&lt;p&gt;There are some peculiarities that require things to be done a certain way:&lt;/p&gt;
&lt;div id=&#34;things-i-noted&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Things I noted&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I changed the name of the “Public” folder to “docs” so that my site can be built from the “docs” folder on GitHub. This seems the simplest way to organise this. The alternative is to have the “Public” folder on a different branch.&lt;/li&gt;
&lt;li&gt;Sometimes it’s a challenge to troubleshoot why things aren’t working they way you want. E.g. I couldn’t work out why the country wouldn’t show up in the document when including an address in YAML&lt;/li&gt;
&lt;li&gt;A header image/thumbnail can be included in the same folder as the content &lt;em&gt;but&lt;/em&gt; it must be called “featured” or it won’t be recognised. File names are case-sensitive&lt;/li&gt;
&lt;li&gt;You can have as many folders as you want called whatever but the (r)markdown file of the page must be called “index”
&lt;ul&gt;
&lt;li&gt;In the “Courses” feature the parent page must be called &#34;_index&#34; or it won’t work. 🤷&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rmd and the “Courses” feature don’t play nicely. Defining a table of contents via &lt;code&gt;bookdown&lt;/code&gt; outputs in the YAML doesn’t work and calling &lt;code&gt;toc: true&lt;/code&gt; directly in the YAML (following the guide) doesn’t work either.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bookdown&lt;/code&gt; and &lt;code&gt;blogdown&lt;/code&gt; don’t play nicely together in the same project either. &lt;code&gt;blogdown&lt;/code&gt; will try to render the &lt;code&gt;bookdown&lt;/code&gt; pages as a site rather than letting &lt;code&gt;bookdown&lt;/code&gt; do its thing and make a nice gitbook.
&lt;ul&gt;
&lt;li&gt;To allow this behaviour, you need to make use of the static file builder (See &lt;a href=&#34;#gitbook&#34;&gt;below&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Despite the template saying “Upcoming talks” Hugo doesn’t render things in the future (incl blog posts). You need &lt;code&gt;publishDate&lt;/code&gt; in the YAML&lt;/li&gt;
&lt;li&gt;emojis are a nice feature 😄&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;gitbook&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using the static folder to render a gitbook&lt;/h2&gt;
&lt;p&gt;To render rmd files into another output than &lt;code&gt;blogdown::html_page&lt;/code&gt; you can put the rmd in the “static” folder then write a script that compiles the site in a specific order. To permit a gitbook page within the site:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Save the &lt;code&gt;bookdown&lt;/code&gt; files in the “static” folder
&lt;ul&gt;
&lt;li&gt;It doesn’t work with files in the “content” folder, these will get the usual treatment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create a folder called “R” in the root directory&lt;/li&gt;
&lt;li&gt;Create an R script called “build.R” in the “R” folder&lt;/li&gt;
&lt;li&gt;Add the render functions you need.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blogdown::build_dir(&#34;static&#34;)&lt;/code&gt; is a wrapper for plain &lt;code&gt;rmarkdown::render()&lt;/code&gt; as is so it works best with simple files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build_dir&lt;/code&gt; doesn’t work for our gitbook example because we want a gitbook that knits with &lt;code&gt;bookdown::render_book&lt;/code&gt;, otherwise you will get a bunch of HTML files from the standard render function&lt;/li&gt;
&lt;li&gt;There’s something funny going on with the working directories. Running &lt;code&gt;render_book(&#34;static/index.rmd&#34;)&lt;/code&gt; doesn’t work, neither does the full address. Instead I had to change the working directory for the function to find the right files. I’m not sure where the function is looking as the project working directory is the root directory.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above means that all the rmd files for the gitbook also get copied into the “docs” folder. I don’t think it’s avoidable. It’s also s l o w e r to build the site because the gitbook gets rendered every time (unless you “comment it off” in the &lt;code&gt;build.R&lt;/code&gt; script.&lt;/p&gt;
&lt;p&gt;I also have a line to render my CV rmd into a PDF saved into the static folder. That PDF is then copied to the “docs” folder so I have an updated CV without needing to manually create one every time I update the original rmd. I think this is pretty handy.&lt;/p&gt;
&lt;p&gt;Here’s what my &lt;code&gt;build.R&lt;/code&gt; file contains:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Make CV PDF
rmarkdown::render(&amp;#39;content/cv/index.Rmd&amp;#39;, output_format = rmarkdown::pdf_document(keep_tex = FALSE), output_dir = &amp;quot;static/files/&amp;quot;, output_file = &amp;quot;Kong_JD_CV.pdf&amp;quot;)

# make gitbook
# blogdown::build_dir(&amp;quot;static&amp;quot;) doesn&amp;#39;t work because we want a gitbook that knits with render_book
# whereas build_dir uses rmakrdown::render() thus giving html files
old &amp;lt;- getwd()
setwd(&amp;quot;static/teaching/GLM/&amp;quot;)
bookdown::clean_book(clean = TRUE)
bookdown::render_book(input = &amp;quot;index.Rmd&amp;quot;)
setwd(old)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;having-a-drafts-folder&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Having a drafts folder&lt;/h2&gt;
&lt;p&gt;Hugo will not render draft blog posts by default but &lt;code&gt;blogdown&lt;/code&gt; will still render the files for your local site and these files get pushed to GitHub. If you don’t want your repo to contain spoilers, then you need to separate your draft posts from the published posts.&lt;/p&gt;
&lt;p&gt;One solution to stop &lt;code&gt;blogdown&lt;/code&gt; from rendering &lt;code&gt;.rmd&lt;/code&gt; files is to keep them in the “static” folder but Hugo will copy these files to the “public” (or “docs” folder in my case). I could not find an option to tell Hugo to ignore some files in the “static” folder. This does not solve our spoiler problem.&lt;/p&gt;
&lt;p&gt;We can have a “draft” folder under “content” and tell Hugo to ignore it in the &lt;code&gt;config.toml&lt;/code&gt; file (ignorefile) but that doesn’t stop &lt;code&gt;blogdown&lt;/code&gt; from rendering the file.&lt;/p&gt;
&lt;p&gt;I haven’t found a solution to stop &lt;code&gt;blogdown&lt;/code&gt; from rendering and Hugo from copying the file but Hugo doesn’t add every folder from the root directory to “Public”, only folders that match the template. So I have a folder called “drafts” which contains my drafts. &lt;code&gt;blogdown&lt;/code&gt; will still render the files every time they are saved while using &lt;code&gt;serve_site&lt;/code&gt; but they won’t interfere with the site itself. When I’m ready to publish them I can copy them to the “content/post” folder. I also added the “drafts” folder to my &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;blogdown&lt;/code&gt; has a handy function to generate a new blog post. By default it will add the new files to “content/post” but I changed this to write directly to the “drafts” folder via the variable &lt;code&gt;subdir&lt;/code&gt; and with a custom date that is used to name the folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blogdown::new_post(ext = &amp;quot;.Rmd&amp;quot;, title = &amp;quot;test&amp;quot;, subdir = &amp;quot;../drafts/&amp;quot;, date = &amp;quot;2021-01-01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;blogdown-does-theoretically-have-a-means-of-excluding-files&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;blogdown&lt;/code&gt; does theoretically have a means of excluding files…&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;blogdown::build_site&lt;/code&gt; there is a function (&lt;code&gt;list_rmds&lt;/code&gt;) that lists files in the “content” folder and excludes files beginning with &lt;code&gt;_&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;files = files[!grepl(&amp;quot;^_&amp;quot;, basename(files)) | grepl(&amp;quot;^_index[.]&amp;quot;, basename(files))]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you’ll notice it doesn’t exclude files called &lt;code&gt;_index&lt;/code&gt; without another &lt;code&gt;!&lt;/code&gt; in front of &lt;code&gt;grepl&lt;/code&gt;. For example, if I have an file called &lt;code&gt;_drafts.Rmd&lt;/code&gt;, then &lt;code&gt;build_site&lt;/code&gt; will ignore it. But if I have a file called &lt;code&gt;_index.Rmd&lt;/code&gt;, then &lt;code&gt;build_site&lt;/code&gt; will render it. I don’t know what the behaviour of this is supposed to be so I’m not sure if it is a mistake.&lt;/p&gt;
&lt;p&gt;This function is not present in &lt;code&gt;preview_site&lt;/code&gt; which means that the live preview is going to build all your &lt;code&gt;.Rmd&lt;/code&gt; files regardless and it will show up on the live preview.&lt;/p&gt;
&lt;p&gt;Either way, your drafts will still get pushed to GitHub unless you specify the files in &lt;code&gt;.gitignore&lt;/code&gt; (e.g. &lt;code&gt;**/_*.Rmd&lt;/code&gt;) so I wouldn’t say using &lt;code&gt;_&lt;/code&gt; in your file names is an easier option.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-customisations-via-layoutspartials-templates&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other customisations via “layouts/partials” templates&lt;/h2&gt;
&lt;p&gt;Because Hugo copies any folder in the root directory into “docs” which matches the theme template, it will override any files in the “themes” folder that matches the name of the folder in the root directory. This means that you can create custom templates without modifying the original template. Thus, having a folder called “layouts/partials” will override any “partials” templates within the “theme” folder.&lt;/p&gt;
&lt;p&gt;I have added some minor customisations to reflect personal preference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added markdown to the author list in &lt;code&gt;page_metadata_authors.html&lt;/code&gt; so that I can customise my name and bold it in the list of authors under publications&lt;/li&gt;
&lt;li&gt;Changed the site footer to include &lt;code&gt;blogdown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Changed &lt;code&gt;page_metadata.html&lt;/code&gt; to show both the last modified and published date. Last modified date is default.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m not saying goodbye to the grasshoppers so my flavicon is a grasshopper emoji 🦗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Jacinta @ Humans of BioSciences</title>
      <link>https://jacintak.github.io/post/2020-12-17-jacinta-humans-of-biosciences/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://jacintak.github.io/post/2020-12-17-jacinta-humans-of-biosciences/</guid>
      <description>
&lt;script src=&#34;https://jacintak.github.io/post/2020-12-17-jacinta-humans-of-biosciences/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I was recently featured on Humans of BioSciences, a series about the people of the &lt;a href=&#34;https://biosciences.unimelb.edu.au/&#34;&gt;School of Biosciences&lt;/a&gt; at the University of Melbourne (my alma mater).&lt;/p&gt;
&lt;p&gt;You can read the Twitter &lt;a href=&#34;https://twitter.com/BioSci_UniMelb/status/1339375265961582592&#34;&gt;thread&lt;/a&gt; and the full interview &lt;a href=&#34;https://biosciences.unimelb.edu.au/news/hbos/jacinta-kong-humans-of-biosciences&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
